/*
 * This file is automatically generated by MqlCompiler - DO NOT EDIT
 * Your changes will be lost when the original source is recompiled
 */

#include <midas.h>
#include "MqlArray.h"
#include "MqlNtupleColumn.h"
#include "Mql.h"

#include <stdio.h>
#include <stdlib.h>
#include <TH1.h>
#include <TH2.h>
#include <TH3.h>
#include <TNtuple.h>

INT MMuPC1AnalysisMQL_init();
INT MMuPC1AnalysisMQL(EVENT_HEADER *, void *);


ANA_MODULE MMuPC1AnalysisMQL_module = 
{
  "MMuPC1AnalysisMQL", /* module name */
  "MqlCompiler", /* author */
  MMuPC1AnalysisMQL, /* event routine */
  NULL, /* BOR routine */
  NULL, /* EOR routine */
  MMuPC1AnalysisMQL_init, /* init routine */
  NULL, /* exit routine */
  NULL, /* parameter structure */
  0, /* structure size */
  NULL, /* initial parameters */
};

#include <common.h>
#include <ucb_common.h>
#define Tier1 ON
#define Tier2 OFF
#define Tier3 OFF
struct _u_MMuPC1AnalysisMQL_1
{
  #include "HITS.h"
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_1> _t_hits;
struct _u_MMuPC1AnalysisMQL_2
{
  double time;
  int parameter;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_2> _t_muPC1_hits;

static TH1D *_h_parameters_muPC1;
struct _u_MMuPC1AnalysisMQL_3
{
  double time;
  int Xwire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_3> _t_muPC1X_raw;

struct _u_MMuPC1AnalysisMQL_4
{
  double time_1;
  int Xwire_1;
  double time_2;
  int Xwire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_4> _t_muPC1X_raw_auto;

// Comparison for muPC1X_raw on variable time
static int _u_MMuPC1AnalysisMQL_37(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_3 *_o1 = (struct _u_MMuPC1AnalysisMQL_3 *) _v1;
  struct _u_MMuPC1AnalysisMQL_3 *_o2 = (struct _u_MMuPC1AnalysisMQL_3 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_raw on variable time
static int _u_MMuPC1AnalysisMQL_38(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_3 *_o1 = (struct _u_MMuPC1AnalysisMQL_3 *) _v1;
  struct _u_MMuPC1AnalysisMQL_3 *_o2 = (struct _u_MMuPC1AnalysisMQL_3 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH2D *_h_muPC1_X_raw_autosingles_2D;
static TH1D *_h_muPC1_X_raw_autocorr_all_1D;
static TH2D *_h_muPC1_X_raw_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_5
{
  double time;
  int cluster_size;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_5> _t_muPC1X_spark_search;

// Comparison for muPC1X_raw on variable time
static int _u_MMuPC1AnalysisMQL_39(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_3 *_o1 = (struct _u_MMuPC1AnalysisMQL_3 *) _v1;
  struct _u_MMuPC1AnalysisMQL_3 *_o2 = (struct _u_MMuPC1AnalysisMQL_3 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_spark_search on variable time
static int _u_MMuPC1AnalysisMQL_40(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_5 *_o1 = (struct _u_MMuPC1AnalysisMQL_5 *) _v1;
  struct _u_MMuPC1AnalysisMQL_5 *_o2 = (struct _u_MMuPC1AnalysisMQL_5 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int cluster_size = _o1->cluster_size;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int cluster_size = _o2->cluster_size;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_spark_search_Xwires;
struct _u_MMuPC1AnalysisMQL_6
{
  double time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_6> _t_muPC1X_sparks;

static TH1D *_h_muPC1_spark_count_Xwires;
struct _u_MMuPC1AnalysisMQL_7
{
  double time;
  int Xwire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_7> _t_muPC1X_SC;

// Comparison for muPC1X_raw on variable time
static int _u_MMuPC1AnalysisMQL_41(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_3 *_o1 = (struct _u_MMuPC1AnalysisMQL_3 *) _v1;
  struct _u_MMuPC1AnalysisMQL_3 *_o2 = (struct _u_MMuPC1AnalysisMQL_3 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_sparks on variable time
static int _u_MMuPC1AnalysisMQL_42(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_6 *_o1 = (struct _u_MMuPC1AnalysisMQL_6 *) _v1;
  struct _u_MMuPC1AnalysisMQL_6 *_o2 = (struct _u_MMuPC1AnalysisMQL_6 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_8
{
  double time_1;
  int Xwire_1;
  double time_2;
  int Xwire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_8> _t_muPC1X_SC_auto;

// Comparison for muPC1X_SC on variable time
static int _u_MMuPC1AnalysisMQL_43(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_7 *_o1 = (struct _u_MMuPC1AnalysisMQL_7 *) _v1;
  struct _u_MMuPC1AnalysisMQL_7 *_o2 = (struct _u_MMuPC1AnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_SC on variable time
static int _u_MMuPC1AnalysisMQL_44(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_7 *_o1 = (struct _u_MMuPC1AnalysisMQL_7 *) _v1;
  struct _u_MMuPC1AnalysisMQL_7 *_o2 = (struct _u_MMuPC1AnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_SC_autocorr_all_1D;
static TH2D *_h_muPC1_X_SC_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_9
{
  double time;
  int Xwire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_9> _t_muPC1X_AD;

// Comparison for muPC1X_SC on variable time
static int _u_MMuPC1AnalysisMQL_45(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_7 *_o1 = (struct _u_MMuPC1AnalysisMQL_7 *) _v1;
  struct _u_MMuPC1AnalysisMQL_7 *_o2 = (struct _u_MMuPC1AnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_AD on variable time
static int _u_MMuPC1AnalysisMQL_46(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_9 *_o1 = (struct _u_MMuPC1AnalysisMQL_9 *) _v1;
  struct _u_MMuPC1AnalysisMQL_9 *_o2 = (struct _u_MMuPC1AnalysisMQL_9 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_10
{
  double time_1;
  int Xwire_1;
  double time_2;
  int Xwire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_10> _t_muPC1X_AD_auto;

// Comparison for muPC1X_AD on variable time
static int _u_MMuPC1AnalysisMQL_47(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_9 *_o1 = (struct _u_MMuPC1AnalysisMQL_9 *) _v1;
  struct _u_MMuPC1AnalysisMQL_9 *_o2 = (struct _u_MMuPC1AnalysisMQL_9 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_AD on variable time
static int _u_MMuPC1AnalysisMQL_48(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_9 *_o1 = (struct _u_MMuPC1AnalysisMQL_9 *) _v1;
  struct _u_MMuPC1AnalysisMQL_9 *_o2 = (struct _u_MMuPC1AnalysisMQL_9 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_AD_autocorr_all_1D;
static TH2D *_h_muPC1_X_AD_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_11
{
  double time;
  int Xwire_min;
  int Xwire_max;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_11> _t_muPC1X_cluster_contiguous;

// Comparison for muPC1X_AD on variable time
static int _u_MMuPC1AnalysisMQL_49(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_9 *_o1 = (struct _u_MMuPC1AnalysisMQL_9 *) _v1;
  struct _u_MMuPC1AnalysisMQL_9 *_o2 = (struct _u_MMuPC1AnalysisMQL_9 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_50(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_11 *_o1 = (struct _u_MMuPC1AnalysisMQL_11 *) _v1;
  struct _u_MMuPC1AnalysisMQL_11 *_o2 = (struct _u_MMuPC1AnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire_min = _o1->Xwire_min;
    int Xwire_max = _o1->Xwire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire_min = _o2->Xwire_min;
    int Xwire_max = _o2->Xwire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_12
{
  int cluster_sep;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_12> _t_muPC1X_cluster_contiguous_sep;

// Comparison for muPC1X_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_51(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_11 *_o1 = (struct _u_MMuPC1AnalysisMQL_11 *) _v1;
  struct _u_MMuPC1AnalysisMQL_11 *_o2 = (struct _u_MMuPC1AnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire_min = _o1->Xwire_min;
    int Xwire_max = _o1->Xwire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire_min = _o2->Xwire_min;
    int Xwire_max = _o2->Xwire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_52(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_11 *_o1 = (struct _u_MMuPC1AnalysisMQL_11 *) _v1;
  struct _u_MMuPC1AnalysisMQL_11 *_o2 = (struct _u_MMuPC1AnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire_min = _o1->Xwire_min;
    int Xwire_max = _o1->Xwire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire_min = _o2->Xwire_min;
    int Xwire_max = _o2->Xwire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_cluster_contiguous_separation;
struct _u_MMuPC1AnalysisMQL_13
{
  double time;
  double Xwire;
  int cluster_size;
  int cluster_width;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_13> _t_muPC1X;

// Comparison for muPC1X_AD on variable time
static int _u_MMuPC1AnalysisMQL_53(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_9 *_o1 = (struct _u_MMuPC1AnalysisMQL_9 *) _v1;
  struct _u_MMuPC1AnalysisMQL_9 *_o2 = (struct _u_MMuPC1AnalysisMQL_9 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Xwire = _o1->Xwire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Xwire = _o2->Xwire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_54(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_final_cluster_size;
static TH1D *_h_muPC1_X_final_cluster_width;
static TH1D *_h_muPC1_X_final_cluster_avg;
struct _u_MMuPC1AnalysisMQL_14
{
  double Xwire;
  double muPC1Time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_14> _t_muPC1X_export;

struct _u_MMuPC1AnalysisMQL_15
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_15> _t_muPC1X_auto;

// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_55(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_56(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_final_cluster_autocorr_all_1D;
struct _u_MMuPC1AnalysisMQL_16
{
  double time1;
  double time2;
  double wire_diff;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_16> _t_muPC1X_spatial_auto;

// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_57(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_58(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_X_final_cluster_autocorr_spatial_all_1D;
struct _u_MMuPC1AnalysisMQL_17
{
  double time;
  int Ywire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_17> _t_muPC1Y_raw;

struct _u_MMuPC1AnalysisMQL_18
{
  double time_1;
  int Ywire_1;
  double time_2;
  int Ywire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_18> _t_muPC1Y_raw_auto;

// Comparison for muPC1Y_raw on variable time
static int _u_MMuPC1AnalysisMQL_59(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_17 *_o1 = (struct _u_MMuPC1AnalysisMQL_17 *) _v1;
  struct _u_MMuPC1AnalysisMQL_17 *_o2 = (struct _u_MMuPC1AnalysisMQL_17 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_raw on variable time
static int _u_MMuPC1AnalysisMQL_60(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_17 *_o1 = (struct _u_MMuPC1AnalysisMQL_17 *) _v1;
  struct _u_MMuPC1AnalysisMQL_17 *_o2 = (struct _u_MMuPC1AnalysisMQL_17 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH2D *_h_muPC1_Y_raw_autosingles_2D;
static TH1D *_h_muPC1_Y_raw_autocorr_all_1D;
static TH2D *_h_muPC1_Y_raw_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_19
{
  double time;
  int cluster_size;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_19> _t_muPC1Y_spark_search;

// Comparison for muPC1Y_raw on variable time
static int _u_MMuPC1AnalysisMQL_61(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_17 *_o1 = (struct _u_MMuPC1AnalysisMQL_17 *) _v1;
  struct _u_MMuPC1AnalysisMQL_17 *_o2 = (struct _u_MMuPC1AnalysisMQL_17 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_spark_search on variable time
static int _u_MMuPC1AnalysisMQL_62(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_19 *_o1 = (struct _u_MMuPC1AnalysisMQL_19 *) _v1;
  struct _u_MMuPC1AnalysisMQL_19 *_o2 = (struct _u_MMuPC1AnalysisMQL_19 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int cluster_size = _o1->cluster_size;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int cluster_size = _o2->cluster_size;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_spark_search_Ywires;
struct _u_MMuPC1AnalysisMQL_20
{
  double time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_20> _t_muPC1Y_sparks;

static TH1D *_h_muPC1_spark_count_Ywires;
struct _u_MMuPC1AnalysisMQL_21
{
  double time;
  int Ywire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_21> _t_muPC1Y_SC;

// Comparison for muPC1Y_raw on variable time
static int _u_MMuPC1AnalysisMQL_63(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_17 *_o1 = (struct _u_MMuPC1AnalysisMQL_17 *) _v1;
  struct _u_MMuPC1AnalysisMQL_17 *_o2 = (struct _u_MMuPC1AnalysisMQL_17 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_sparks on variable time
static int _u_MMuPC1AnalysisMQL_64(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_20 *_o1 = (struct _u_MMuPC1AnalysisMQL_20 *) _v1;
  struct _u_MMuPC1AnalysisMQL_20 *_o2 = (struct _u_MMuPC1AnalysisMQL_20 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_22
{
  double time_1;
  int Ywire_1;
  double time_2;
  int Ywire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_22> _t_muPC1Y_SC_auto;

// Comparison for muPC1Y_SC on variable time
static int _u_MMuPC1AnalysisMQL_65(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_21 *_o1 = (struct _u_MMuPC1AnalysisMQL_21 *) _v1;
  struct _u_MMuPC1AnalysisMQL_21 *_o2 = (struct _u_MMuPC1AnalysisMQL_21 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_SC on variable time
static int _u_MMuPC1AnalysisMQL_66(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_21 *_o1 = (struct _u_MMuPC1AnalysisMQL_21 *) _v1;
  struct _u_MMuPC1AnalysisMQL_21 *_o2 = (struct _u_MMuPC1AnalysisMQL_21 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_SC_autocorr_all_1D;
static TH2D *_h_muPC1_Y_SC_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_23
{
  double time;
  int Ywire;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_23> _t_muPC1Y_AD;

// Comparison for muPC1Y_SC on variable time
static int _u_MMuPC1AnalysisMQL_67(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_21 *_o1 = (struct _u_MMuPC1AnalysisMQL_21 *) _v1;
  struct _u_MMuPC1AnalysisMQL_21 *_o2 = (struct _u_MMuPC1AnalysisMQL_21 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_AD on variable time
static int _u_MMuPC1AnalysisMQL_68(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_23 *_o1 = (struct _u_MMuPC1AnalysisMQL_23 *) _v1;
  struct _u_MMuPC1AnalysisMQL_23 *_o2 = (struct _u_MMuPC1AnalysisMQL_23 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_24
{
  double time_1;
  int Ywire_1;
  double time_2;
  int Ywire_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_24> _t_muPC1Y_AD_auto;

// Comparison for muPC1Y_AD on variable time
static int _u_MMuPC1AnalysisMQL_69(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_23 *_o1 = (struct _u_MMuPC1AnalysisMQL_23 *) _v1;
  struct _u_MMuPC1AnalysisMQL_23 *_o2 = (struct _u_MMuPC1AnalysisMQL_23 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_AD on variable time
static int _u_MMuPC1AnalysisMQL_70(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_23 *_o1 = (struct _u_MMuPC1AnalysisMQL_23 *) _v1;
  struct _u_MMuPC1AnalysisMQL_23 *_o2 = (struct _u_MMuPC1AnalysisMQL_23 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_AD_autocorr_all_1D;
static TH2D *_h_muPC1_Y_AD_autocorr_2D;
struct _u_MMuPC1AnalysisMQL_25
{
  double time;
  int Ywire_min;
  int Ywire_max;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_25> _t_muPC1Y_cluster_contiguous;

// Comparison for muPC1Y_AD on variable time
static int _u_MMuPC1AnalysisMQL_71(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_23 *_o1 = (struct _u_MMuPC1AnalysisMQL_23 *) _v1;
  struct _u_MMuPC1AnalysisMQL_23 *_o2 = (struct _u_MMuPC1AnalysisMQL_23 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_72(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_25 *_o1 = (struct _u_MMuPC1AnalysisMQL_25 *) _v1;
  struct _u_MMuPC1AnalysisMQL_25 *_o2 = (struct _u_MMuPC1AnalysisMQL_25 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire_min = _o1->Ywire_min;
    int Ywire_max = _o1->Ywire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire_min = _o2->Ywire_min;
    int Ywire_max = _o2->Ywire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_26
{
  int cluster_sep;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_26> _t_muPC1Y_cluster_contiguous_sep;

// Comparison for muPC1Y_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_73(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_25 *_o1 = (struct _u_MMuPC1AnalysisMQL_25 *) _v1;
  struct _u_MMuPC1AnalysisMQL_25 *_o2 = (struct _u_MMuPC1AnalysisMQL_25 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire_min = _o1->Ywire_min;
    int Ywire_max = _o1->Ywire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire_min = _o2->Ywire_min;
    int Ywire_max = _o2->Ywire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y_cluster_contiguous on variable time
static int _u_MMuPC1AnalysisMQL_74(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_25 *_o1 = (struct _u_MMuPC1AnalysisMQL_25 *) _v1;
  struct _u_MMuPC1AnalysisMQL_25 *_o2 = (struct _u_MMuPC1AnalysisMQL_25 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire_min = _o1->Ywire_min;
    int Ywire_max = _o1->Ywire_max;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire_min = _o2->Ywire_min;
    int Ywire_max = _o2->Ywire_max;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_cluster_contiguous_separation;
struct _u_MMuPC1AnalysisMQL_27
{
  double time;
  double Ywire;
  int cluster_size;
  int cluster_width;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_27> _t_muPC1Y;

// Comparison for muPC1Y_AD on variable time
static int _u_MMuPC1AnalysisMQL_75(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_23 *_o1 = (struct _u_MMuPC1AnalysisMQL_23 *) _v1;
  struct _u_MMuPC1AnalysisMQL_23 *_o2 = (struct _u_MMuPC1AnalysisMQL_23 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    int Ywire = _o1->Ywire;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    int Ywire = _o2->Ywire;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_76(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_final_cluster_size;
static TH1D *_h_muPC1_Y_final_cluster_width;
static TH1D *_h_muPC1_Y_final_cluster_avg;
struct _u_MMuPC1AnalysisMQL_28
{
  double Ywire;
  double muPC1Time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_28> _t_muPC1Y_export;

struct _u_MMuPC1AnalysisMQL_29
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_29> _t_muPC1Y_temporal_auto;

// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_77(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_78(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_final_cluster_autocorr_all_1D;
struct _u_MMuPC1AnalysisMQL_30
{
  double time1;
  double time2;
  double wire_diff;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_30> _t_muPC1Y_spatial_auto;

// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_79(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_80(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_Y_final_cluster_autocorr_spatial_all_1D;
struct _u_MMuPC1AnalysisMQL_31
{
  double Xwire;
  double Ywire;
  double muPC1Time;
  double XYtdiff;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_31> _t_muPC1XY;

// Comparison for muPC1X on variable time
static int _u_MMuPC1AnalysisMQL_81(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_13 *_o1 = (struct _u_MMuPC1AnalysisMQL_13 *) _v1;
  struct _u_MMuPC1AnalysisMQL_13 *_o2 = (struct _u_MMuPC1AnalysisMQL_13 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Xwire = _o1->Xwire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Xwire = _o2->Xwire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1Y on variable time
static int _u_MMuPC1AnalysisMQL_82(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_27 *_o1 = (struct _u_MMuPC1AnalysisMQL_27 *) _v1;
  struct _u_MMuPC1AnalysisMQL_27 *_o2 = (struct _u_MMuPC1AnalysisMQL_27 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    double Ywire = _o1->Ywire;
    int cluster_size = _o1->cluster_size;
    int cluster_width = _o1->cluster_width;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    double Ywire = _o2->Ywire;
    int cluster_size = _o2->cluster_size;
    int cluster_width = _o2->cluster_width;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1XY on variable muPC1Time
static int _u_MMuPC1AnalysisMQL_83(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_31 *_o1 = (struct _u_MMuPC1AnalysisMQL_31 *) _v1;
  struct _u_MMuPC1AnalysisMQL_31 *_o2 = (struct _u_MMuPC1AnalysisMQL_31 *) _v2;
  double _sv1, _sv2;
  {
    double Xwire = _o1->Xwire;
    double Ywire = _o1->Ywire;
    double muPC1Time = _o1->muPC1Time;
    double XYtdiff = _o1->XYtdiff;
    _sv1 = muPC1Time;
  }
  {
    double Xwire = _o2->Xwire;
    double Ywire = _o2->Ywire;
    double muPC1Time = _o2->muPC1Time;
    double XYtdiff = _o2->XYtdiff;
    _sv2 = muPC1Time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_coinc_XY_tdiff;
struct _u_MMuPC1AnalysisMQL_32
{
  double Xwire;
  double Ywire;
  double muPC1Time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_32> _t_muPC1;

static TH2D *_h_muPC1_coinc_XY_2D;
struct _u_MMuPC1AnalysisMQL_33
{
  double muPC1Time_1;
  double muPC1Time_2;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_33> _t_muPC1_auto;

// Comparison for muPC1 on variable muPC1Time
static int _u_MMuPC1AnalysisMQL_84(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_32 *_o1 = (struct _u_MMuPC1AnalysisMQL_32 *) _v1;
  struct _u_MMuPC1AnalysisMQL_32 *_o2 = (struct _u_MMuPC1AnalysisMQL_32 *) _v2;
  double _sv1, _sv2;
  {
    double Xwire = _o1->Xwire;
    double Ywire = _o1->Ywire;
    double muPC1Time = _o1->muPC1Time;
    _sv1 = muPC1Time;
  }
  {
    double Xwire = _o2->Xwire;
    double Ywire = _o2->Ywire;
    double muPC1Time = _o2->muPC1Time;
    _sv2 = muPC1Time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muPC1 on variable muPC1Time
static int _u_MMuPC1AnalysisMQL_85(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_32 *_o1 = (struct _u_MMuPC1AnalysisMQL_32 *) _v1;
  struct _u_MMuPC1AnalysisMQL_32 *_o2 = (struct _u_MMuPC1AnalysisMQL_32 *) _v2;
  double _sv1, _sv2;
  {
    double Xwire = _o1->Xwire;
    double Ywire = _o1->Ywire;
    double muPC1Time = _o1->muPC1Time;
    _sv1 = muPC1Time;
  }
  {
    double Xwire = _o2->Xwire;
    double Ywire = _o2->Ywire;
    double muPC1Time = _o2->muPC1Time;
    _sv2 = muPC1Time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_coinc_XY_autocorr_all_1D;
struct _u_MMuPC1AnalysisMQL_34
{
  double time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_34> _t_muPC1_sparks_union;

// Comparison for muPC1_sparks_union on variable time
static int _u_MMuPC1AnalysisMQL_86(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_34 *_o1 = (struct _u_MMuPC1AnalysisMQL_34 *) _v1;
  struct _u_MMuPC1AnalysisMQL_34 *_o2 = (struct _u_MMuPC1AnalysisMQL_34 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuPC1AnalysisMQL_35
{
  double time;
  int cluster_size;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_35> _t_muPC1_sparks_clustered;

// Comparison for muPC1_sparks_union on variable time
static int _u_MMuPC1AnalysisMQL_87(const void *_v1, const void *_v2)
{
  struct _u_MMuPC1AnalysisMQL_34 *_o1 = (struct _u_MMuPC1AnalysisMQL_34 *) _v1;
  struct _u_MMuPC1AnalysisMQL_34 *_o2 = (struct _u_MMuPC1AnalysisMQL_34 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muPC1_spark_clustered_blocktime;
struct _u_MMuPC1AnalysisMQL_36
{
  double time;
};
static MqlArray<struct _u_MMuPC1AnalysisMQL_36> _t_muPC1_sparks_chamberwide;

static TH1D *_h_muPC1_spark_chamberwide_count;
static TH1D *_h_muPC1_spark_chamberwide_blocktime;

INT MMuPC1AnalysisMQL_init()
{
  if(Tier1)
  {
    _h_parameters_muPC1 = new TH1D("parameters_muPC1", "#muPC1 hits", 
      101, 3999.5, 4100.5);
    _h_parameters_muPC1->GetXaxis()->SetTitle("parameter");
  }
  if(Tier3)
  {
    _h_muPC1_X_raw_autosingles_2D = new TH2D("muPC1_X_raw_autosingles_2D", "#muPC1 raw Xwire singles autocorr 2D", 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5, 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_raw_autosingles_2D->GetXaxis()->SetTitle("Xwire_1");
    _h_muPC1_X_raw_autosingles_2D->GetYaxis()->SetTitle("Xwire_2");
  }
  if(Tier3)
  {
    _h_muPC1_X_raw_autocorr_all_1D = new TH1D("muPC1_X_raw_autocorr_all_1D", "#muPC1 raw Xwire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_X_raw_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_raw_autocorr_2D = new TH2D("muPC1_X_raw_autocorr_2D", "#muPC1 raw Xwire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_raw_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_X_raw_autocorr_2D->GetYaxis()->SetTitle("Xwire_1");
  }
  if(Tier1)
  {
    _h_muPC1_spark_search_Xwires = new TH1D("muPC1_spark_search_Xwires", "#muPC1 spark search Xwire cluster_size", 
      (3*kMuPC1NumXWires), 0.5, (3*kMuPC1NumXWires)+0.5);
    _h_muPC1_spark_search_Xwires->GetXaxis()->SetTitle("cluster_size");
  }
  if(Tier1)
  {
    _h_muPC1_spark_count_Xwires = new TH1D("muPC1_spark_count_Xwires", "Number of #muPC1 Xwire sparks", 
      3, -0.5, 2.5);
    _h_muPC1_spark_count_Xwires->GetXaxis()->SetTitle("1");
  }
  if(Tier3)
  {
    _h_muPC1_X_SC_autocorr_all_1D = new TH1D("muPC1_X_SC_autocorr_all_1D", "#muPC1 SC Xwire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_X_SC_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_SC_autocorr_2D = new TH2D("muPC1_X_SC_autocorr_2D", "#muPC1 SC Xwire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_SC_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_X_SC_autocorr_2D->GetYaxis()->SetTitle("Xwire_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_AD_autocorr_all_1D = new TH1D("muPC1_X_AD_autocorr_all_1D", "#muPC1 AD Xwire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_X_AD_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_AD_autocorr_2D = new TH2D("muPC1_X_AD_autocorr_2D", "#muPC1 AD Xwire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_AD_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_X_AD_autocorr_2D->GetYaxis()->SetTitle("Xwire_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_cluster_contiguous_separation = new TH1D("muPC1_X_cluster_contiguous_separation", "#muPC1 Xwire contiguous cluster wire separation", 
      31, -0.5, 30.5);
    _h_muPC1_X_cluster_contiguous_separation->GetXaxis()->SetTitle("cluster_sep");
  }
  if(Tier1)
  {
    _h_muPC1_X_final_cluster_size = new TH1D("muPC1_X_final_cluster_size", "#muPC1 Xwire cluster size", 
      kMuPC1NumXWires+1, 0.5, kMuPC1NumXWires+1.5);
    _h_muPC1_X_final_cluster_size->GetXaxis()->SetTitle("cluster_size");
  }
  if(Tier1)
  {
    _h_muPC1_X_final_cluster_width = new TH1D("muPC1_X_final_cluster_width", "#muPC1 Xwire cluster width", 
      kMuPC1NumXWires+1, 0.5, kMuPC1NumXWires+1.5);
    _h_muPC1_X_final_cluster_width->GetXaxis()->SetTitle("cluster_width");
  }
  if(Tier1)
  {
    _h_muPC1_X_final_cluster_avg = new TH1D("muPC1_X_final_cluster_avg", "#muPC1 Xwire cluster average", 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_final_cluster_avg->GetXaxis()->SetTitle("Xwire");
  }
  if(Tier3)
  {
    _h_muPC1_X_final_cluster_autocorr_all_1D = new TH1D("muPC1_X_final_cluster_autocorr_all_1D", "#muPC1 clustered Xwire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_X_final_cluster_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_X_final_cluster_autocorr_spatial_all_1D = new TH1D("muPC1_X_final_cluster_autocorr_spatial_all_1D", "#muPC1X clustered autocorr neighbors spatial, 0-150 ns", 
      kMuPC1NumXWires+1, -0.5, kMuPC1NumXWires+0.5);
    _h_muPC1_X_final_cluster_autocorr_spatial_all_1D->GetXaxis()->SetTitle("wire_diff");
  }
  if(Tier3)
  {
    _h_muPC1_Y_raw_autosingles_2D = new TH2D("muPC1_Y_raw_autosingles_2D", "#muPC1 raw Ywire singles autocorr 2D", 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5, 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_raw_autosingles_2D->GetXaxis()->SetTitle("Ywire_1");
    _h_muPC1_Y_raw_autosingles_2D->GetYaxis()->SetTitle("Ywire_2");
  }
  if(Tier3)
  {
    _h_muPC1_Y_raw_autocorr_all_1D = new TH1D("muPC1_Y_raw_autocorr_all_1D", "#muPC1 raw Ywire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_Y_raw_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_raw_autocorr_2D = new TH2D("muPC1_Y_raw_autocorr_2D", "#muPC1 raw Ywire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_raw_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_Y_raw_autocorr_2D->GetYaxis()->SetTitle("Ywire_1");
  }
  if(Tier1)
  {
    _h_muPC1_spark_search_Ywires = new TH1D("muPC1_spark_search_Ywires", "#muPC1 spark search Ywire cluster_size", 
      (3*kMuPC1NumYWires), 0.5, (3*kMuPC1NumYWires)+0.5);
    _h_muPC1_spark_search_Ywires->GetXaxis()->SetTitle("cluster_size");
  }
  if(Tier1)
  {
    _h_muPC1_spark_count_Ywires = new TH1D("muPC1_spark_count_Ywires", "Number of #muPC1 Ywire sparks", 
      3, -0.5, 2.5);
    _h_muPC1_spark_count_Ywires->GetXaxis()->SetTitle("1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_SC_autocorr_all_1D = new TH1D("muPC1_Y_SC_autocorr_all_1D", "#muPC1 SC Ywire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_Y_SC_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_SC_autocorr_2D = new TH2D("muPC1_Y_SC_autocorr_2D", "#muPC1 SC Ywire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_SC_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_Y_SC_autocorr_2D->GetYaxis()->SetTitle("Ywire_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_AD_autocorr_all_1D = new TH1D("muPC1_Y_AD_autocorr_all_1D", "#muPC1 AD Ywire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_Y_AD_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_AD_autocorr_2D = new TH2D("muPC1_Y_AD_autocorr_2D", "#muPC1 AD Ywire autocorr 2D", 
      11001, -5002.5, 50002.5, 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_AD_autocorr_2D->GetXaxis()->SetTitle("time_2 - time_1");
    _h_muPC1_Y_AD_autocorr_2D->GetYaxis()->SetTitle("Ywire_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_cluster_contiguous_separation = new TH1D("muPC1_Y_cluster_contiguous_separation", "#muPC1 Ywire contiguous cluster wire separation", 
      31, -0.5, 30.5);
    _h_muPC1_Y_cluster_contiguous_separation->GetXaxis()->SetTitle("cluster_sep");
  }
  if(Tier1)
  {
    _h_muPC1_Y_final_cluster_size = new TH1D("muPC1_Y_final_cluster_size", "#muPC1 Ywire cluster size", 
      kMuPC1NumYWires+1, 0.5, kMuPC1NumYWires+1.5);
    _h_muPC1_Y_final_cluster_size->GetXaxis()->SetTitle("cluster_size");
  }
  if(Tier1)
  {
    _h_muPC1_Y_final_cluster_width = new TH1D("muPC1_Y_final_cluster_width", "#muPC1 Ywire cluster width", 
      kMuPC1NumYWires+1, 0.5, kMuPC1NumYWires+1.5);
    _h_muPC1_Y_final_cluster_width->GetXaxis()->SetTitle("cluster_width");
  }
  if(Tier1)
  {
    _h_muPC1_Y_final_cluster_avg = new TH1D("muPC1_Y_final_cluster_avg", "#muPC1 Ywire cluster average", 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_final_cluster_avg->GetXaxis()->SetTitle("Ywire");
  }
  if(Tier3)
  {
    _h_muPC1_Y_final_cluster_autocorr_all_1D = new TH1D("muPC1_Y_final_cluster_autocorr_all_1D", "#muPC1 clustered Ywire autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_Y_final_cluster_autocorr_all_1D->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muPC1_Y_final_cluster_autocorr_spatial_all_1D = new TH1D("muPC1_Y_final_cluster_autocorr_spatial_all_1D", "#muPC1Y clustered autocorr neighbors spatial, 0-150 ns", 
      kMuPC1NumYWires+1, -0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_Y_final_cluster_autocorr_spatial_all_1D->GetXaxis()->SetTitle("wire_diff");
  }
  if(Tier1)
  {
    _h_muPC1_coinc_XY_tdiff = new TH1D("muPC1_coinc_XY_tdiff", "#muPC1 wires: T_{Y} - T_{X}", 
      961, -600.625, 600.625);
    _h_muPC1_coinc_XY_tdiff->GetXaxis()->SetTitle("XYtdiff");
  }
  if(Tier1)
  {
    _h_muPC1_coinc_XY_2D = new TH2D("muPC1_coinc_XY_2D", "#muPC1 2D XY-coincidences", 
      kMuPC1NumXWires, 0.5, kMuPC1NumXWires+0.5, 
      kMuPC1NumYWires, 0.5, kMuPC1NumYWires+0.5);
    _h_muPC1_coinc_XY_2D->GetXaxis()->SetTitle("Xwire");
    _h_muPC1_coinc_XY_2D->GetYaxis()->SetTitle("Ywire");
  }
  if(Tier3)
  {
    _h_muPC1_coinc_XY_autocorr_all_1D = new TH1D("muPC1_coinc_XY_autocorr_all_1D", "#muPC1 XY-coinc autocorr neighbors 1D", 
      11001, -5002.5, 50002.5);
    _h_muPC1_coinc_XY_autocorr_all_1D->GetXaxis()->SetTitle("muPC1Time_2 - muPC1Time_1");
  }
  if(Tier1)
  {
    _h_muPC1_spark_clustered_blocktime = new TH1D("muPC1_spark_clustered_blocktime", "Time of muPC1 sparks, after clustering (500ms window)", 
      500, 0, 500000000);
    _h_muPC1_spark_clustered_blocktime->GetXaxis()->SetTitle("time");
  }
  if(Tier1)
  {
    _h_muPC1_spark_chamberwide_count = new TH1D("muPC1_spark_chamberwide_count", "Number of 2-plane muPC1 sparks", 
      3, -0.5, 2.5);
    _h_muPC1_spark_chamberwide_count->GetXaxis()->SetTitle("1");
  }
  if(Tier1)
  {
    _h_muPC1_spark_chamberwide_blocktime = new TH1D("muPC1_spark_chamberwide_blocktime", "Time of 2-plane muPC1 sparks (500ms window)", 
      500, 0, 500000000);
    _h_muPC1_spark_chamberwide_blocktime->GetXaxis()->SetTitle("time");
  }
  return SUCCESS;
}

INT MMuPC1AnalysisMQL(EVENT_HEADER *pheader, void *pevent)
{
  _t_muPC1X_auto.reset();
  _t_muPC1X_cluster_contiguous.reset();
  _t_muPC1_sparks_union.reset();
  _t_muPC1Y_temporal_auto.reset();
  _t_muPC1X_raw_auto.reset();
  _t_muPC1X_AD.reset();
  _t_muPC1Y_spark_search.reset();
  _t_muPC1X_cluster_contiguous_sep.reset();
  _t_muPC1X_spatial_auto.reset();
  _t_muPC1X_export.reset();
  _t_muPC1X_SC.reset();
  _t_muPC1Y_export.reset();
  _t_muPC1Y_raw_auto.reset();
  _t_muPC1Y.reset();
  _t_muPC1X.reset();
  _t_muPC1Y_cluster_contiguous_sep.reset();
  _t_muPC1_auto.reset();
  _t_muPC1Y_SC_auto.reset();
  _t_hits.reset();
  _t_muPC1X_spark_search.reset();
  _t_muPC1X_AD_auto.reset();
  _t_muPC1X_sparks.reset();
  _t_muPC1Y_sparks.reset();
  _t_muPC1.reset();
  _t_muPC1Y_AD.reset();
  _t_muPC1_sparks_clustered.reset();
  _t_muPC1_hits.reset();
  _t_muPC1Y_raw.reset();
  _t_muPC1Y_SC.reset();
  _t_muPC1_sparks_chamberwide.reset();
  _t_muPC1Y_AD_auto.reset();
  _t_muPC1Y_cluster_contiguous.reset();
  _t_muPC1XY.reset();
  _t_muPC1Y_spatial_auto.reset();
  _t_muPC1X_raw.reset();
  _t_muPC1X_SC_auto.reset();
  int _u_MMuPC1AnalysisMQL_88 = 0;
  double _u_MMuPC1AnalysisMQL_89 = 0;
  bool _u_MMuPC1AnalysisMQL_90 = false;
  bool _u_MMuPC1AnalysisMQL_91 = false;
  int _u_MMuPC1AnalysisMQL_92 = 0;
  int _u_MMuPC1AnalysisMQL_93 = 0;
  double _u_MMuPC1AnalysisMQL_94 = 0;
  bool _u_MMuPC1AnalysisMQL_95 = false;
  bool _u_MMuPC1AnalysisMQL_96 = false;
  int _u_MMuPC1AnalysisMQL_97 = 0;
  int _u_MMuPC1AnalysisMQL_98 = 0;
  double _u_MMuPC1AnalysisMQL_99 = 0;
  bool _u_MMuPC1AnalysisMQL_100 = false;
  bool _u_MMuPC1AnalysisMQL_101 = false;
  int _u_MMuPC1AnalysisMQL_102 = 0;
  int _u_MMuPC1AnalysisMQL_103 = 0;
  double _u_MMuPC1AnalysisMQL_104 = 0;
  bool _u_MMuPC1AnalysisMQL_105 = false;
  bool _u_MMuPC1AnalysisMQL_106 = false;
  int _u_MMuPC1AnalysisMQL_107 = 0;
  int _u_MMuPC1AnalysisMQL_108 = 0;
  double _u_MMuPC1AnalysisMQL_109 = 0;
  bool _u_MMuPC1AnalysisMQL_110 = false;
  bool _u_MMuPC1AnalysisMQL_111 = false;
  int _u_MMuPC1AnalysisMQL_112 = 0;
  int _u_MMuPC1AnalysisMQL_113 = 0;
  double _u_MMuPC1AnalysisMQL_114 = 0;
  bool _u_MMuPC1AnalysisMQL_115 = false;
  bool _u_MMuPC1AnalysisMQL_116 = false;
  int _u_MMuPC1AnalysisMQL_117 = 0;
  double _u_MMuPC1AnalysisMQL_118 = 0;
  bool _u_MMuPC1AnalysisMQL_119 = false;
  bool _u_MMuPC1AnalysisMQL_120 = false;
  int _u_MMuPC1AnalysisMQL_121 = 0;
  double _u_MMuPC1AnalysisMQL_122 = 0;
  bool _u_MMuPC1AnalysisMQL_123 = false;
  bool _u_MMuPC1AnalysisMQL_124 = false;
  int _u_MMuPC1AnalysisMQL_125 = 0;
  int _u_MMuPC1AnalysisMQL_126 = 0;
  double _u_MMuPC1AnalysisMQL_127 = 0;
  bool _u_MMuPC1AnalysisMQL_128 = false;
  bool _u_MMuPC1AnalysisMQL_129 = false;
  int _u_MMuPC1AnalysisMQL_130 = 0;
  int _u_MMuPC1AnalysisMQL_131 = 0;
  double _u_MMuPC1AnalysisMQL_132 = 0;
  bool _u_MMuPC1AnalysisMQL_133 = false;
  bool _u_MMuPC1AnalysisMQL_134 = false;
  int _u_MMuPC1AnalysisMQL_135 = 0;
  int _u_MMuPC1AnalysisMQL_136 = 0;
  double _u_MMuPC1AnalysisMQL_137 = 0;
  bool _u_MMuPC1AnalysisMQL_138 = false;
  bool _u_MMuPC1AnalysisMQL_139 = false;
  int _u_MMuPC1AnalysisMQL_140 = 0;
  int _u_MMuPC1AnalysisMQL_141 = 0;
  double _u_MMuPC1AnalysisMQL_142 = 0;
  bool _u_MMuPC1AnalysisMQL_143 = false;
  bool _u_MMuPC1AnalysisMQL_144 = false;
  int _u_MMuPC1AnalysisMQL_145 = 0;
  int _u_MMuPC1AnalysisMQL_146 = 0;
  double _u_MMuPC1AnalysisMQL_147 = 0;
  bool _u_MMuPC1AnalysisMQL_148 = false;
  bool _u_MMuPC1AnalysisMQL_149 = false;
  int _u_MMuPC1AnalysisMQL_150 = 0;
  double _u_MMuPC1AnalysisMQL_151 = 0;
  bool _u_MMuPC1AnalysisMQL_152 = false;
  bool _u_MMuPC1AnalysisMQL_153 = false;
  int _u_MMuPC1AnalysisMQL_154 = 0;
  double _u_MMuPC1AnalysisMQL_155 = 0;
  bool _u_MMuPC1AnalysisMQL_156 = false;
  bool _u_MMuPC1AnalysisMQL_157 = false;
  int _u_MMuPC1AnalysisMQL_158 = 0;
  double _u_MMuPC1AnalysisMQL_159 = 0;
  bool _u_MMuPC1AnalysisMQL_160 = false;
  bool _u_MMuPC1AnalysisMQL_161 = false;
  int _u_MMuPC1AnalysisMQL_162 = 0;
  _t_hits.fromBank(pevent, "HITS");
  
  for(int _u_MMuPC1AnalysisMQL_163 = 0; _u_MMuPC1AnalysisMQL_163 < _t_hits.size(); _u_MMuPC1AnalysisMQL_163++)
  {
    double time = _t_hits[_u_MMuPC1AnalysisMQL_163].time;
    int parameter = _t_hits[_u_MMuPC1AnalysisMQL_163].parameter;
    if((parameter >= 4001) && (parameter <= 4074))
    {
      {
        double time_0 = time;
        int parameter_0 = parameter;
        double time = time_0;
        int parameter = parameter_0;
        if((parameter >= 4001) && (parameter <= (4000+kMuPC1NumXWires)))
        {
          {
            double time_0 = time;
            int Xwire = parameter - 4000;
            double time = time_0;
            int _u_MMuPC1AnalysisMQL_164 = _t_muPC1X_raw.next();
            _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_164].time = time_0;
            _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_164].Xwire = Xwire;
          }
        }
        if((parameter >= 4051) && (parameter <= (4050+kMuPC1NumYWires)))
        {
          {
            double time_0 = time;
            int Ywire = parameter - 4050;
            double time = time_0;
            int _u_MMuPC1AnalysisMQL_165 = _t_muPC1Y_raw.next();
            _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_165].time = time_0;
            _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_165].Ywire = Ywire;
          }
        }
        if(Tier1)
        {
          _h_parameters_muPC1->Fill(parameter);
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_166 = 0; _u_MMuPC1AnalysisMQL_166 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_166++)
    {
      double time = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_166].time;
      int Xwire = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_166].Xwire;
      {
        
        double time_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_166].time;
        int Xwire_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_166].Xwire;
        
        if(!_u_MMuPC1AnalysisMQL_90)
        {
          if(!_t_muPC1X_raw.checkSort(_u_MMuPC1AnalysisMQL_38))
          {
            printf("Warning: table muPC1X_raw is not sorted on time_2 as required for join with muPC1X_raw (_u_MMuPC1AnalysisMQL_38)\n");
          }
          _u_MMuPC1AnalysisMQL_90 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_91)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_89))
          {
            printf("Warning: table muPC1X_raw is not sorted on time_1 as required for join with muPC1X_raw\n");
            _u_MMuPC1AnalysisMQL_91 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_89 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_88 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_88++)
        {
          double time_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_88].time;
          int Xwire_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_88].Xwire;
          
          double _u_MMuPC1AnalysisMQL_167 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_167 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_169 = _u_MMuPC1AnalysisMQL_88; _u_MMuPC1AnalysisMQL_169 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_169++)
        {
          double time_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_169].time;
          int Xwire_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_169].Xwire;
          
          double _u_MMuPC1AnalysisMQL_167 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_167 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Xwire_1_0 = Xwire_1;
            double time_2_0 = time_2;
            int Xwire_2_0 = Xwire_2;
            double time_1 = time_1_0;
            int Xwire_1 = Xwire_1_0;
            double time_2 = time_2_0;
            int Xwire_2 = Xwire_2_0;
            if(Tier3)
            {
              _h_muPC1_X_raw_autosingles_2D->Fill(Xwire_1, Xwire_2);
            }
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_X_raw_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Xwire_1==Xwire_2))
              {
                _h_muPC1_X_raw_autocorr_2D->Fill(time_2 - time_1, Xwire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_170[_t_muPC1X_raw.size()];
  memset(_u_MMuPC1AnalysisMQL_170, 0, sizeof(_u_MMuPC1AnalysisMQL_170));
  if(!_t_muPC1X_raw.checkSort(_u_MMuPC1AnalysisMQL_39))
  {
    printf("Warning: table muPC1X_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_171 = 0; _u_MMuPC1AnalysisMQL_171 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_171++)
  {
    double time = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].time;
    int Xwire = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].Xwire;
    if(_u_MMuPC1AnalysisMQL_170[_u_MMuPC1AnalysisMQL_171])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_170[_u_MMuPC1AnalysisMQL_171] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1X_raw.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_171;
    
    for(int _u_MMuPC1AnalysisMQL_172 = _u_MMuPC1AnalysisMQL_171 + 1; _u_MMuPC1AnalysisMQL_172 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_172++)
    {
      if(_u_MMuPC1AnalysisMQL_170[_u_MMuPC1AnalysisMQL_172])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_173 = 0; _u_MMuPC1AnalysisMQL_173 < cluster_size; _u_MMuPC1AnalysisMQL_173++)
      {
        int _u_MMuPC1AnalysisMQL_174 = cluster_members[_u_MMuPC1AnalysisMQL_173];
        double time_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_174].time;
        double time_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_172].time;
        int Xwire_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_174].Xwire;
        int Xwire_2 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_172].Xwire;
        
        double _u_MMuPC1AnalysisMQL_175 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_175 < -1000)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_172;
        _u_MMuPC1AnalysisMQL_170[_u_MMuPC1AnalysisMQL_172] = true;
        _u_MMuPC1AnalysisMQL_172 = _u_MMuPC1AnalysisMQL_171;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].time;
    double time_max = time_min;
    double time_sum = 0;
    int Xwire_min = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].Xwire;
    int Xwire_max = Xwire_min;
    int Xwire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_173 = 0; _u_MMuPC1AnalysisMQL_173 < cluster_size; _u_MMuPC1AnalysisMQL_173++)
    {
      int _u_MMuPC1AnalysisMQL_174 = cluster_members[_u_MMuPC1AnalysisMQL_173];
      time = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_174].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Xwire = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_174].Xwire;
      Xwire_min = MIN(Xwire_min, Xwire);
      Xwire_max = MAX(Xwire_max, Xwire);
      Xwire_sum = Xwire_sum + Xwire;
    }
    double time_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Xwire_1 = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_171].Xwire;
    double Xwire_avg = Xwire_sum/((double)cluster_size);
    int Xwire_width = Xwire_max - Xwire_min + 1;
    {
      double time = time_min;
      int cluster_size_0 = cluster_size;
      int cluster_size = cluster_size_0;
      if((cluster_size >= kMuPC1XSparkSizeCutoff))
      {
        {
          double time_0 = time;
          double time = time_0;
          if(Tier1)
          {
            _h_muPC1_spark_count_Xwires->Fill(1);
          }
          int _u_MMuPC1AnalysisMQL_176 = _t_muPC1X_sparks.next();
          _t_muPC1X_sparks[_u_MMuPC1AnalysisMQL_176].time = time_0;
        }
      }
      if(Tier1)
      {
        _h_muPC1_spark_search_Xwires->Fill(cluster_size);
      }
    }
  }
  _t_muPC1X_spark_search.sort(_u_MMuPC1AnalysisMQL_40);
  for(int _u_MMuPC1AnalysisMQL_177 = 0; _u_MMuPC1AnalysisMQL_177 < _t_muPC1X_raw.size(); _u_MMuPC1AnalysisMQL_177++)
  {
    double time = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_177].time;
    int Xwire = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_177].Xwire;
    {
      
      double muPC1X_raw_time = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_177].time;
      int Xwire = _t_muPC1X_raw[_u_MMuPC1AnalysisMQL_177].Xwire;
      
      if(!_u_MMuPC1AnalysisMQL_95)
      {
        if(!_t_muPC1X_sparks.checkSort(_u_MMuPC1AnalysisMQL_42))
        {
          printf("Warning: table muPC1X_sparks is not sorted on muPC1X_sparks_time as required for join with muPC1X_raw (_u_MMuPC1AnalysisMQL_42)\n");
        }
        _u_MMuPC1AnalysisMQL_95 = true;
      }
      else if(!_u_MMuPC1AnalysisMQL_96)
      {
        if(!(muPC1X_raw_time >= _u_MMuPC1AnalysisMQL_94))
        {
          printf("Warning: table muPC1X_raw is not sorted on muPC1X_raw_time as required for join with muPC1X_sparks\n");
          _u_MMuPC1AnalysisMQL_96 = true;
        }
      }
      _u_MMuPC1AnalysisMQL_94 = muPC1X_raw_time;
      for( ; _u_MMuPC1AnalysisMQL_93 < _t_muPC1X_sparks.size(); _u_MMuPC1AnalysisMQL_93++)
      {
        double muPC1X_sparks_time = _t_muPC1X_sparks[_u_MMuPC1AnalysisMQL_93].time;
        
        double _u_MMuPC1AnalysisMQL_178 = muPC1X_raw_time - muPC1X_sparks_time;
        if(_u_MMuPC1AnalysisMQL_178 < kSparkCutDeadtime)
        {
          break;
        }
      }
      _u_MMuPC1AnalysisMQL_97 = 0;
      for(int _u_MMuPC1AnalysisMQL_180 = _u_MMuPC1AnalysisMQL_93; _u_MMuPC1AnalysisMQL_180 < _t_muPC1X_sparks.size(); _u_MMuPC1AnalysisMQL_180++)
      {
        double muPC1X_sparks_time = _t_muPC1X_sparks[_u_MMuPC1AnalysisMQL_180].time;
        
        double _u_MMuPC1AnalysisMQL_178 = muPC1X_raw_time - muPC1X_sparks_time;
        if(_u_MMuPC1AnalysisMQL_178 < -100)
        {
          break;
        }
        _u_MMuPC1AnalysisMQL_97++;
      }
      
      if(_u_MMuPC1AnalysisMQL_97 == 0)
      {
        {
          double time = muPC1X_raw_time;
          int Xwire_0 = Xwire;
          int Xwire = Xwire_0;
          int _u_MMuPC1AnalysisMQL_181 = _t_muPC1X_SC.next();
          _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_181].time = time;
          _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_181].Xwire = Xwire_0;
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_182 = 0; _u_MMuPC1AnalysisMQL_182 < _t_muPC1X_SC.size(); _u_MMuPC1AnalysisMQL_182++)
    {
      double time = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_182].time;
      int Xwire = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_182].Xwire;
      {
        
        double time_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_182].time;
        int Xwire_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_182].Xwire;
        
        if(!_u_MMuPC1AnalysisMQL_100)
        {
          if(!_t_muPC1X_SC.checkSort(_u_MMuPC1AnalysisMQL_44))
          {
            printf("Warning: table muPC1X_SC is not sorted on time_2 as required for join with muPC1X_SC (_u_MMuPC1AnalysisMQL_44)\n");
          }
          _u_MMuPC1AnalysisMQL_100 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_101)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_99))
          {
            printf("Warning: table muPC1X_SC is not sorted on time_1 as required for join with muPC1X_SC\n");
            _u_MMuPC1AnalysisMQL_101 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_99 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_98 < _t_muPC1X_SC.size(); _u_MMuPC1AnalysisMQL_98++)
        {
          double time_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_98].time;
          int Xwire_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_98].Xwire;
          
          double _u_MMuPC1AnalysisMQL_183 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_183 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_185 = _u_MMuPC1AnalysisMQL_98; _u_MMuPC1AnalysisMQL_185 < _t_muPC1X_SC.size(); _u_MMuPC1AnalysisMQL_185++)
        {
          double time_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_185].time;
          int Xwire_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_185].Xwire;
          
          double _u_MMuPC1AnalysisMQL_183 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_183 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Xwire_1_0 = Xwire_1;
            double time_2_0 = time_2;
            int Xwire_2_0 = Xwire_2;
            double time_1 = time_1_0;
            int Xwire_1 = Xwire_1_0;
            double time_2 = time_2_0;
            int Xwire_2 = Xwire_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_X_SC_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Xwire_1==Xwire_2))
              {
                _h_muPC1_X_SC_autocorr_2D->Fill(time_2 - time_1, Xwire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_186[_t_muPC1X_SC.size()];
  memset(_u_MMuPC1AnalysisMQL_186, 0, sizeof(_u_MMuPC1AnalysisMQL_186));
  if(!_t_muPC1X_SC.checkSort(_u_MMuPC1AnalysisMQL_45))
  {
    printf("Warning: table muPC1X_SC is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_187 = 0; _u_MMuPC1AnalysisMQL_187 < _t_muPC1X_SC.size(); _u_MMuPC1AnalysisMQL_187++)
  {
    double time = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].time;
    int Xwire = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].Xwire;
    if(_u_MMuPC1AnalysisMQL_186[_u_MMuPC1AnalysisMQL_187])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_186[_u_MMuPC1AnalysisMQL_187] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1X_SC.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_187;
    
    for(int _u_MMuPC1AnalysisMQL_188 = _u_MMuPC1AnalysisMQL_187 + 1; _u_MMuPC1AnalysisMQL_188 < _t_muPC1X_SC.size(); _u_MMuPC1AnalysisMQL_188++)
    {
      if(_u_MMuPC1AnalysisMQL_186[_u_MMuPC1AnalysisMQL_188])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_189 = 0; _u_MMuPC1AnalysisMQL_189 < cluster_size; _u_MMuPC1AnalysisMQL_189++)
      {
        if(_u_MMuPC1AnalysisMQL_189 > 0) break;
        int _u_MMuPC1AnalysisMQL_190 = cluster_members[_u_MMuPC1AnalysisMQL_189];
        double time_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_190].time;
        double time_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_188].time;
        int Xwire_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_190].Xwire;
        int Xwire_2 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_188].Xwire;
        
        double _u_MMuPC1AnalysisMQL_191 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_191 < -kMuPC1XClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!(Xwire_1 == Xwire_2))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_188;
        _u_MMuPC1AnalysisMQL_186[_u_MMuPC1AnalysisMQL_188] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].time;
    double time_max = time_min;
    double time_sum = 0;
    int Xwire_min = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].Xwire;
    int Xwire_max = Xwire_min;
    int Xwire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_189 = 0; _u_MMuPC1AnalysisMQL_189 < cluster_size; _u_MMuPC1AnalysisMQL_189++)
    {
      int _u_MMuPC1AnalysisMQL_190 = cluster_members[_u_MMuPC1AnalysisMQL_189];
      time = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_190].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Xwire = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_190].Xwire;
      Xwire_min = MIN(Xwire_min, Xwire);
      Xwire_max = MAX(Xwire_max, Xwire);
      Xwire_sum = Xwire_sum + Xwire;
    }
    double time_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Xwire_1 = _t_muPC1X_SC[_u_MMuPC1AnalysisMQL_187].Xwire;
    double Xwire_avg = Xwire_sum/((double)cluster_size);
    int Xwire_width = Xwire_max - Xwire_min + 1;
    {
      double time = time_min;
      int Xwire = Xwire_1;
      int _u_MMuPC1AnalysisMQL_192 = _t_muPC1X_AD.next();
      _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_192].time = time;
      _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_192].Xwire = Xwire;
    }
  }
  _t_muPC1X_AD.sort(_u_MMuPC1AnalysisMQL_46);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_193 = 0; _u_MMuPC1AnalysisMQL_193 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_193++)
    {
      double time = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_193].time;
      int Xwire = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_193].Xwire;
      {
        
        double time_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_193].time;
        int Xwire_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_193].Xwire;
        
        if(!_u_MMuPC1AnalysisMQL_105)
        {
          if(!_t_muPC1X_AD.checkSort(_u_MMuPC1AnalysisMQL_48))
          {
            printf("Warning: table muPC1X_AD is not sorted on time_2 as required for join with muPC1X_AD (_u_MMuPC1AnalysisMQL_48)\n");
          }
          _u_MMuPC1AnalysisMQL_105 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_106)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_104))
          {
            printf("Warning: table muPC1X_AD is not sorted on time_1 as required for join with muPC1X_AD\n");
            _u_MMuPC1AnalysisMQL_106 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_104 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_103 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_103++)
        {
          double time_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_103].time;
          int Xwire_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_103].Xwire;
          
          double _u_MMuPC1AnalysisMQL_194 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_194 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_196 = _u_MMuPC1AnalysisMQL_103; _u_MMuPC1AnalysisMQL_196 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_196++)
        {
          double time_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_196].time;
          int Xwire_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_196].Xwire;
          
          double _u_MMuPC1AnalysisMQL_194 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_194 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Xwire_1_0 = Xwire_1;
            double time_2_0 = time_2;
            int Xwire_2_0 = Xwire_2;
            double time_1 = time_1_0;
            int Xwire_1 = Xwire_1_0;
            double time_2 = time_2_0;
            int Xwire_2 = Xwire_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_X_AD_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Xwire_1==Xwire_2))
              {
                _h_muPC1_X_AD_autocorr_2D->Fill(time_2 - time_1, Xwire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_197[_t_muPC1X_AD.size()];
  memset(_u_MMuPC1AnalysisMQL_197, 0, sizeof(_u_MMuPC1AnalysisMQL_197));
  if(!_t_muPC1X_AD.checkSort(_u_MMuPC1AnalysisMQL_49))
  {
    printf("Warning: table muPC1X_AD is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_198 = 0; _u_MMuPC1AnalysisMQL_198 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_198++)
  {
    double time = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].time;
    int Xwire = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].Xwire;
    if(_u_MMuPC1AnalysisMQL_197[_u_MMuPC1AnalysisMQL_198])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_197[_u_MMuPC1AnalysisMQL_198] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1X_AD.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_198;
    
    for(int _u_MMuPC1AnalysisMQL_199 = _u_MMuPC1AnalysisMQL_198 + 1; _u_MMuPC1AnalysisMQL_199 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_199++)
    {
      if(_u_MMuPC1AnalysisMQL_197[_u_MMuPC1AnalysisMQL_199])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_200 = 0; _u_MMuPC1AnalysisMQL_200 < cluster_size; _u_MMuPC1AnalysisMQL_200++)
      {
        int _u_MMuPC1AnalysisMQL_201 = cluster_members[_u_MMuPC1AnalysisMQL_200];
        double time_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_201].time;
        double time_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_199].time;
        int Xwire_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_201].Xwire;
        int Xwire_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_199].Xwire;
        
        double _u_MMuPC1AnalysisMQL_202 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_202 < -kMuPC1XClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!(((abs(Xwire_1-Xwire_2)-1) == 0)))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_199;
        _u_MMuPC1AnalysisMQL_197[_u_MMuPC1AnalysisMQL_199] = true;
        _u_MMuPC1AnalysisMQL_199 = _u_MMuPC1AnalysisMQL_198;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].time;
    double time_max = time_min;
    double time_sum = 0;
    int Xwire_min = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].Xwire;
    int Xwire_max = Xwire_min;
    int Xwire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_200 = 0; _u_MMuPC1AnalysisMQL_200 < cluster_size; _u_MMuPC1AnalysisMQL_200++)
    {
      int _u_MMuPC1AnalysisMQL_201 = cluster_members[_u_MMuPC1AnalysisMQL_200];
      time = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_201].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Xwire = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_201].Xwire;
      Xwire_min = MIN(Xwire_min, Xwire);
      Xwire_max = MAX(Xwire_max, Xwire);
      Xwire_sum = Xwire_sum + Xwire;
    }
    double time_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Xwire_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_198].Xwire;
    double Xwire_avg = Xwire_sum/((double)cluster_size);
    int Xwire_width = Xwire_max - Xwire_min + 1;
    {
      double time = time_min;
      int Xwire_min_0 = Xwire_min;
      int Xwire_max_0 = Xwire_max;
      int Xwire_min = Xwire_min_0;
      int Xwire_max = Xwire_max_0;
      int _u_MMuPC1AnalysisMQL_203 = _t_muPC1X_cluster_contiguous.next();
      _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_203].time = time;
      _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_203].Xwire_min = Xwire_min_0;
      _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_203].Xwire_max = Xwire_max_0;
    }
  }
  _t_muPC1X_cluster_contiguous.sort(_u_MMuPC1AnalysisMQL_50);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_204 = 0; _u_MMuPC1AnalysisMQL_204 < _t_muPC1X_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_204++)
    {
      double time = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].time;
      int Xwire_min = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].Xwire_min;
      int Xwire_max = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].Xwire_max;
      {
        
        double time_1 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].time;
        int Xwire_min_1 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].Xwire_min;
        int Xwire_max_1 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_204].Xwire_max;
        
        if(!_u_MMuPC1AnalysisMQL_110)
        {
          if(!_t_muPC1X_cluster_contiguous.checkSort(_u_MMuPC1AnalysisMQL_52))
          {
            printf("Warning: table muPC1X_cluster_contiguous is not sorted on time_2 as required for join with muPC1X_cluster_contiguous (_u_MMuPC1AnalysisMQL_52)\n");
          }
          _u_MMuPC1AnalysisMQL_110 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_111)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_109))
          {
            printf("Warning: table muPC1X_cluster_contiguous is not sorted on time_1 as required for join with muPC1X_cluster_contiguous\n");
            _u_MMuPC1AnalysisMQL_111 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_109 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_108 < _t_muPC1X_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_108++)
        {
          double time_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_108].time;
          int Xwire_min_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_108].Xwire_min;
          int Xwire_max_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_108].Xwire_max;
          
          double _u_MMuPC1AnalysisMQL_205 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_205 < 5)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_207 = _u_MMuPC1AnalysisMQL_108; _u_MMuPC1AnalysisMQL_207 < _t_muPC1X_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_207++)
        {
          double time_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_207].time;
          int Xwire_min_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_207].Xwire_min;
          int Xwire_max_2 = _t_muPC1X_cluster_contiguous[_u_MMuPC1AnalysisMQL_207].Xwire_max;
          
          double _u_MMuPC1AnalysisMQL_205 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_205 < -kMuPC1XClusterInterval)
          {
            break;
          }
          if(!((time_1==time_2) && (Xwire_min_1==Xwire_min_2) && (Xwire_max_1==Xwire_max_2)) &&
	  ((Xwire_min_1 > Xwire_max_2) || (Xwire_min_2 > Xwire_max_1)))
          {
            {
              int cluster_sep = MIN(abs(Xwire_min_1-Xwire_max_2),abs(Xwire_min_2-Xwire_max_1));
              if(Tier3)
              {
                _h_muPC1_X_cluster_contiguous_separation->Fill(cluster_sep);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_208[_t_muPC1X_AD.size()];
  memset(_u_MMuPC1AnalysisMQL_208, 0, sizeof(_u_MMuPC1AnalysisMQL_208));
  if(!_t_muPC1X_AD.checkSort(_u_MMuPC1AnalysisMQL_53))
  {
    printf("Warning: table muPC1X_AD is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_209 = 0; _u_MMuPC1AnalysisMQL_209 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_209++)
  {
    double time = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].time;
    int Xwire = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].Xwire;
    if(_u_MMuPC1AnalysisMQL_208[_u_MMuPC1AnalysisMQL_209])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_208[_u_MMuPC1AnalysisMQL_209] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1X_AD.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_209;
    
    for(int _u_MMuPC1AnalysisMQL_210 = _u_MMuPC1AnalysisMQL_209 + 1; _u_MMuPC1AnalysisMQL_210 < _t_muPC1X_AD.size(); _u_MMuPC1AnalysisMQL_210++)
    {
      if(_u_MMuPC1AnalysisMQL_208[_u_MMuPC1AnalysisMQL_210])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_211 = 0; _u_MMuPC1AnalysisMQL_211 < cluster_size; _u_MMuPC1AnalysisMQL_211++)
      {
        int _u_MMuPC1AnalysisMQL_212 = cluster_members[_u_MMuPC1AnalysisMQL_211];
        double time_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_212].time;
        double time_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_210].time;
        int Xwire_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_212].Xwire;
        int Xwire_2 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_210].Xwire;
        
        double _u_MMuPC1AnalysisMQL_213 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_213 < -kMuPC1XClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!((abs(Xwire_1-Xwire_2)-1) <= kMuPC1XClusterMaxGap))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_210;
        _u_MMuPC1AnalysisMQL_208[_u_MMuPC1AnalysisMQL_210] = true;
        _u_MMuPC1AnalysisMQL_210 = _u_MMuPC1AnalysisMQL_209;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].time;
    double time_max = time_min;
    double time_sum = 0;
    int Xwire_min = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].Xwire;
    int Xwire_max = Xwire_min;
    int Xwire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_211 = 0; _u_MMuPC1AnalysisMQL_211 < cluster_size; _u_MMuPC1AnalysisMQL_211++)
    {
      int _u_MMuPC1AnalysisMQL_212 = cluster_members[_u_MMuPC1AnalysisMQL_211];
      time = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_212].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Xwire = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_212].Xwire;
      Xwire_min = MIN(Xwire_min, Xwire);
      Xwire_max = MAX(Xwire_max, Xwire);
      Xwire_sum = Xwire_sum + Xwire;
    }
    double time_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Xwire_1 = _t_muPC1X_AD[_u_MMuPC1AnalysisMQL_209].Xwire;
    double Xwire_avg = Xwire_sum/((double)cluster_size);
    int Xwire_width = Xwire_max - Xwire_min + 1;
    {
      double time = time_min;
      double Xwire = Xwire_avg;
      int cluster_size_0 = cluster_size;
      int cluster_width = Xwire_width;
      int cluster_size = cluster_size_0;
      if(Tier1)
      {
        _h_muPC1_X_final_cluster_size->Fill(cluster_size);
      }
      if(Tier1)
      {
        _h_muPC1_X_final_cluster_width->Fill(cluster_width);
      }
      if(Tier1)
      {
        _h_muPC1_X_final_cluster_avg->Fill(Xwire);
      }
      {
        double Xwire_0 = Xwire;
        double muPC1Time = time;
        double Xwire = Xwire_0;
        int _u_MMuPC1AnalysisMQL_214 = _t_muPC1X_export.next();
        _t_muPC1X_export[_u_MMuPC1AnalysisMQL_214].Xwire = Xwire_0;
        _t_muPC1X_export[_u_MMuPC1AnalysisMQL_214].muPC1Time = muPC1Time;
      }
      int _u_MMuPC1AnalysisMQL_215 = _t_muPC1X.next();
      _t_muPC1X[_u_MMuPC1AnalysisMQL_215].time = time;
      _t_muPC1X[_u_MMuPC1AnalysisMQL_215].Xwire = Xwire;
      _t_muPC1X[_u_MMuPC1AnalysisMQL_215].cluster_size = cluster_size_0;
      _t_muPC1X[_u_MMuPC1AnalysisMQL_215].cluster_width = cluster_width;
    }
  }
  _t_muPC1X.sort(_u_MMuPC1AnalysisMQL_54);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_216 = 0; _u_MMuPC1AnalysisMQL_216 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_216++)
    {
      double time = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].time;
      double Xwire = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].Xwire;
      int cluster_size = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].cluster_size;
      int cluster_width = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].cluster_width;
      {
        
        double time_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].time;
        double Xwire_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].Xwire;
        int cluster_size_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].cluster_size;
        int cluster_width_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_216].cluster_width;
        
        if(!_u_MMuPC1AnalysisMQL_115)
        {
          if(!_t_muPC1X.checkSort(_u_MMuPC1AnalysisMQL_56))
          {
            printf("Warning: table muPC1X is not sorted on time_2 as required for join with muPC1X (_u_MMuPC1AnalysisMQL_56)\n");
          }
          _u_MMuPC1AnalysisMQL_115 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_116)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_114))
          {
            printf("Warning: table muPC1X is not sorted on time_1 as required for join with muPC1X\n");
            _u_MMuPC1AnalysisMQL_116 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_114 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_113 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_113++)
        {
          double time_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_113].time;
          double Xwire_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_113].Xwire;
          int cluster_size_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_113].cluster_size;
          int cluster_width_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_113].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_217 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_217 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_219 = _u_MMuPC1AnalysisMQL_113; _u_MMuPC1AnalysisMQL_219 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_219++)
        {
          double time_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_219].time;
          double Xwire_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_219].Xwire;
          int cluster_size_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_219].cluster_size;
          int cluster_width_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_219].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_217 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_217 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_X_final_cluster_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_220 = 0; _u_MMuPC1AnalysisMQL_220 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_220++)
    {
      double time = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].time;
      double Xwire = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].Xwire;
      int cluster_size = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].cluster_size;
      int cluster_width = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].cluster_width;
      {
        
        double time_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].time;
        double Xwire_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].Xwire;
        int cluster_size_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].cluster_size;
        int cluster_width_1 = _t_muPC1X[_u_MMuPC1AnalysisMQL_220].cluster_width;
        
        if(!_u_MMuPC1AnalysisMQL_119)
        {
          if(!_t_muPC1X.checkSort(_u_MMuPC1AnalysisMQL_58))
          {
            printf("Warning: table muPC1X is not sorted on time_2 as required for join with muPC1X (_u_MMuPC1AnalysisMQL_58)\n");
          }
          _u_MMuPC1AnalysisMQL_119 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_120)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_118))
          {
            printf("Warning: table muPC1X is not sorted on time_1 as required for join with muPC1X\n");
            _u_MMuPC1AnalysisMQL_120 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_118 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_117 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_117++)
        {
          double time_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_117].time;
          double Xwire_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_117].Xwire;
          int cluster_size_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_117].cluster_size;
          int cluster_width_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_117].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_221 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_221 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_223 = _u_MMuPC1AnalysisMQL_117; _u_MMuPC1AnalysisMQL_223 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_223++)
        {
          double time_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_223].time;
          double Xwire_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_223].Xwire;
          int cluster_size_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_223].cluster_size;
          int cluster_width_2 = _t_muPC1X[_u_MMuPC1AnalysisMQL_223].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_221 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_221 < -150)
          {
            break;
          }
          {
            double time1 = time_1;
            double time2 = time_2;
            double wire_diff = fabs(Xwire_1-Xwire_2);
            if(Tier3)
            {
              if(fabs(time_2-time_1)>=0)
              {
                _h_muPC1_X_final_cluster_autocorr_spatial_all_1D->Fill(wire_diff);
              }
            }
          }
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_224 = 0; _u_MMuPC1AnalysisMQL_224 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_224++)
    {
      double time = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_224].time;
      int Ywire = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_224].Ywire;
      {
        
        double time_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_224].time;
        int Ywire_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_224].Ywire;
        
        if(!_u_MMuPC1AnalysisMQL_123)
        {
          if(!_t_muPC1Y_raw.checkSort(_u_MMuPC1AnalysisMQL_60))
          {
            printf("Warning: table muPC1Y_raw is not sorted on time_2 as required for join with muPC1Y_raw (_u_MMuPC1AnalysisMQL_60)\n");
          }
          _u_MMuPC1AnalysisMQL_123 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_124)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_122))
          {
            printf("Warning: table muPC1Y_raw is not sorted on time_1 as required for join with muPC1Y_raw\n");
            _u_MMuPC1AnalysisMQL_124 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_122 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_121 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_121++)
        {
          double time_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_121].time;
          int Ywire_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_121].Ywire;
          
          double _u_MMuPC1AnalysisMQL_225 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_225 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_227 = _u_MMuPC1AnalysisMQL_121; _u_MMuPC1AnalysisMQL_227 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_227++)
        {
          double time_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_227].time;
          int Ywire_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_227].Ywire;
          
          double _u_MMuPC1AnalysisMQL_225 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_225 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Ywire_1_0 = Ywire_1;
            double time_2_0 = time_2;
            int Ywire_2_0 = Ywire_2;
            double time_1 = time_1_0;
            int Ywire_1 = Ywire_1_0;
            double time_2 = time_2_0;
            int Ywire_2 = Ywire_2_0;
            if(Tier3)
            {
              _h_muPC1_Y_raw_autosingles_2D->Fill(Ywire_1, Ywire_2);
            }
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_Y_raw_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Ywire_1==Ywire_2))
              {
                _h_muPC1_Y_raw_autocorr_2D->Fill(time_2 - time_1, Ywire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_228[_t_muPC1Y_raw.size()];
  memset(_u_MMuPC1AnalysisMQL_228, 0, sizeof(_u_MMuPC1AnalysisMQL_228));
  if(!_t_muPC1Y_raw.checkSort(_u_MMuPC1AnalysisMQL_61))
  {
    printf("Warning: table muPC1Y_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_229 = 0; _u_MMuPC1AnalysisMQL_229 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_229++)
  {
    double time = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].time;
    int Ywire = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].Ywire;
    if(_u_MMuPC1AnalysisMQL_228[_u_MMuPC1AnalysisMQL_229])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_228[_u_MMuPC1AnalysisMQL_229] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1Y_raw.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_229;
    
    for(int _u_MMuPC1AnalysisMQL_230 = _u_MMuPC1AnalysisMQL_229 + 1; _u_MMuPC1AnalysisMQL_230 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_230++)
    {
      if(_u_MMuPC1AnalysisMQL_228[_u_MMuPC1AnalysisMQL_230])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_231 = 0; _u_MMuPC1AnalysisMQL_231 < cluster_size; _u_MMuPC1AnalysisMQL_231++)
      {
        int _u_MMuPC1AnalysisMQL_232 = cluster_members[_u_MMuPC1AnalysisMQL_231];
        double time_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_232].time;
        double time_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_230].time;
        int Ywire_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_232].Ywire;
        int Ywire_2 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_230].Ywire;
        
        double _u_MMuPC1AnalysisMQL_233 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_233 < -1000)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_230;
        _u_MMuPC1AnalysisMQL_228[_u_MMuPC1AnalysisMQL_230] = true;
        _u_MMuPC1AnalysisMQL_230 = _u_MMuPC1AnalysisMQL_229;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].time;
    double time_max = time_min;
    double time_sum = 0;
    int Ywire_min = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].Ywire;
    int Ywire_max = Ywire_min;
    int Ywire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_231 = 0; _u_MMuPC1AnalysisMQL_231 < cluster_size; _u_MMuPC1AnalysisMQL_231++)
    {
      int _u_MMuPC1AnalysisMQL_232 = cluster_members[_u_MMuPC1AnalysisMQL_231];
      time = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_232].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Ywire = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_232].Ywire;
      Ywire_min = MIN(Ywire_min, Ywire);
      Ywire_max = MAX(Ywire_max, Ywire);
      Ywire_sum = Ywire_sum + Ywire;
    }
    double time_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Ywire_1 = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_229].Ywire;
    double Ywire_avg = Ywire_sum/((double)cluster_size);
    int Ywire_width = Ywire_max - Ywire_min + 1;
    {
      double time = time_min;
      int cluster_size_0 = cluster_size;
      int cluster_size = cluster_size_0;
      if((cluster_size >= kMuPC1YSparkSizeCutoff))
      {
        {
          double time_0 = time;
          double time = time_0;
          if(Tier1)
          {
            _h_muPC1_spark_count_Ywires->Fill(1);
          }
          int _u_MMuPC1AnalysisMQL_234 = _t_muPC1Y_sparks.next();
          _t_muPC1Y_sparks[_u_MMuPC1AnalysisMQL_234].time = time_0;
        }
      }
      if(Tier1)
      {
        _h_muPC1_spark_search_Ywires->Fill(cluster_size);
      }
    }
  }
  _t_muPC1Y_spark_search.sort(_u_MMuPC1AnalysisMQL_62);
  for(int _u_MMuPC1AnalysisMQL_235 = 0; _u_MMuPC1AnalysisMQL_235 < _t_muPC1Y_raw.size(); _u_MMuPC1AnalysisMQL_235++)
  {
    double time = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_235].time;
    int Ywire = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_235].Ywire;
    {
      
      double muPC1Y_raw_time = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_235].time;
      int Ywire = _t_muPC1Y_raw[_u_MMuPC1AnalysisMQL_235].Ywire;
      
      if(!_u_MMuPC1AnalysisMQL_128)
      {
        if(!_t_muPC1Y_sparks.checkSort(_u_MMuPC1AnalysisMQL_64))
        {
          printf("Warning: table muPC1Y_sparks is not sorted on muPC1Y_sparks_time as required for join with muPC1Y_raw (_u_MMuPC1AnalysisMQL_64)\n");
        }
        _u_MMuPC1AnalysisMQL_128 = true;
      }
      else if(!_u_MMuPC1AnalysisMQL_129)
      {
        if(!(muPC1Y_raw_time >= _u_MMuPC1AnalysisMQL_127))
        {
          printf("Warning: table muPC1Y_raw is not sorted on muPC1Y_raw_time as required for join with muPC1Y_sparks\n");
          _u_MMuPC1AnalysisMQL_129 = true;
        }
      }
      _u_MMuPC1AnalysisMQL_127 = muPC1Y_raw_time;
      for( ; _u_MMuPC1AnalysisMQL_126 < _t_muPC1Y_sparks.size(); _u_MMuPC1AnalysisMQL_126++)
      {
        double muPC1Y_sparks_time = _t_muPC1Y_sparks[_u_MMuPC1AnalysisMQL_126].time;
        
        double _u_MMuPC1AnalysisMQL_236 = muPC1Y_raw_time - muPC1Y_sparks_time;
        if(_u_MMuPC1AnalysisMQL_236 < kSparkCutDeadtime)
        {
          break;
        }
      }
      _u_MMuPC1AnalysisMQL_130 = 0;
      for(int _u_MMuPC1AnalysisMQL_238 = _u_MMuPC1AnalysisMQL_126; _u_MMuPC1AnalysisMQL_238 < _t_muPC1Y_sparks.size(); _u_MMuPC1AnalysisMQL_238++)
      {
        double muPC1Y_sparks_time = _t_muPC1Y_sparks[_u_MMuPC1AnalysisMQL_238].time;
        
        double _u_MMuPC1AnalysisMQL_236 = muPC1Y_raw_time - muPC1Y_sparks_time;
        if(_u_MMuPC1AnalysisMQL_236 < -100)
        {
          break;
        }
        _u_MMuPC1AnalysisMQL_130++;
      }
      
      if(_u_MMuPC1AnalysisMQL_130 == 0)
      {
        {
          double time = muPC1Y_raw_time;
          int Ywire_0 = Ywire;
          int Ywire = Ywire_0;
          int _u_MMuPC1AnalysisMQL_239 = _t_muPC1Y_SC.next();
          _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_239].time = time;
          _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_239].Ywire = Ywire_0;
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_240 = 0; _u_MMuPC1AnalysisMQL_240 < _t_muPC1Y_SC.size(); _u_MMuPC1AnalysisMQL_240++)
    {
      double time = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_240].time;
      int Ywire = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_240].Ywire;
      {
        
        double time_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_240].time;
        int Ywire_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_240].Ywire;
        
        if(!_u_MMuPC1AnalysisMQL_133)
        {
          if(!_t_muPC1Y_SC.checkSort(_u_MMuPC1AnalysisMQL_66))
          {
            printf("Warning: table muPC1Y_SC is not sorted on time_2 as required for join with muPC1Y_SC (_u_MMuPC1AnalysisMQL_66)\n");
          }
          _u_MMuPC1AnalysisMQL_133 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_134)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_132))
          {
            printf("Warning: table muPC1Y_SC is not sorted on time_1 as required for join with muPC1Y_SC\n");
            _u_MMuPC1AnalysisMQL_134 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_132 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_131 < _t_muPC1Y_SC.size(); _u_MMuPC1AnalysisMQL_131++)
        {
          double time_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_131].time;
          int Ywire_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_131].Ywire;
          
          double _u_MMuPC1AnalysisMQL_241 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_241 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_243 = _u_MMuPC1AnalysisMQL_131; _u_MMuPC1AnalysisMQL_243 < _t_muPC1Y_SC.size(); _u_MMuPC1AnalysisMQL_243++)
        {
          double time_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_243].time;
          int Ywire_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_243].Ywire;
          
          double _u_MMuPC1AnalysisMQL_241 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_241 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Ywire_1_0 = Ywire_1;
            double time_2_0 = time_2;
            int Ywire_2_0 = Ywire_2;
            double time_1 = time_1_0;
            int Ywire_1 = Ywire_1_0;
            double time_2 = time_2_0;
            int Ywire_2 = Ywire_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_Y_SC_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Ywire_1==Ywire_2))
              {
                _h_muPC1_Y_SC_autocorr_2D->Fill(time_2 - time_1, Ywire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_244[_t_muPC1Y_SC.size()];
  memset(_u_MMuPC1AnalysisMQL_244, 0, sizeof(_u_MMuPC1AnalysisMQL_244));
  if(!_t_muPC1Y_SC.checkSort(_u_MMuPC1AnalysisMQL_67))
  {
    printf("Warning: table muPC1Y_SC is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_245 = 0; _u_MMuPC1AnalysisMQL_245 < _t_muPC1Y_SC.size(); _u_MMuPC1AnalysisMQL_245++)
  {
    double time = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].time;
    int Ywire = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].Ywire;
    if(_u_MMuPC1AnalysisMQL_244[_u_MMuPC1AnalysisMQL_245])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_244[_u_MMuPC1AnalysisMQL_245] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1Y_SC.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_245;
    
    for(int _u_MMuPC1AnalysisMQL_246 = _u_MMuPC1AnalysisMQL_245 + 1; _u_MMuPC1AnalysisMQL_246 < _t_muPC1Y_SC.size(); _u_MMuPC1AnalysisMQL_246++)
    {
      if(_u_MMuPC1AnalysisMQL_244[_u_MMuPC1AnalysisMQL_246])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_247 = 0; _u_MMuPC1AnalysisMQL_247 < cluster_size; _u_MMuPC1AnalysisMQL_247++)
      {
        if(_u_MMuPC1AnalysisMQL_247 > 0) break;
        int _u_MMuPC1AnalysisMQL_248 = cluster_members[_u_MMuPC1AnalysisMQL_247];
        double time_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_248].time;
        double time_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_246].time;
        int Ywire_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_248].Ywire;
        int Ywire_2 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_246].Ywire;
        
        double _u_MMuPC1AnalysisMQL_249 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_249 < -kMuPC1YClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!(Ywire_1 == Ywire_2))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_246;
        _u_MMuPC1AnalysisMQL_244[_u_MMuPC1AnalysisMQL_246] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].time;
    double time_max = time_min;
    double time_sum = 0;
    int Ywire_min = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].Ywire;
    int Ywire_max = Ywire_min;
    int Ywire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_247 = 0; _u_MMuPC1AnalysisMQL_247 < cluster_size; _u_MMuPC1AnalysisMQL_247++)
    {
      int _u_MMuPC1AnalysisMQL_248 = cluster_members[_u_MMuPC1AnalysisMQL_247];
      time = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_248].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Ywire = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_248].Ywire;
      Ywire_min = MIN(Ywire_min, Ywire);
      Ywire_max = MAX(Ywire_max, Ywire);
      Ywire_sum = Ywire_sum + Ywire;
    }
    double time_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Ywire_1 = _t_muPC1Y_SC[_u_MMuPC1AnalysisMQL_245].Ywire;
    double Ywire_avg = Ywire_sum/((double)cluster_size);
    int Ywire_width = Ywire_max - Ywire_min + 1;
    {
      double time = time_min;
      int Ywire = Ywire_1;
      int _u_MMuPC1AnalysisMQL_250 = _t_muPC1Y_AD.next();
      _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_250].time = time;
      _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_250].Ywire = Ywire;
    }
  }
  _t_muPC1Y_AD.sort(_u_MMuPC1AnalysisMQL_68);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_251 = 0; _u_MMuPC1AnalysisMQL_251 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_251++)
    {
      double time = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_251].time;
      int Ywire = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_251].Ywire;
      {
        
        double time_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_251].time;
        int Ywire_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_251].Ywire;
        
        if(!_u_MMuPC1AnalysisMQL_138)
        {
          if(!_t_muPC1Y_AD.checkSort(_u_MMuPC1AnalysisMQL_70))
          {
            printf("Warning: table muPC1Y_AD is not sorted on time_2 as required for join with muPC1Y_AD (_u_MMuPC1AnalysisMQL_70)\n");
          }
          _u_MMuPC1AnalysisMQL_138 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_139)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_137))
          {
            printf("Warning: table muPC1Y_AD is not sorted on time_1 as required for join with muPC1Y_AD\n");
            _u_MMuPC1AnalysisMQL_139 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_137 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_136 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_136++)
        {
          double time_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_136].time;
          int Ywire_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_136].Ywire;
          
          double _u_MMuPC1AnalysisMQL_252 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_252 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_254 = _u_MMuPC1AnalysisMQL_136; _u_MMuPC1AnalysisMQL_254 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_254++)
        {
          double time_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_254].time;
          int Ywire_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_254].Ywire;
          
          double _u_MMuPC1AnalysisMQL_252 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_252 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            int Ywire_1_0 = Ywire_1;
            double time_2_0 = time_2;
            int Ywire_2_0 = Ywire_2;
            double time_1 = time_1_0;
            int Ywire_1 = Ywire_1_0;
            double time_2 = time_2_0;
            int Ywire_2 = Ywire_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_Y_AD_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
            if(Tier3)
            {
              if(((time_2 - time_1) >= 0) && (Ywire_1==Ywire_2))
              {
                _h_muPC1_Y_AD_autocorr_2D->Fill(time_2 - time_1, Ywire_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_255[_t_muPC1Y_AD.size()];
  memset(_u_MMuPC1AnalysisMQL_255, 0, sizeof(_u_MMuPC1AnalysisMQL_255));
  if(!_t_muPC1Y_AD.checkSort(_u_MMuPC1AnalysisMQL_71))
  {
    printf("Warning: table muPC1Y_AD is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_256 = 0; _u_MMuPC1AnalysisMQL_256 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_256++)
  {
    double time = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].time;
    int Ywire = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].Ywire;
    if(_u_MMuPC1AnalysisMQL_255[_u_MMuPC1AnalysisMQL_256])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_255[_u_MMuPC1AnalysisMQL_256] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1Y_AD.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_256;
    
    for(int _u_MMuPC1AnalysisMQL_257 = _u_MMuPC1AnalysisMQL_256 + 1; _u_MMuPC1AnalysisMQL_257 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_257++)
    {
      if(_u_MMuPC1AnalysisMQL_255[_u_MMuPC1AnalysisMQL_257])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_258 = 0; _u_MMuPC1AnalysisMQL_258 < cluster_size; _u_MMuPC1AnalysisMQL_258++)
      {
        int _u_MMuPC1AnalysisMQL_259 = cluster_members[_u_MMuPC1AnalysisMQL_258];
        double time_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_259].time;
        double time_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_257].time;
        int Ywire_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_259].Ywire;
        int Ywire_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_257].Ywire;
        
        double _u_MMuPC1AnalysisMQL_260 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_260 < -kMuPC1YClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!(((abs(Ywire_1-Ywire_2)-1) == 0)))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_257;
        _u_MMuPC1AnalysisMQL_255[_u_MMuPC1AnalysisMQL_257] = true;
        _u_MMuPC1AnalysisMQL_257 = _u_MMuPC1AnalysisMQL_256;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].time;
    double time_max = time_min;
    double time_sum = 0;
    int Ywire_min = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].Ywire;
    int Ywire_max = Ywire_min;
    int Ywire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_258 = 0; _u_MMuPC1AnalysisMQL_258 < cluster_size; _u_MMuPC1AnalysisMQL_258++)
    {
      int _u_MMuPC1AnalysisMQL_259 = cluster_members[_u_MMuPC1AnalysisMQL_258];
      time = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_259].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Ywire = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_259].Ywire;
      Ywire_min = MIN(Ywire_min, Ywire);
      Ywire_max = MAX(Ywire_max, Ywire);
      Ywire_sum = Ywire_sum + Ywire;
    }
    double time_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Ywire_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_256].Ywire;
    double Ywire_avg = Ywire_sum/((double)cluster_size);
    int Ywire_width = Ywire_max - Ywire_min + 1;
    {
      double time = time_min;
      int Ywire_min_0 = Ywire_min;
      int Ywire_max_0 = Ywire_max;
      int Ywire_min = Ywire_min_0;
      int Ywire_max = Ywire_max_0;
      int _u_MMuPC1AnalysisMQL_261 = _t_muPC1Y_cluster_contiguous.next();
      _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_261].time = time;
      _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_261].Ywire_min = Ywire_min_0;
      _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_261].Ywire_max = Ywire_max_0;
    }
  }
  _t_muPC1Y_cluster_contiguous.sort(_u_MMuPC1AnalysisMQL_72);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_262 = 0; _u_MMuPC1AnalysisMQL_262 < _t_muPC1Y_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_262++)
    {
      double time = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].time;
      int Ywire_min = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].Ywire_min;
      int Ywire_max = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].Ywire_max;
      {
        
        double time_1 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].time;
        int Ywire_min_1 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].Ywire_min;
        int Ywire_max_1 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_262].Ywire_max;
        
        if(!_u_MMuPC1AnalysisMQL_143)
        {
          if(!_t_muPC1Y_cluster_contiguous.checkSort(_u_MMuPC1AnalysisMQL_74))
          {
            printf("Warning: table muPC1Y_cluster_contiguous is not sorted on time_2 as required for join with muPC1Y_cluster_contiguous (_u_MMuPC1AnalysisMQL_74)\n");
          }
          _u_MMuPC1AnalysisMQL_143 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_144)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_142))
          {
            printf("Warning: table muPC1Y_cluster_contiguous is not sorted on time_1 as required for join with muPC1Y_cluster_contiguous\n");
            _u_MMuPC1AnalysisMQL_144 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_142 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_141 < _t_muPC1Y_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_141++)
        {
          double time_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_141].time;
          int Ywire_min_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_141].Ywire_min;
          int Ywire_max_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_141].Ywire_max;
          
          double _u_MMuPC1AnalysisMQL_263 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_263 < 5)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_265 = _u_MMuPC1AnalysisMQL_141; _u_MMuPC1AnalysisMQL_265 < _t_muPC1Y_cluster_contiguous.size(); _u_MMuPC1AnalysisMQL_265++)
        {
          double time_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_265].time;
          int Ywire_min_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_265].Ywire_min;
          int Ywire_max_2 = _t_muPC1Y_cluster_contiguous[_u_MMuPC1AnalysisMQL_265].Ywire_max;
          
          double _u_MMuPC1AnalysisMQL_263 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_263 < -kMuPC1YClusterInterval)
          {
            break;
          }
          if(!((time_1==time_2) && (Ywire_min_1==Ywire_min_2) && (Ywire_max_1==Ywire_max_2)) &&
	  ((Ywire_min_1 > Ywire_max_2) || (Ywire_min_2 > Ywire_max_1)))
          {
            {
              int cluster_sep = MIN(abs(Ywire_min_1-Ywire_max_2),abs(Ywire_min_2-Ywire_max_1));
              if(Tier3)
              {
                _h_muPC1_Y_cluster_contiguous_separation->Fill(cluster_sep);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuPC1AnalysisMQL_266[_t_muPC1Y_AD.size()];
  memset(_u_MMuPC1AnalysisMQL_266, 0, sizeof(_u_MMuPC1AnalysisMQL_266));
  if(!_t_muPC1Y_AD.checkSort(_u_MMuPC1AnalysisMQL_75))
  {
    printf("Warning: table muPC1Y_AD is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_267 = 0; _u_MMuPC1AnalysisMQL_267 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_267++)
  {
    double time = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].time;
    int Ywire = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].Ywire;
    if(_u_MMuPC1AnalysisMQL_266[_u_MMuPC1AnalysisMQL_267])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_266[_u_MMuPC1AnalysisMQL_267] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1Y_AD.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_267;
    
    for(int _u_MMuPC1AnalysisMQL_268 = _u_MMuPC1AnalysisMQL_267 + 1; _u_MMuPC1AnalysisMQL_268 < _t_muPC1Y_AD.size(); _u_MMuPC1AnalysisMQL_268++)
    {
      if(_u_MMuPC1AnalysisMQL_266[_u_MMuPC1AnalysisMQL_268])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_269 = 0; _u_MMuPC1AnalysisMQL_269 < cluster_size; _u_MMuPC1AnalysisMQL_269++)
      {
        int _u_MMuPC1AnalysisMQL_270 = cluster_members[_u_MMuPC1AnalysisMQL_269];
        double time_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_270].time;
        double time_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_268].time;
        int Ywire_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_270].Ywire;
        int Ywire_2 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_268].Ywire;
        
        double _u_MMuPC1AnalysisMQL_271 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_271 < -kMuPC1YClusterInterval)
        {
          continue;
        }
        coincidence_seen = true;
        if(!((abs(Ywire_1-Ywire_2)-1) <= kMuPC1YClusterMaxGap))
        {
          continue;
        }
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_268;
        _u_MMuPC1AnalysisMQL_266[_u_MMuPC1AnalysisMQL_268] = true;
        _u_MMuPC1AnalysisMQL_268 = _u_MMuPC1AnalysisMQL_267;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].time;
    double time_max = time_min;
    double time_sum = 0;
    int Ywire_min = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].Ywire;
    int Ywire_max = Ywire_min;
    int Ywire_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_269 = 0; _u_MMuPC1AnalysisMQL_269 < cluster_size; _u_MMuPC1AnalysisMQL_269++)
    {
      int _u_MMuPC1AnalysisMQL_270 = cluster_members[_u_MMuPC1AnalysisMQL_269];
      time = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_270].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
      Ywire = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_270].Ywire;
      Ywire_min = MIN(Ywire_min, Ywire);
      Ywire_max = MAX(Ywire_max, Ywire);
      Ywire_sum = Ywire_sum + Ywire;
    }
    double time_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    int Ywire_1 = _t_muPC1Y_AD[_u_MMuPC1AnalysisMQL_267].Ywire;
    double Ywire_avg = Ywire_sum/((double)cluster_size);
    int Ywire_width = Ywire_max - Ywire_min + 1;
    {
      double time = time_min;
      double Ywire = Ywire_avg;
      int cluster_size_0 = cluster_size;
      int cluster_width = Ywire_width;
      int cluster_size = cluster_size_0;
      if(Tier1)
      {
        _h_muPC1_Y_final_cluster_size->Fill(cluster_size);
      }
      if(Tier1)
      {
        _h_muPC1_Y_final_cluster_width->Fill(cluster_width);
      }
      if(Tier1)
      {
        _h_muPC1_Y_final_cluster_avg->Fill(Ywire);
      }
      {
        double Ywire_0 = Ywire;
        double muPC1Time = time;
        double Ywire = Ywire_0;
        int _u_MMuPC1AnalysisMQL_272 = _t_muPC1Y_export.next();
        _t_muPC1Y_export[_u_MMuPC1AnalysisMQL_272].Ywire = Ywire_0;
        _t_muPC1Y_export[_u_MMuPC1AnalysisMQL_272].muPC1Time = muPC1Time;
      }
      int _u_MMuPC1AnalysisMQL_273 = _t_muPC1Y.next();
      _t_muPC1Y[_u_MMuPC1AnalysisMQL_273].time = time;
      _t_muPC1Y[_u_MMuPC1AnalysisMQL_273].Ywire = Ywire;
      _t_muPC1Y[_u_MMuPC1AnalysisMQL_273].cluster_size = cluster_size_0;
      _t_muPC1Y[_u_MMuPC1AnalysisMQL_273].cluster_width = cluster_width;
    }
  }
  _t_muPC1Y.sort(_u_MMuPC1AnalysisMQL_76);
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_274 = 0; _u_MMuPC1AnalysisMQL_274 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_274++)
    {
      double time = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].time;
      double Ywire = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].Ywire;
      int cluster_size = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].cluster_size;
      int cluster_width = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].cluster_width;
      {
        
        double time_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].time;
        double Ywire_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].Ywire;
        int cluster_size_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].cluster_size;
        int cluster_width_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_274].cluster_width;
        
        if(!_u_MMuPC1AnalysisMQL_148)
        {
          if(!_t_muPC1Y.checkSort(_u_MMuPC1AnalysisMQL_78))
          {
            printf("Warning: table muPC1Y is not sorted on time_2 as required for join with muPC1Y (_u_MMuPC1AnalysisMQL_78)\n");
          }
          _u_MMuPC1AnalysisMQL_148 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_149)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_147))
          {
            printf("Warning: table muPC1Y is not sorted on time_1 as required for join with muPC1Y\n");
            _u_MMuPC1AnalysisMQL_149 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_147 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_146 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_146++)
        {
          double time_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_146].time;
          double Ywire_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_146].Ywire;
          int cluster_size_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_146].cluster_size;
          int cluster_width_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_146].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_275 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_275 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_277 = _u_MMuPC1AnalysisMQL_146; _u_MMuPC1AnalysisMQL_277 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_277++)
        {
          double time_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_277].time;
          double Ywire_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_277].Ywire;
          int cluster_size_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_277].cluster_size;
          int cluster_width_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_277].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_275 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_275 < -50005)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muPC1_Y_final_cluster_autocorr_all_1D->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_278 = 0; _u_MMuPC1AnalysisMQL_278 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_278++)
    {
      double time = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].time;
      double Ywire = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].Ywire;
      int cluster_size = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].cluster_size;
      int cluster_width = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].cluster_width;
      {
        
        double time_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].time;
        double Ywire_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].Ywire;
        int cluster_size_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].cluster_size;
        int cluster_width_1 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_278].cluster_width;
        
        if(!_u_MMuPC1AnalysisMQL_152)
        {
          if(!_t_muPC1Y.checkSort(_u_MMuPC1AnalysisMQL_80))
          {
            printf("Warning: table muPC1Y is not sorted on time_2 as required for join with muPC1Y (_u_MMuPC1AnalysisMQL_80)\n");
          }
          _u_MMuPC1AnalysisMQL_152 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_153)
        {
          if(!(time_1 >= _u_MMuPC1AnalysisMQL_151))
          {
            printf("Warning: table muPC1Y is not sorted on time_1 as required for join with muPC1Y\n");
            _u_MMuPC1AnalysisMQL_153 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_151 = time_1;
        for( ; _u_MMuPC1AnalysisMQL_150 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_150++)
        {
          double time_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_150].time;
          double Ywire_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_150].Ywire;
          int cluster_size_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_150].cluster_size;
          int cluster_width_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_150].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_279 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_279 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_281 = _u_MMuPC1AnalysisMQL_150; _u_MMuPC1AnalysisMQL_281 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_281++)
        {
          double time_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_281].time;
          double Ywire_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_281].Ywire;
          int cluster_size_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_281].cluster_size;
          int cluster_width_2 = _t_muPC1Y[_u_MMuPC1AnalysisMQL_281].cluster_width;
          
          double _u_MMuPC1AnalysisMQL_279 = time_1 - time_2;
          if(_u_MMuPC1AnalysisMQL_279 < -150)
          {
            break;
          }
          {
            double time1 = time_1;
            double time2 = time_2;
            double wire_diff = fabs(Ywire_1-Ywire_2);
            if(Tier3)
            {
              if(fabs(time_2-time_1)>=0)
              {
                _h_muPC1_Y_final_cluster_autocorr_spatial_all_1D->Fill(wire_diff);
              }
            }
          }
        }
      }
    }
  }
  for(int _u_MMuPC1AnalysisMQL_282 = 0; _u_MMuPC1AnalysisMQL_282 < _t_muPC1X.size(); _u_MMuPC1AnalysisMQL_282++)
  {
    double time = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].time;
    double Xwire = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].Xwire;
    int cluster_size = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].cluster_size;
    int cluster_width = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].cluster_width;
    {
      
      double muPC1X_time = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].time;
      double Xwire = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].Xwire;
      int muPC1X_cluster_size = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].cluster_size;
      int muPC1X_cluster_width = _t_muPC1X[_u_MMuPC1AnalysisMQL_282].cluster_width;
      
      if(!_u_MMuPC1AnalysisMQL_156)
      {
        if(!_t_muPC1Y.checkSort(_u_MMuPC1AnalysisMQL_82))
        {
          printf("Warning: table muPC1Y is not sorted on muPC1Y_time as required for join with muPC1X (_u_MMuPC1AnalysisMQL_82)\n");
        }
        _u_MMuPC1AnalysisMQL_156 = true;
      }
      else if(!_u_MMuPC1AnalysisMQL_157)
      {
        if(!(muPC1X_time >= _u_MMuPC1AnalysisMQL_155))
        {
          printf("Warning: table muPC1X is not sorted on muPC1X_time as required for join with muPC1Y\n");
          _u_MMuPC1AnalysisMQL_157 = true;
        }
      }
      _u_MMuPC1AnalysisMQL_155 = muPC1X_time;
      for( ; _u_MMuPC1AnalysisMQL_154 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_154++)
      {
        double muPC1Y_time = _t_muPC1Y[_u_MMuPC1AnalysisMQL_154].time;
        double Ywire = _t_muPC1Y[_u_MMuPC1AnalysisMQL_154].Ywire;
        int muPC1Y_cluster_size = _t_muPC1Y[_u_MMuPC1AnalysisMQL_154].cluster_size;
        int muPC1Y_cluster_width = _t_muPC1Y[_u_MMuPC1AnalysisMQL_154].cluster_width;
        
        double _u_MMuPC1AnalysisMQL_283 = muPC1X_time - muPC1Y_time;
        if(_u_MMuPC1AnalysisMQL_283 < 601)
        {
          break;
        }
      }
      for(int _u_MMuPC1AnalysisMQL_285 = _u_MMuPC1AnalysisMQL_154; _u_MMuPC1AnalysisMQL_285 < _t_muPC1Y.size(); _u_MMuPC1AnalysisMQL_285++)
      {
        double muPC1Y_time = _t_muPC1Y[_u_MMuPC1AnalysisMQL_285].time;
        double Ywire = _t_muPC1Y[_u_MMuPC1AnalysisMQL_285].Ywire;
        int muPC1Y_cluster_size = _t_muPC1Y[_u_MMuPC1AnalysisMQL_285].cluster_size;
        int muPC1Y_cluster_width = _t_muPC1Y[_u_MMuPC1AnalysisMQL_285].cluster_width;
        
        double _u_MMuPC1AnalysisMQL_283 = muPC1X_time - muPC1Y_time;
        if(_u_MMuPC1AnalysisMQL_283 < -601)
        {
          break;
        }
        {
          double Xwire_0 = Xwire;
          double Ywire_0 = Ywire;
          double muPC1Time = MIN(muPC1X_time, muPC1Y_time);
          double XYtdiff = muPC1Y_time - muPC1X_time;
          double Xwire = Xwire_0;
          double Ywire = Ywire_0;
          int _u_MMuPC1AnalysisMQL_286 = _t_muPC1XY.next();
          _t_muPC1XY[_u_MMuPC1AnalysisMQL_286].Xwire = Xwire_0;
          _t_muPC1XY[_u_MMuPC1AnalysisMQL_286].Ywire = Ywire_0;
          _t_muPC1XY[_u_MMuPC1AnalysisMQL_286].muPC1Time = muPC1Time;
          _t_muPC1XY[_u_MMuPC1AnalysisMQL_286].XYtdiff = XYtdiff;
        }
      }
    }
  }
  _t_muPC1XY.sort(_u_MMuPC1AnalysisMQL_83);
  for(int _u_MMuPC1AnalysisMQL_287 = 0; _u_MMuPC1AnalysisMQL_287 < _t_muPC1XY.size(); _u_MMuPC1AnalysisMQL_287++)
  {
    double Xwire = _t_muPC1XY[_u_MMuPC1AnalysisMQL_287].Xwire;
    double Ywire = _t_muPC1XY[_u_MMuPC1AnalysisMQL_287].Ywire;
    double muPC1Time = _t_muPC1XY[_u_MMuPC1AnalysisMQL_287].muPC1Time;
    double XYtdiff = _t_muPC1XY[_u_MMuPC1AnalysisMQL_287].XYtdiff;
    if(Tier1)
    {
      _h_muPC1_coinc_XY_tdiff->Fill(XYtdiff);
    }
    if((XYtdiff >= -95) && (XYtdiff <= 95))
    {
      {
        double Xwire_0 = Xwire;
        double Ywire_0 = Ywire;
        double muPC1Time_0 = muPC1Time;
        double Xwire = Xwire_0;
        double Ywire = Ywire_0;
        double muPC1Time = muPC1Time_0;
        if(Tier1)
        {
          _h_muPC1_coinc_XY_2D->Fill(Xwire, Ywire);
        }
        int _u_MMuPC1AnalysisMQL_288 = _t_muPC1.next();
        _t_muPC1[_u_MMuPC1AnalysisMQL_288].Xwire = Xwire_0;
        _t_muPC1[_u_MMuPC1AnalysisMQL_288].Ywire = Ywire_0;
        _t_muPC1[_u_MMuPC1AnalysisMQL_288].muPC1Time = muPC1Time_0;
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuPC1AnalysisMQL_289 = 0; _u_MMuPC1AnalysisMQL_289 < _t_muPC1.size(); _u_MMuPC1AnalysisMQL_289++)
    {
      double Xwire = _t_muPC1[_u_MMuPC1AnalysisMQL_289].Xwire;
      double Ywire = _t_muPC1[_u_MMuPC1AnalysisMQL_289].Ywire;
      double muPC1Time = _t_muPC1[_u_MMuPC1AnalysisMQL_289].muPC1Time;
      {
        
        double Xwire_1 = _t_muPC1[_u_MMuPC1AnalysisMQL_289].Xwire;
        double Ywire_1 = _t_muPC1[_u_MMuPC1AnalysisMQL_289].Ywire;
        double muPC1Time_1 = _t_muPC1[_u_MMuPC1AnalysisMQL_289].muPC1Time;
        
        if(!_u_MMuPC1AnalysisMQL_160)
        {
          if(!_t_muPC1.checkSort(_u_MMuPC1AnalysisMQL_85))
          {
            printf("Warning: table muPC1 is not sorted on muPC1Time_2 as required for join with muPC1 (_u_MMuPC1AnalysisMQL_85)\n");
          }
          _u_MMuPC1AnalysisMQL_160 = true;
        }
        else if(!_u_MMuPC1AnalysisMQL_161)
        {
          if(!(muPC1Time_1 >= _u_MMuPC1AnalysisMQL_159))
          {
            printf("Warning: table muPC1 is not sorted on muPC1Time_1 as required for join with muPC1\n");
            _u_MMuPC1AnalysisMQL_161 = true;
          }
        }
        _u_MMuPC1AnalysisMQL_159 = muPC1Time_1;
        for( ; _u_MMuPC1AnalysisMQL_158 < _t_muPC1.size(); _u_MMuPC1AnalysisMQL_158++)
        {
          double Xwire_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_158].Xwire;
          double Ywire_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_158].Ywire;
          double muPC1Time_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_158].muPC1Time;
          
          double _u_MMuPC1AnalysisMQL_290 = muPC1Time_1 - muPC1Time_2;
          if(_u_MMuPC1AnalysisMQL_290 < 1)
          {
            break;
          }
        }
        for(int _u_MMuPC1AnalysisMQL_292 = _u_MMuPC1AnalysisMQL_158; _u_MMuPC1AnalysisMQL_292 < _t_muPC1.size(); _u_MMuPC1AnalysisMQL_292++)
        {
          double Xwire_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_292].Xwire;
          double Ywire_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_292].Ywire;
          double muPC1Time_2 = _t_muPC1[_u_MMuPC1AnalysisMQL_292].muPC1Time;
          
          double _u_MMuPC1AnalysisMQL_290 = muPC1Time_1 - muPC1Time_2;
          if(_u_MMuPC1AnalysisMQL_290 < -50005)
          {
            break;
          }
          {
            double muPC1Time_1_0 = muPC1Time_1;
            double muPC1Time_2_0 = muPC1Time_2;
            double muPC1Time_1 = muPC1Time_1_0;
            double muPC1Time_2 = muPC1Time_2_0;
            if(Tier3)
            {
              if((muPC1Time_2 - muPC1Time_1) >= 0)
              {
                _h_muPC1_coinc_XY_autocorr_all_1D->Fill(muPC1Time_2 - muPC1Time_1);
              }
            }
          }
        }
      }
    }
  }
  for(int _u_MMuPC1AnalysisMQL_293 = 0; _u_MMuPC1AnalysisMQL_293 < _t_muPC1X_sparks.size(); _u_MMuPC1AnalysisMQL_293++)
  {
    double time = _t_muPC1X_sparks[_u_MMuPC1AnalysisMQL_293].time;
    {
      double time_0 = time;
      double time = time_0;
      int _u_MMuPC1AnalysisMQL_294 = _t_muPC1_sparks_union.next();
      _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_294].time = time_0;
    }
  }
  for(int _u_MMuPC1AnalysisMQL_295 = 0; _u_MMuPC1AnalysisMQL_295 < _t_muPC1Y_sparks.size(); _u_MMuPC1AnalysisMQL_295++)
  {
    double time = _t_muPC1Y_sparks[_u_MMuPC1AnalysisMQL_295].time;
    {
      double time_0 = time;
      double time = time_0;
      int _u_MMuPC1AnalysisMQL_296 = _t_muPC1_sparks_union.next();
      _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_296].time = time_0;
    }
  }
  _t_muPC1_sparks_union.sort(_u_MMuPC1AnalysisMQL_86);
  bool _u_MMuPC1AnalysisMQL_297[_t_muPC1_sparks_union.size()];
  memset(_u_MMuPC1AnalysisMQL_297, 0, sizeof(_u_MMuPC1AnalysisMQL_297));
  if(!_t_muPC1_sparks_union.checkSort(_u_MMuPC1AnalysisMQL_87))
  {
    printf("Warning: table muPC1_sparks_union is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuPC1AnalysisMQL_298 = 0; _u_MMuPC1AnalysisMQL_298 < _t_muPC1_sparks_union.size(); _u_MMuPC1AnalysisMQL_298++)
  {
    double time = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_298].time;
    if(_u_MMuPC1AnalysisMQL_297[_u_MMuPC1AnalysisMQL_298])
    {
      continue;
    }
    _u_MMuPC1AnalysisMQL_297[_u_MMuPC1AnalysisMQL_298] = true;
    int cluster_size = 1;
    int cluster_members[_t_muPC1_sparks_union.size()];
    cluster_members[0] = _u_MMuPC1AnalysisMQL_298;
    
    for(int _u_MMuPC1AnalysisMQL_299 = _u_MMuPC1AnalysisMQL_298 + 1; _u_MMuPC1AnalysisMQL_299 < _t_muPC1_sparks_union.size(); _u_MMuPC1AnalysisMQL_299++)
    {
      if(_u_MMuPC1AnalysisMQL_297[_u_MMuPC1AnalysisMQL_299])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuPC1AnalysisMQL_300 = 0; _u_MMuPC1AnalysisMQL_300 < cluster_size; _u_MMuPC1AnalysisMQL_300++)
      {
        int _u_MMuPC1AnalysisMQL_301 = cluster_members[_u_MMuPC1AnalysisMQL_300];
        double time_1 = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_301].time;
        double time_2 = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_299].time;
        
        double _u_MMuPC1AnalysisMQL_302 = time_1 - time_2;
        if(_u_MMuPC1AnalysisMQL_302 < -200)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuPC1AnalysisMQL_299;
        _u_MMuPC1AnalysisMQL_297[_u_MMuPC1AnalysisMQL_299] = true;
        _u_MMuPC1AnalysisMQL_299 = _u_MMuPC1AnalysisMQL_298;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_298].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuPC1AnalysisMQL_300 = 0; _u_MMuPC1AnalysisMQL_300 < cluster_size; _u_MMuPC1AnalysisMQL_300++)
    {
      int _u_MMuPC1AnalysisMQL_301 = cluster_members[_u_MMuPC1AnalysisMQL_300];
      time = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_301].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_muPC1_sparks_union[_u_MMuPC1AnalysisMQL_298].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
      int cluster_size_0 = cluster_size;
      int cluster_size = cluster_size_0;
      if(Tier1)
      {
        _h_muPC1_spark_clustered_blocktime->Fill(time);
      }
      if(cluster_size == 2)
      {
        {
          double time_0 = time;
          double time = time_0;
          if(Tier1)
          {
            _h_muPC1_spark_chamberwide_count->Fill(1);
          }
          if(Tier1)
          {
            _h_muPC1_spark_chamberwide_blocktime->Fill(time);
          }
        }
      }
    }
  }
  _t_muPC1X_auto.finish();
  _t_muPC1X_cluster_contiguous.finish();
  _t_muPC1_sparks_union.toBank(pevent, "M1SP");
  _t_muPC1_sparks_union.finish();
  _t_muPC1Y_temporal_auto.finish();
  _t_muPC1X_raw_auto.finish();
  _t_muPC1X_AD.finish();
  _t_muPC1Y_spark_search.finish();
  _t_muPC1X_cluster_contiguous_sep.finish();
  _t_muPC1X_spatial_auto.finish();
  _t_muPC1X_export.toBank(pevent, "MP1X");
  _t_muPC1X_export.finish();
  _t_muPC1X_SC.finish();
  _t_muPC1Y_export.toBank(pevent, "MP1Y");
  _t_muPC1Y_export.finish();
  _t_muPC1Y_raw_auto.finish();
  _t_muPC1Y.finish();
  _t_muPC1X.finish();
  _t_muPC1Y_cluster_contiguous_sep.finish();
  _t_muPC1_auto.finish();
  _t_muPC1Y_SC_auto.finish();
  _t_hits.finish();
  _t_muPC1X_spark_search.finish();
  _t_muPC1X_AD_auto.finish();
  _t_muPC1X_sparks.finish();
  _t_muPC1Y_sparks.finish();
  _t_muPC1.toBank(pevent, "MPC1");
  _t_muPC1.finish();
  _t_muPC1Y_AD.finish();
  _t_muPC1_sparks_clustered.finish();
  _t_muPC1_hits.finish();
  _t_muPC1Y_raw.finish();
  _t_muPC1Y_SC.finish();
  _t_muPC1_sparks_chamberwide.finish();
  _t_muPC1Y_AD_auto.finish();
  _t_muPC1Y_cluster_contiguous.finish();
  _t_muPC1XY.finish();
  _t_muPC1Y_spatial_auto.finish();
  _t_muPC1X_raw.finish();
  _t_muPC1X_SC_auto.finish();
  return SUCCESS;
}
