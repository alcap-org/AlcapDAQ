/*
 * This file is automatically generated by MqlCompiler - DO NOT EDIT
 * Your changes will be lost when the original source is recompiled
 */

#include <midas.h>
#include "MqlArray.h"
#include "MqlNtupleColumn.h"
#include "Mql.h"

#include <stdio.h>
#include <stdlib.h>
#include <TH1.h>
#include <TH2.h>
#include <TH3.h>
#include <TNtuple.h>

INT MMuSCAnalysisMQL_init();
INT MMuSCAnalysisMQL(EVENT_HEADER *, void *);


ANA_MODULE MMuSCAnalysisMQL_module = 
{
  "MMuSCAnalysisMQL", /* module name */
  "MqlCompiler", /* author */
  MMuSCAnalysisMQL, /* event routine */
  NULL, /* BOR routine */
  NULL, /* EOR routine */
  MMuSCAnalysisMQL_init, /* init routine */
  NULL, /* exit routine */
  NULL, /* parameter structure */
  0, /* structure size */
  NULL, /* initial parameters */
};

#include <common.h>
#include <ucb_common.h>
#define Tier1 ON
#define Tier2 ON
#define Tier3 ON
struct _u_MMuSCAnalysisMQL_1
{
  #include "HITS.h"
};
static MqlArray<struct _u_MMuSCAnalysisMQL_1> _t_hits;
static TH1D *_h_parameters_muSC;
static TH1D *_h_parameters_6k;
struct _u_MMuSCAnalysisMQL_2
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_2> _t_muSC_copy1_raw;

static TH1D *_h_muSC_count_raw;
struct _u_MMuSCAnalysisMQL_3
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_3> _t_muSC_copy1_raw_auto;

// Comparison for muSC_copy1_raw on variable time
static int _u_MMuSCAnalysisMQL_23(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_2 *_o1 = (struct _u_MMuSCAnalysisMQL_2 *) _v1;
  struct _u_MMuSCAnalysisMQL_2 *_o2 = (struct _u_MMuSCAnalysisMQL_2 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSC_copy1_raw on variable time
static int _u_MMuSCAnalysisMQL_24(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_2 *_o1 = (struct _u_MMuSCAnalysisMQL_2 *) _v1;
  struct _u_MMuSCAnalysisMQL_2 *_o2 = (struct _u_MMuSCAnalysisMQL_2 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSC_copy1_raw_autocorr;
struct _u_MMuSCAnalysisMQL_4
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_4> _t_muSC_copy1_AD;

// Comparison for muSC_copy1_raw on variable time
static int _u_MMuSCAnalysisMQL_25(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_2 *_o1 = (struct _u_MMuSCAnalysisMQL_2 *) _v1;
  struct _u_MMuSCAnalysisMQL_2 *_o2 = (struct _u_MMuSCAnalysisMQL_2 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuSCAnalysisMQL_5
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_5> _t_muSC_copy1_AD_auto;

// Comparison for muSC_copy1_AD on variable time
static int _u_MMuSCAnalysisMQL_26(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_4 *_o1 = (struct _u_MMuSCAnalysisMQL_4 *) _v1;
  struct _u_MMuSCAnalysisMQL_4 *_o2 = (struct _u_MMuSCAnalysisMQL_4 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSC_copy1_AD on variable time
static int _u_MMuSCAnalysisMQL_27(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_4 *_o1 = (struct _u_MMuSCAnalysisMQL_4 *) _v1;
  struct _u_MMuSCAnalysisMQL_4 *_o2 = (struct _u_MMuSCAnalysisMQL_4 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSC_copy1_AD_autocorr;
struct _u_MMuSCAnalysisMQL_6
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_6> _t_muSC_copy1_AD2;

// Comparison for muSC_copy1_raw on variable time
static int _u_MMuSCAnalysisMQL_28(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_2 *_o1 = (struct _u_MMuSCAnalysisMQL_2 *) _v1;
  struct _u_MMuSCAnalysisMQL_2 *_o2 = (struct _u_MMuSCAnalysisMQL_2 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuSCAnalysisMQL_7
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_7> _t_kick_raw;

static TH1D *_h_kick_count_raw;
static TH1D *_h_kick_raw_times;
struct _u_MMuSCAnalysisMQL_8
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_8> _t_kick_raw_auto;

// Comparison for kick_raw on variable time
static int _u_MMuSCAnalysisMQL_29(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_7 *_o1 = (struct _u_MMuSCAnalysisMQL_7 *) _v1;
  struct _u_MMuSCAnalysisMQL_7 *_o2 = (struct _u_MMuSCAnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for kick_raw on variable time
static int _u_MMuSCAnalysisMQL_30(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_7 *_o1 = (struct _u_MMuSCAnalysisMQL_7 *) _v1;
  struct _u_MMuSCAnalysisMQL_7 *_o2 = (struct _u_MMuSCAnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_kick_raw_autocorr;
struct _u_MMuSCAnalysisMQL_9
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_9> _t_kick_AD;

// Comparison for kick_raw on variable time
static int _u_MMuSCAnalysisMQL_31(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_7 *_o1 = (struct _u_MMuSCAnalysisMQL_7 *) _v1;
  struct _u_MMuSCAnalysisMQL_7 *_o2 = (struct _u_MMuSCAnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuSCAnalysisMQL_10
{
  double muSC_copy1_AD_time;
  double kick_raw_time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_10> _t_muSC_kick_tdiff_check;

// Comparison for muSC_copy1_AD on variable time
static int _u_MMuSCAnalysisMQL_32(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_4 *_o1 = (struct _u_MMuSCAnalysisMQL_4 *) _v1;
  struct _u_MMuSCAnalysisMQL_4 *_o2 = (struct _u_MMuSCAnalysisMQL_4 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for kick_raw on variable time
static int _u_MMuSCAnalysisMQL_33(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_7 *_o1 = (struct _u_MMuSCAnalysisMQL_7 *) _v1;
  struct _u_MMuSCAnalysisMQL_7 *_o2 = (struct _u_MMuSCAnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSC_kick_tdiff;
struct _u_MMuSCAnalysisMQL_11
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_11> _t_muSC_lo_raw;

static TH1D *_h_muSClo_count_raw;
struct _u_MMuSCAnalysisMQL_12
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_12> _t_muSC_lo_raw_auto;

// Comparison for muSC_lo_raw on variable time
static int _u_MMuSCAnalysisMQL_34(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_11 *_o1 = (struct _u_MMuSCAnalysisMQL_11 *) _v1;
  struct _u_MMuSCAnalysisMQL_11 *_o2 = (struct _u_MMuSCAnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSC_lo_raw on variable time
static int _u_MMuSCAnalysisMQL_35(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_11 *_o1 = (struct _u_MMuSCAnalysisMQL_11 *) _v1;
  struct _u_MMuSCAnalysisMQL_11 *_o2 = (struct _u_MMuSCAnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSC_lo_raw_autocorr;
struct _u_MMuSCAnalysisMQL_13
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_13> _t_muSC_lo_AD;

// Comparison for muSC_lo_raw on variable time
static int _u_MMuSCAnalysisMQL_36(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_11 *_o1 = (struct _u_MMuSCAnalysisMQL_11 *) _v1;
  struct _u_MMuSCAnalysisMQL_11 *_o2 = (struct _u_MMuSCAnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuSCAnalysisMQL_14
{
  double muSC_copy1_AD_time;
  double muSC_lo_raw_time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_14> _t_muSC_muSClo_tdiff_check;

// Comparison for muSC_copy1_AD on variable time
static int _u_MMuSCAnalysisMQL_37(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_4 *_o1 = (struct _u_MMuSCAnalysisMQL_4 *) _v1;
  struct _u_MMuSCAnalysisMQL_4 *_o2 = (struct _u_MMuSCAnalysisMQL_4 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSC_lo_raw on variable time
static int _u_MMuSCAnalysisMQL_38(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_11 *_o1 = (struct _u_MMuSCAnalysisMQL_11 *) _v1;
  struct _u_MMuSCAnalysisMQL_11 *_o2 = (struct _u_MMuSCAnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSClo_muSC_tdiff;
struct _u_MMuSCAnalysisMQL_15
{
  double muSC_lo_raw_time;
  double kick_raw_time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_15> _t_muSClo_kick_tdiff_check;

// Comparison for muSC_lo_raw on variable time
static int _u_MMuSCAnalysisMQL_39(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_11 *_o1 = (struct _u_MMuSCAnalysisMQL_11 *) _v1;
  struct _u_MMuSCAnalysisMQL_11 *_o2 = (struct _u_MMuSCAnalysisMQL_11 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for kick_raw on variable time
static int _u_MMuSCAnalysisMQL_40(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_7 *_o1 = (struct _u_MMuSCAnalysisMQL_7 *) _v1;
  struct _u_MMuSCAnalysisMQL_7 *_o2 = (struct _u_MMuSCAnalysisMQL_7 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSClo_kick_tdiff;
struct _u_MMuSCAnalysisMQL_16
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_16> _t_muSC_gate_B;

struct _u_MMuSCAnalysisMQL_17
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_17> _t_muSC_gate_BBar;

struct _u_MMuSCAnalysisMQL_18
{
  double muSC_gate_B_time;
  double muSC_gate_BBar_time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_18> _t_muSC_gate_B_BBar;

// Comparison for muSC_gate_B on variable time
static int _u_MMuSCAnalysisMQL_41(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_16 *_o1 = (struct _u_MMuSCAnalysisMQL_16 *) _v1;
  struct _u_MMuSCAnalysisMQL_16 *_o2 = (struct _u_MMuSCAnalysisMQL_16 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSC_gate_BBar on variable time
static int _u_MMuSCAnalysisMQL_42(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_17 *_o1 = (struct _u_MMuSCAnalysisMQL_17 *) _v1;
  struct _u_MMuSCAnalysisMQL_17 *_o2 = (struct _u_MMuSCAnalysisMQL_17 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSC_gate_B_BBar_tdiff;
struct _u_MMuSCAnalysisMQL_19
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_19> _t_muSCA_raw;

static TH1D *_h_muSCA_count_raw;
struct _u_MMuSCAnalysisMQL_20
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_20> _t_muSCA_raw_auto;

// Comparison for muSCA_raw on variable time
static int _u_MMuSCAnalysisMQL_43(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_19 *_o1 = (struct _u_MMuSCAnalysisMQL_19 *) _v1;
  struct _u_MMuSCAnalysisMQL_19 *_o2 = (struct _u_MMuSCAnalysisMQL_19 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSCA_raw on variable time
static int _u_MMuSCAnalysisMQL_44(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_19 *_o1 = (struct _u_MMuSCAnalysisMQL_19 *) _v1;
  struct _u_MMuSCAnalysisMQL_19 *_o2 = (struct _u_MMuSCAnalysisMQL_19 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSCA_raw_autocorr;
struct _u_MMuSCAnalysisMQL_21
{
  double time;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_21> _t_muSCA_AD;

// Comparison for muSCA_raw on variable time
static int _u_MMuSCAnalysisMQL_45(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_19 *_o1 = (struct _u_MMuSCAnalysisMQL_19 *) _v1;
  struct _u_MMuSCAnalysisMQL_19 *_o2 = (struct _u_MMuSCAnalysisMQL_19 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
struct _u_MMuSCAnalysisMQL_22
{
  double time_1;
  double time_2;
};
static MqlArray<struct _u_MMuSCAnalysisMQL_22> _t_muSCA_AD_auto;

// Comparison for muSCA_AD on variable time
static int _u_MMuSCAnalysisMQL_46(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_21 *_o1 = (struct _u_MMuSCAnalysisMQL_21 *) _v1;
  struct _u_MMuSCAnalysisMQL_21 *_o2 = (struct _u_MMuSCAnalysisMQL_21 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
// Comparison for muSCA_AD on variable time
static int _u_MMuSCAnalysisMQL_47(const void *_v1, const void *_v2)
{
  struct _u_MMuSCAnalysisMQL_21 *_o1 = (struct _u_MMuSCAnalysisMQL_21 *) _v1;
  struct _u_MMuSCAnalysisMQL_21 *_o2 = (struct _u_MMuSCAnalysisMQL_21 *) _v2;
  double _sv1, _sv2;
  {
    double time = _o1->time;
    _sv1 = time;
  }
  {
    double time = _o2->time;
    _sv2 = time;
  }
  double _diff = _sv1 - _sv2;
  if(_diff < 0) return -1;
  if(_diff == 0) return 0;
  if(_diff > 0) return  1;
}
static TH1D *_h_muSCA_AD_autocorr;

INT MMuSCAnalysisMQL_init()
{
  if(Tier1)
  {
    _h_parameters_muSC = new TH1D("parameters_muSC", "#muSC parameters", 
      12, 5999.5, 6011.5);
    _h_parameters_muSC->GetXaxis()->SetTitle("parameter");
  }
  if(Tier1)
  {
    _h_parameters_6k = new TH1D("parameters_6k", "parameters", 
      6001, 999.5, 7000.5);
    _h_parameters_6k->GetXaxis()->SetTitle("parameter");
  }
  if(Tier1)
  {
    _h_muSC_count_raw = new TH1D("muSC_count_raw", "#muSC copy1 raw count", 
      3, -0.5, 2.5);
    _h_muSC_count_raw->GetXaxis()->SetTitle("1");
  }
  if(Tier3)
  {
    _h_muSC_copy1_raw_autocorr = new TH1D("muSC_copy1_raw_autocorr", "#muSC copy1 raw autocorr", 
      44201, -5000.625, 50250.625);
    _h_muSC_copy1_raw_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muSC_copy1_AD_autocorr = new TH1D("muSC_copy1_AD_autocorr", "#muSC copy1 AD autocorr", 
      44201, -5000.625, 50250.625);
    _h_muSC_copy1_AD_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier1)
  {
    _h_kick_count_raw = new TH1D("kick_count_raw", "kick raw count", 
      3, -0.5, 2.5);
    _h_kick_count_raw->GetXaxis()->SetTitle("1");
  }
  if(Tier1)
  {
    _h_kick_raw_times = new TH1D("kick_raw_times", "kicker raw times", 
      20000, 0., 130E6);
    _h_kick_raw_times->GetXaxis()->SetTitle("time");
  }
  if(Tier3)
  {
    _h_kick_raw_autocorr = new TH1D("kick_raw_autocorr", "kick raw autocorr", 
      44201, -5000.625, 50250.625);
    _h_kick_raw_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier2)
  {
    _h_muSC_kick_tdiff = new TH1D("muSC_kick_tdiff", "#kick/#muSC tdiff", 
      48001, -30000.625, 30000.625);
    _h_muSC_kick_tdiff->GetXaxis()->SetTitle("muSC_copy1_AD_time-kick_raw_time");
  }
  if(Tier1)
  {
    _h_muSClo_count_raw = new TH1D("muSClo_count_raw", "#muSClo raw count", 
      3, -0.5, 2.5);
    _h_muSClo_count_raw->GetXaxis()->SetTitle("1");
  }
  if(Tier3)
  {
    _h_muSC_lo_raw_autocorr = new TH1D("muSC_lo_raw_autocorr", "#muSC-lo raw autocorr", 
      44201, -5000.625, 50250.625);
    _h_muSC_lo_raw_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier2)
  {
    _h_muSClo_muSC_tdiff = new TH1D("muSClo_muSC_tdiff", "#muSClo/#muSC tdiff", 
      48001, -30000.625, 30000.625);
    _h_muSClo_muSC_tdiff->GetXaxis()->SetTitle("muSC_lo_raw_time-muSC_copy1_AD_time");
  }
  if(Tier2)
  {
    _h_muSClo_kick_tdiff = new TH1D("muSClo_kick_tdiff", "#kick/#muSClo tdiff", 
      48001, -30000.625, 30000.625);
    _h_muSClo_kick_tdiff->GetXaxis()->SetTitle("muSC_lo_raw_time-kick_raw_time");
  }
  if(Tier1)
  {
    _h_muSC_gate_B_BBar_tdiff = new TH1D("muSC_gate_B_BBar_tdiff", "muSC_gate_B_BBar_tdiff", 
      8000, -5000.75, 4999.25);
    _h_muSC_gate_B_BBar_tdiff->GetXaxis()->SetTitle("muSC_gate_BBar_time - muSC_gate_B_time");
  }
  if(Tier1)
  {
    _h_muSCA_count_raw = new TH1D("muSCA_count_raw", "raw muSCA count", 
      3, -0.5, 2.5);
    _h_muSCA_count_raw->GetXaxis()->SetTitle("1");
  }
  if(Tier3)
  {
    _h_muSCA_raw_autocorr = new TH1D("muSCA_raw_autocorr", "muSCA raw autocorr", 
      44201, -5000.625, 50250.625);
    _h_muSCA_raw_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  if(Tier3)
  {
    _h_muSCA_AD_autocorr = new TH1D("muSCA_AD_autocorr", "muSCA AD autocorr", 
      44201, -5000.625, 50250.625);
    _h_muSCA_AD_autocorr->GetXaxis()->SetTitle("time_2 - time_1");
  }
  return SUCCESS;
}

INT MMuSCAnalysisMQL(EVENT_HEADER *pheader, void *pevent)
{
  _t_muSCA_AD_auto.reset();
  _t_muSC_gate_B.reset();
  _t_muSC_copy1_AD2.reset();
  _t_muSClo_kick_tdiff_check.reset();
  _t_muSCA_raw_auto.reset();
  _t_muSC_gate_B_BBar.reset();
  _t_kick_AD.reset();
  _t_muSC_muSClo_tdiff_check.reset();
  _t_kick_raw_auto.reset();
  _t_muSC_gate_BBar.reset();
  _t_muSC_copy1_AD.reset();
  _t_muSC_copy1_raw.reset();
  _t_hits.reset();
  _t_muSC_lo_raw_auto.reset();
  _t_muSCA_AD.reset();
  _t_muSC_copy1_raw_auto.reset();
  _t_muSC_kick_tdiff_check.reset();
  _t_muSCA_raw.reset();
  _t_muSC_lo_raw.reset();
  _t_kick_raw.reset();
  _t_muSC_lo_AD.reset();
  _t_muSC_copy1_AD_auto.reset();
  int _u_MMuSCAnalysisMQL_48 = 0;
  double _u_MMuSCAnalysisMQL_49 = 0;
  bool _u_MMuSCAnalysisMQL_50 = false;
  bool _u_MMuSCAnalysisMQL_51 = false;
  int _u_MMuSCAnalysisMQL_52 = 0;
  int _u_MMuSCAnalysisMQL_53 = 0;
  double _u_MMuSCAnalysisMQL_54 = 0;
  bool _u_MMuSCAnalysisMQL_55 = false;
  bool _u_MMuSCAnalysisMQL_56 = false;
  int _u_MMuSCAnalysisMQL_57 = 0;
  int _u_MMuSCAnalysisMQL_58 = 0;
  double _u_MMuSCAnalysisMQL_59 = 0;
  bool _u_MMuSCAnalysisMQL_60 = false;
  bool _u_MMuSCAnalysisMQL_61 = false;
  int _u_MMuSCAnalysisMQL_62 = 0;
  int _u_MMuSCAnalysisMQL_63 = 0;
  double _u_MMuSCAnalysisMQL_64 = 0;
  bool _u_MMuSCAnalysisMQL_65 = false;
  bool _u_MMuSCAnalysisMQL_66 = false;
  int _u_MMuSCAnalysisMQL_67 = 0;
  double _u_MMuSCAnalysisMQL_68 = 0;
  bool _u_MMuSCAnalysisMQL_69 = false;
  bool _u_MMuSCAnalysisMQL_70 = false;
  int _u_MMuSCAnalysisMQL_71 = 0;
  int _u_MMuSCAnalysisMQL_72 = 0;
  double _u_MMuSCAnalysisMQL_73 = 0;
  bool _u_MMuSCAnalysisMQL_74 = false;
  bool _u_MMuSCAnalysisMQL_75 = false;
  int _u_MMuSCAnalysisMQL_76 = 0;
  double _u_MMuSCAnalysisMQL_77 = 0;
  bool _u_MMuSCAnalysisMQL_78 = false;
  bool _u_MMuSCAnalysisMQL_79 = false;
  int _u_MMuSCAnalysisMQL_80 = 0;
  double _u_MMuSCAnalysisMQL_81 = 0;
  bool _u_MMuSCAnalysisMQL_82 = false;
  bool _u_MMuSCAnalysisMQL_83 = false;
  int _u_MMuSCAnalysisMQL_84 = 0;
  double _u_MMuSCAnalysisMQL_85 = 0;
  bool _u_MMuSCAnalysisMQL_86 = false;
  bool _u_MMuSCAnalysisMQL_87 = false;
  int _u_MMuSCAnalysisMQL_88 = 0;
  int _u_MMuSCAnalysisMQL_89 = 0;
  double _u_MMuSCAnalysisMQL_90 = 0;
  bool _u_MMuSCAnalysisMQL_91 = false;
  bool _u_MMuSCAnalysisMQL_92 = false;
  _t_hits.fromBank(pevent, "HITS");
  
  for(int _u_MMuSCAnalysisMQL_93 = 0; _u_MMuSCAnalysisMQL_93 < _t_hits.size(); _u_MMuSCAnalysisMQL_93++)
  {
    double time = _t_hits[_u_MMuSCAnalysisMQL_93].time;
    int parameter = _t_hits[_u_MMuSCAnalysisMQL_93].parameter;
    if(Tier1)
    {
      if(parameter >= 6000 && parameter <= 6011)
      {
        _h_parameters_muSC->Fill(parameter);
      }
    }
    if((parameter == 6011))
    {
      {
        double time_0 = time;
        double time = time_0;
        if(Tier1)
        {
          _h_muSC_count_raw->Fill(1);
        }
        int _u_MMuSCAnalysisMQL_94 = _t_muSC_copy1_raw.next();
        _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_94].time = time_0;
      }
    }
    if((parameter == 6050))
    {
      {
        double time_0 = time;
        double time = time_0;
        if(Tier1)
        {
          _h_kick_count_raw->Fill(1);
        }
        if(Tier1)
        {
          _h_kick_raw_times->Fill(time);
        }
        int _u_MMuSCAnalysisMQL_95 = _t_kick_raw.next();
        _t_kick_raw[_u_MMuSCAnalysisMQL_95].time = time_0;
      }
    }
    if((parameter == 6803))
    {
      {
        double time_0 = time;
        double time = time_0;
        if(Tier1)
        {
          _h_muSClo_count_raw->Fill(1);
        }
        int _u_MMuSCAnalysisMQL_96 = _t_muSC_lo_raw.next();
        _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_96].time = time_0;
      }
    }
    if(parameter == 6004)
    {
      {
        double time_0 = time;
        double time = time_0;
        int _u_MMuSCAnalysisMQL_97 = _t_muSC_gate_BBar.next();
        _t_muSC_gate_BBar[_u_MMuSCAnalysisMQL_97].time = time_0;
      }
    }
    if((parameter == 6002))
    {
      {
        double time_0 = time;
        double time = time_0;
        if(Tier1)
        {
          _h_muSCA_count_raw->Fill(1);
        }
        int _u_MMuSCAnalysisMQL_98 = _t_muSCA_raw.next();
        _t_muSCA_raw[_u_MMuSCAnalysisMQL_98].time = time_0;
      }
    }
    if(Tier1)
    {
      if(parameter >=1000 && parameter <= 7000)
      {
        _h_parameters_6k->Fill(parameter);
      }
    }
    if(parameter == 6003)
    {
      {
        double time_0 = time;
        double time = time_0;
        int _u_MMuSCAnalysisMQL_99 = _t_muSC_gate_B.next();
        _t_muSC_gate_B[_u_MMuSCAnalysisMQL_99].time = time_0;
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_100 = 0; _u_MMuSCAnalysisMQL_100 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_100++)
    {
      double time = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_100].time;
      {
        
        double time_1 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_100].time;
        
        if(!_u_MMuSCAnalysisMQL_50)
        {
          if(!_t_muSC_copy1_raw.checkSort(_u_MMuSCAnalysisMQL_24))
          {
            printf("Warning: table muSC_copy1_raw is not sorted on time_2 as required for join with muSC_copy1_raw (_u_MMuSCAnalysisMQL_24)\n");
          }
          _u_MMuSCAnalysisMQL_50 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_51)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_49))
          {
            printf("Warning: table muSC_copy1_raw is not sorted on time_1 as required for join with muSC_copy1_raw\n");
            _u_MMuSCAnalysisMQL_51 = true;
          }
        }
        _u_MMuSCAnalysisMQL_49 = time_1;
        for( ; _u_MMuSCAnalysisMQL_48 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_48++)
        {
          double time_2 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_48].time;
          
          double _u_MMuSCAnalysisMQL_101 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_101 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_103 = _u_MMuSCAnalysisMQL_48; _u_MMuSCAnalysisMQL_103 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_103++)
        {
          double time_2 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_103].time;
          
          double _u_MMuSCAnalysisMQL_101 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_101 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muSC_copy1_raw_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuSCAnalysisMQL_104[_t_muSC_copy1_raw.size()];
  memset(_u_MMuSCAnalysisMQL_104, 0, sizeof(_u_MMuSCAnalysisMQL_104));
  if(!_t_muSC_copy1_raw.checkSort(_u_MMuSCAnalysisMQL_25))
  {
    printf("Warning: table muSC_copy1_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuSCAnalysisMQL_105 = 0; _u_MMuSCAnalysisMQL_105 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_105++)
  {
    double time = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_105].time;
    if(_u_MMuSCAnalysisMQL_104[_u_MMuSCAnalysisMQL_105])
    {
      continue;
    }
    _u_MMuSCAnalysisMQL_104[_u_MMuSCAnalysisMQL_105] = true;
    int cluster_size = 1;
    int cluster_members[_t_muSC_copy1_raw.size()];
    cluster_members[0] = _u_MMuSCAnalysisMQL_105;
    
    for(int _u_MMuSCAnalysisMQL_106 = _u_MMuSCAnalysisMQL_105 + 1; _u_MMuSCAnalysisMQL_106 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_106++)
    {
      if(_u_MMuSCAnalysisMQL_104[_u_MMuSCAnalysisMQL_106])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuSCAnalysisMQL_107 = 0; _u_MMuSCAnalysisMQL_107 < cluster_size; _u_MMuSCAnalysisMQL_107++)
      {
        if(_u_MMuSCAnalysisMQL_107 > 0) break;
        int _u_MMuSCAnalysisMQL_108 = cluster_members[_u_MMuSCAnalysisMQL_107];
        double time_1 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_108].time;
        double time_2 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_106].time;
        
        double _u_MMuSCAnalysisMQL_109 = time_1 - time_2;
        if(_u_MMuSCAnalysisMQL_109 < -kMuSCADInterval)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuSCAnalysisMQL_106;
        _u_MMuSCAnalysisMQL_104[_u_MMuSCAnalysisMQL_106] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_105].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuSCAnalysisMQL_107 = 0; _u_MMuSCAnalysisMQL_107 < cluster_size; _u_MMuSCAnalysisMQL_107++)
    {
      int _u_MMuSCAnalysisMQL_108 = cluster_members[_u_MMuSCAnalysisMQL_107];
      time = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_108].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_105].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
      int _u_MMuSCAnalysisMQL_110 = _t_muSC_copy1_AD.next();
      _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_110].time = time;
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_111 = 0; _u_MMuSCAnalysisMQL_111 < _t_muSC_copy1_AD.size(); _u_MMuSCAnalysisMQL_111++)
    {
      double time = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_111].time;
      {
        
        double time_1 = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_111].time;
        
        if(!_u_MMuSCAnalysisMQL_55)
        {
          if(!_t_muSC_copy1_AD.checkSort(_u_MMuSCAnalysisMQL_27))
          {
            printf("Warning: table muSC_copy1_AD is not sorted on time_2 as required for join with muSC_copy1_AD (_u_MMuSCAnalysisMQL_27)\n");
          }
          _u_MMuSCAnalysisMQL_55 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_56)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_54))
          {
            printf("Warning: table muSC_copy1_AD is not sorted on time_1 as required for join with muSC_copy1_AD\n");
            _u_MMuSCAnalysisMQL_56 = true;
          }
        }
        _u_MMuSCAnalysisMQL_54 = time_1;
        for( ; _u_MMuSCAnalysisMQL_53 < _t_muSC_copy1_AD.size(); _u_MMuSCAnalysisMQL_53++)
        {
          double time_2 = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_53].time;
          
          double _u_MMuSCAnalysisMQL_112 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_112 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_114 = _u_MMuSCAnalysisMQL_53; _u_MMuSCAnalysisMQL_114 < _t_muSC_copy1_AD.size(); _u_MMuSCAnalysisMQL_114++)
        {
          double time_2 = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_114].time;
          
          double _u_MMuSCAnalysisMQL_112 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_112 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muSC_copy1_AD_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuSCAnalysisMQL_115[_t_muSC_copy1_raw.size()];
  memset(_u_MMuSCAnalysisMQL_115, 0, sizeof(_u_MMuSCAnalysisMQL_115));
  if(!_t_muSC_copy1_raw.checkSort(_u_MMuSCAnalysisMQL_28))
  {
    printf("Warning: table muSC_copy1_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuSCAnalysisMQL_116 = 0; _u_MMuSCAnalysisMQL_116 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_116++)
  {
    double time = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_116].time;
    if(_u_MMuSCAnalysisMQL_115[_u_MMuSCAnalysisMQL_116])
    {
      continue;
    }
    _u_MMuSCAnalysisMQL_115[_u_MMuSCAnalysisMQL_116] = true;
    int cluster_size = 1;
    int cluster_members[_t_muSC_copy1_raw.size()];
    cluster_members[0] = _u_MMuSCAnalysisMQL_116;
    
    for(int _u_MMuSCAnalysisMQL_117 = _u_MMuSCAnalysisMQL_116 + 1; _u_MMuSCAnalysisMQL_117 < _t_muSC_copy1_raw.size(); _u_MMuSCAnalysisMQL_117++)
    {
      if(_u_MMuSCAnalysisMQL_115[_u_MMuSCAnalysisMQL_117])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuSCAnalysisMQL_118 = 0; _u_MMuSCAnalysisMQL_118 < cluster_size; _u_MMuSCAnalysisMQL_118++)
      {
        if(_u_MMuSCAnalysisMQL_118 > 0) break;
        int _u_MMuSCAnalysisMQL_119 = cluster_members[_u_MMuSCAnalysisMQL_118];
        double time_1 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_119].time;
        double time_2 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_117].time;
        
        double _u_MMuSCAnalysisMQL_120 = time_1 - time_2;
        if(_u_MMuSCAnalysisMQL_120 < -kMuSCAD2Interval)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuSCAnalysisMQL_117;
        _u_MMuSCAnalysisMQL_115[_u_MMuSCAnalysisMQL_117] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_116].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuSCAnalysisMQL_118 = 0; _u_MMuSCAnalysisMQL_118 < cluster_size; _u_MMuSCAnalysisMQL_118++)
    {
      int _u_MMuSCAnalysisMQL_119 = cluster_members[_u_MMuSCAnalysisMQL_118];
      time = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_119].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_muSC_copy1_raw[_u_MMuSCAnalysisMQL_116].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_121 = 0; _u_MMuSCAnalysisMQL_121 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_121++)
    {
      double time = _t_kick_raw[_u_MMuSCAnalysisMQL_121].time;
      {
        
        double time_1 = _t_kick_raw[_u_MMuSCAnalysisMQL_121].time;
        
        if(!_u_MMuSCAnalysisMQL_60)
        {
          if(!_t_kick_raw.checkSort(_u_MMuSCAnalysisMQL_30))
          {
            printf("Warning: table kick_raw is not sorted on time_2 as required for join with kick_raw (_u_MMuSCAnalysisMQL_30)\n");
          }
          _u_MMuSCAnalysisMQL_60 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_61)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_59))
          {
            printf("Warning: table kick_raw is not sorted on time_1 as required for join with kick_raw\n");
            _u_MMuSCAnalysisMQL_61 = true;
          }
        }
        _u_MMuSCAnalysisMQL_59 = time_1;
        for( ; _u_MMuSCAnalysisMQL_58 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_58++)
        {
          double time_2 = _t_kick_raw[_u_MMuSCAnalysisMQL_58].time;
          
          double _u_MMuSCAnalysisMQL_122 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_122 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_124 = _u_MMuSCAnalysisMQL_58; _u_MMuSCAnalysisMQL_124 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_124++)
        {
          double time_2 = _t_kick_raw[_u_MMuSCAnalysisMQL_124].time;
          
          double _u_MMuSCAnalysisMQL_122 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_122 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_kick_raw_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuSCAnalysisMQL_125[_t_kick_raw.size()];
  memset(_u_MMuSCAnalysisMQL_125, 0, sizeof(_u_MMuSCAnalysisMQL_125));
  if(!_t_kick_raw.checkSort(_u_MMuSCAnalysisMQL_31))
  {
    printf("Warning: table kick_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuSCAnalysisMQL_126 = 0; _u_MMuSCAnalysisMQL_126 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_126++)
  {
    double time = _t_kick_raw[_u_MMuSCAnalysisMQL_126].time;
    if(_u_MMuSCAnalysisMQL_125[_u_MMuSCAnalysisMQL_126])
    {
      continue;
    }
    _u_MMuSCAnalysisMQL_125[_u_MMuSCAnalysisMQL_126] = true;
    int cluster_size = 1;
    int cluster_members[_t_kick_raw.size()];
    cluster_members[0] = _u_MMuSCAnalysisMQL_126;
    
    for(int _u_MMuSCAnalysisMQL_127 = _u_MMuSCAnalysisMQL_126 + 1; _u_MMuSCAnalysisMQL_127 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_127++)
    {
      if(_u_MMuSCAnalysisMQL_125[_u_MMuSCAnalysisMQL_127])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuSCAnalysisMQL_128 = 0; _u_MMuSCAnalysisMQL_128 < cluster_size; _u_MMuSCAnalysisMQL_128++)
      {
        if(_u_MMuSCAnalysisMQL_128 > 0) break;
        int _u_MMuSCAnalysisMQL_129 = cluster_members[_u_MMuSCAnalysisMQL_128];
        double time_1 = _t_kick_raw[_u_MMuSCAnalysisMQL_129].time;
        double time_2 = _t_kick_raw[_u_MMuSCAnalysisMQL_127].time;
        
        double _u_MMuSCAnalysisMQL_130 = time_1 - time_2;
        if(_u_MMuSCAnalysisMQL_130 < -kMuSCloADInterval)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuSCAnalysisMQL_127;
        _u_MMuSCAnalysisMQL_125[_u_MMuSCAnalysisMQL_127] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_kick_raw[_u_MMuSCAnalysisMQL_126].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuSCAnalysisMQL_128 = 0; _u_MMuSCAnalysisMQL_128 < cluster_size; _u_MMuSCAnalysisMQL_128++)
    {
      int _u_MMuSCAnalysisMQL_129 = cluster_members[_u_MMuSCAnalysisMQL_128];
      time = _t_kick_raw[_u_MMuSCAnalysisMQL_129].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_kick_raw[_u_MMuSCAnalysisMQL_126].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
    }
  }
  if(Tier2)
  {
    for(int _u_MMuSCAnalysisMQL_131 = 0; _u_MMuSCAnalysisMQL_131 < _t_muSC_copy1_AD.size(); _u_MMuSCAnalysisMQL_131++)
    {
      double time = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_131].time;
      {
        
        double muSC_copy1_AD_time = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_131].time;
        
        if(!_u_MMuSCAnalysisMQL_65)
        {
          if(!_t_kick_raw.checkSort(_u_MMuSCAnalysisMQL_33))
          {
            printf("Warning: table kick_raw is not sorted on kick_raw_time as required for join with muSC_copy1_AD (_u_MMuSCAnalysisMQL_33)\n");
          }
          _u_MMuSCAnalysisMQL_65 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_66)
        {
          if(!(muSC_copy1_AD_time >= _u_MMuSCAnalysisMQL_64))
          {
            printf("Warning: table muSC_copy1_AD is not sorted on muSC_copy1_AD_time as required for join with kick_raw\n");
            _u_MMuSCAnalysisMQL_66 = true;
          }
        }
        _u_MMuSCAnalysisMQL_64 = muSC_copy1_AD_time;
        for( ; _u_MMuSCAnalysisMQL_63 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_63++)
        {
          double kick_raw_time = _t_kick_raw[_u_MMuSCAnalysisMQL_63].time;
          
          double _u_MMuSCAnalysisMQL_132 = muSC_copy1_AD_time - kick_raw_time;
          if(_u_MMuSCAnalysisMQL_132 < 30001)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_134 = _u_MMuSCAnalysisMQL_63; _u_MMuSCAnalysisMQL_134 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_134++)
        {
          double kick_raw_time = _t_kick_raw[_u_MMuSCAnalysisMQL_134].time;
          
          double _u_MMuSCAnalysisMQL_132 = muSC_copy1_AD_time - kick_raw_time;
          if(_u_MMuSCAnalysisMQL_132 < -30001)
          {
            break;
          }
          {
            double muSC_copy1_AD_time_0 = muSC_copy1_AD_time;
            double kick_raw_time_0 = kick_raw_time;
            double muSC_copy1_AD_time = muSC_copy1_AD_time_0;
            double kick_raw_time = kick_raw_time_0;
            if(Tier2)
            {
              _h_muSC_kick_tdiff->Fill(muSC_copy1_AD_time-kick_raw_time);
            }
          }
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_135 = 0; _u_MMuSCAnalysisMQL_135 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_135++)
    {
      double time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_135].time;
      {
        
        double time_1 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_135].time;
        
        if(!_u_MMuSCAnalysisMQL_69)
        {
          if(!_t_muSC_lo_raw.checkSort(_u_MMuSCAnalysisMQL_35))
          {
            printf("Warning: table muSC_lo_raw is not sorted on time_2 as required for join with muSC_lo_raw (_u_MMuSCAnalysisMQL_35)\n");
          }
          _u_MMuSCAnalysisMQL_69 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_70)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_68))
          {
            printf("Warning: table muSC_lo_raw is not sorted on time_1 as required for join with muSC_lo_raw\n");
            _u_MMuSCAnalysisMQL_70 = true;
          }
        }
        _u_MMuSCAnalysisMQL_68 = time_1;
        for( ; _u_MMuSCAnalysisMQL_67 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_67++)
        {
          double time_2 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_67].time;
          
          double _u_MMuSCAnalysisMQL_136 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_136 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_138 = _u_MMuSCAnalysisMQL_67; _u_MMuSCAnalysisMQL_138 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_138++)
        {
          double time_2 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_138].time;
          
          double _u_MMuSCAnalysisMQL_136 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_136 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muSC_lo_raw_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuSCAnalysisMQL_139[_t_muSC_lo_raw.size()];
  memset(_u_MMuSCAnalysisMQL_139, 0, sizeof(_u_MMuSCAnalysisMQL_139));
  if(!_t_muSC_lo_raw.checkSort(_u_MMuSCAnalysisMQL_36))
  {
    printf("Warning: table muSC_lo_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuSCAnalysisMQL_140 = 0; _u_MMuSCAnalysisMQL_140 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_140++)
  {
    double time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_140].time;
    if(_u_MMuSCAnalysisMQL_139[_u_MMuSCAnalysisMQL_140])
    {
      continue;
    }
    _u_MMuSCAnalysisMQL_139[_u_MMuSCAnalysisMQL_140] = true;
    int cluster_size = 1;
    int cluster_members[_t_muSC_lo_raw.size()];
    cluster_members[0] = _u_MMuSCAnalysisMQL_140;
    
    for(int _u_MMuSCAnalysisMQL_141 = _u_MMuSCAnalysisMQL_140 + 1; _u_MMuSCAnalysisMQL_141 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_141++)
    {
      if(_u_MMuSCAnalysisMQL_139[_u_MMuSCAnalysisMQL_141])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuSCAnalysisMQL_142 = 0; _u_MMuSCAnalysisMQL_142 < cluster_size; _u_MMuSCAnalysisMQL_142++)
      {
        if(_u_MMuSCAnalysisMQL_142 > 0) break;
        int _u_MMuSCAnalysisMQL_143 = cluster_members[_u_MMuSCAnalysisMQL_142];
        double time_1 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_143].time;
        double time_2 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_141].time;
        
        double _u_MMuSCAnalysisMQL_144 = time_1 - time_2;
        if(_u_MMuSCAnalysisMQL_144 < -kMuSCloADInterval)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuSCAnalysisMQL_141;
        _u_MMuSCAnalysisMQL_139[_u_MMuSCAnalysisMQL_141] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_140].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuSCAnalysisMQL_142 = 0; _u_MMuSCAnalysisMQL_142 < cluster_size; _u_MMuSCAnalysisMQL_142++)
    {
      int _u_MMuSCAnalysisMQL_143 = cluster_members[_u_MMuSCAnalysisMQL_142];
      time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_143].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_140].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
    }
  }
  if(Tier2)
  {
    for(int _u_MMuSCAnalysisMQL_145 = 0; _u_MMuSCAnalysisMQL_145 < _t_muSC_copy1_AD.size(); _u_MMuSCAnalysisMQL_145++)
    {
      double time = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_145].time;
      {
        
        double muSC_copy1_AD_time = _t_muSC_copy1_AD[_u_MMuSCAnalysisMQL_145].time;
        
        if(!_u_MMuSCAnalysisMQL_74)
        {
          if(!_t_muSC_lo_raw.checkSort(_u_MMuSCAnalysisMQL_38))
          {
            printf("Warning: table muSC_lo_raw is not sorted on muSC_lo_raw_time as required for join with muSC_copy1_AD (_u_MMuSCAnalysisMQL_38)\n");
          }
          _u_MMuSCAnalysisMQL_74 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_75)
        {
          if(!(muSC_copy1_AD_time >= _u_MMuSCAnalysisMQL_73))
          {
            printf("Warning: table muSC_copy1_AD is not sorted on muSC_copy1_AD_time as required for join with muSC_lo_raw\n");
            _u_MMuSCAnalysisMQL_75 = true;
          }
        }
        _u_MMuSCAnalysisMQL_73 = muSC_copy1_AD_time;
        for( ; _u_MMuSCAnalysisMQL_72 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_72++)
        {
          double muSC_lo_raw_time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_72].time;
          
          double _u_MMuSCAnalysisMQL_146 = muSC_copy1_AD_time - muSC_lo_raw_time;
          if(_u_MMuSCAnalysisMQL_146 < 30001)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_148 = _u_MMuSCAnalysisMQL_72; _u_MMuSCAnalysisMQL_148 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_148++)
        {
          double muSC_lo_raw_time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_148].time;
          
          double _u_MMuSCAnalysisMQL_146 = muSC_copy1_AD_time - muSC_lo_raw_time;
          if(_u_MMuSCAnalysisMQL_146 < -30001)
          {
            break;
          }
          {
            double muSC_copy1_AD_time_0 = muSC_copy1_AD_time;
            double muSC_lo_raw_time_0 = muSC_lo_raw_time;
            double muSC_copy1_AD_time = muSC_copy1_AD_time_0;
            double muSC_lo_raw_time = muSC_lo_raw_time_0;
            if(Tier2)
            {
              _h_muSClo_muSC_tdiff->Fill(muSC_lo_raw_time-muSC_copy1_AD_time);
            }
          }
        }
      }
    }
  }
  if(Tier2)
  {
    for(int _u_MMuSCAnalysisMQL_149 = 0; _u_MMuSCAnalysisMQL_149 < _t_muSC_lo_raw.size(); _u_MMuSCAnalysisMQL_149++)
    {
      double time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_149].time;
      {
        
        double muSC_lo_raw_time = _t_muSC_lo_raw[_u_MMuSCAnalysisMQL_149].time;
        
        if(!_u_MMuSCAnalysisMQL_78)
        {
          if(!_t_kick_raw.checkSort(_u_MMuSCAnalysisMQL_40))
          {
            printf("Warning: table kick_raw is not sorted on kick_raw_time as required for join with muSC_lo_raw (_u_MMuSCAnalysisMQL_40)\n");
          }
          _u_MMuSCAnalysisMQL_78 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_79)
        {
          if(!(muSC_lo_raw_time >= _u_MMuSCAnalysisMQL_77))
          {
            printf("Warning: table muSC_lo_raw is not sorted on muSC_lo_raw_time as required for join with kick_raw\n");
            _u_MMuSCAnalysisMQL_79 = true;
          }
        }
        _u_MMuSCAnalysisMQL_77 = muSC_lo_raw_time;
        for( ; _u_MMuSCAnalysisMQL_76 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_76++)
        {
          double kick_raw_time = _t_kick_raw[_u_MMuSCAnalysisMQL_76].time;
          
          double _u_MMuSCAnalysisMQL_150 = muSC_lo_raw_time - kick_raw_time;
          if(_u_MMuSCAnalysisMQL_150 < 30001)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_152 = _u_MMuSCAnalysisMQL_76; _u_MMuSCAnalysisMQL_152 < _t_kick_raw.size(); _u_MMuSCAnalysisMQL_152++)
        {
          double kick_raw_time = _t_kick_raw[_u_MMuSCAnalysisMQL_152].time;
          
          double _u_MMuSCAnalysisMQL_150 = muSC_lo_raw_time - kick_raw_time;
          if(_u_MMuSCAnalysisMQL_150 < -30001)
          {
            break;
          }
          {
            double muSC_lo_raw_time_0 = muSC_lo_raw_time;
            double kick_raw_time_0 = kick_raw_time;
            double muSC_lo_raw_time = muSC_lo_raw_time_0;
            double kick_raw_time = kick_raw_time_0;
            if(Tier2)
            {
              _h_muSClo_kick_tdiff->Fill(muSC_lo_raw_time-kick_raw_time);
            }
          }
        }
      }
    }
  }
  if(Tier1)
  {
    for(int _u_MMuSCAnalysisMQL_153 = 0; _u_MMuSCAnalysisMQL_153 < _t_muSC_gate_B.size(); _u_MMuSCAnalysisMQL_153++)
    {
      double time = _t_muSC_gate_B[_u_MMuSCAnalysisMQL_153].time;
      {
        
        double muSC_gate_B_time = _t_muSC_gate_B[_u_MMuSCAnalysisMQL_153].time;
        
        if(!_u_MMuSCAnalysisMQL_82)
        {
          if(!_t_muSC_gate_BBar.checkSort(_u_MMuSCAnalysisMQL_42))
          {
            printf("Warning: table muSC_gate_BBar is not sorted on muSC_gate_BBar_time as required for join with muSC_gate_B (_u_MMuSCAnalysisMQL_42)\n");
          }
          _u_MMuSCAnalysisMQL_82 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_83)
        {
          if(!(muSC_gate_B_time >= _u_MMuSCAnalysisMQL_81))
          {
            printf("Warning: table muSC_gate_B is not sorted on muSC_gate_B_time as required for join with muSC_gate_BBar\n");
            _u_MMuSCAnalysisMQL_83 = true;
          }
        }
        _u_MMuSCAnalysisMQL_81 = muSC_gate_B_time;
        for( ; _u_MMuSCAnalysisMQL_80 < _t_muSC_gate_BBar.size(); _u_MMuSCAnalysisMQL_80++)
        {
          double muSC_gate_BBar_time = _t_muSC_gate_BBar[_u_MMuSCAnalysisMQL_80].time;
          
          double _u_MMuSCAnalysisMQL_154 = muSC_gate_B_time - muSC_gate_BBar_time;
          if(_u_MMuSCAnalysisMQL_154 < 0)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_156 = _u_MMuSCAnalysisMQL_80; _u_MMuSCAnalysisMQL_156 < _t_muSC_gate_BBar.size(); _u_MMuSCAnalysisMQL_156++)
        {
          double muSC_gate_BBar_time = _t_muSC_gate_BBar[_u_MMuSCAnalysisMQL_156].time;
          
          double _u_MMuSCAnalysisMQL_154 = muSC_gate_B_time - muSC_gate_BBar_time;
          if(_u_MMuSCAnalysisMQL_154 < -5000)
          {
            break;
          }
          {
            double muSC_gate_B_time_0 = muSC_gate_B_time;
            double muSC_gate_BBar_time_0 = muSC_gate_BBar_time;
            double muSC_gate_B_time = muSC_gate_B_time_0;
            double muSC_gate_BBar_time = muSC_gate_BBar_time_0;
            if(Tier1)
            {
              _h_muSC_gate_B_BBar_tdiff->Fill(muSC_gate_BBar_time - muSC_gate_B_time);
            }
            break;
          }
        }
      }
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_157 = 0; _u_MMuSCAnalysisMQL_157 < _t_muSCA_raw.size(); _u_MMuSCAnalysisMQL_157++)
    {
      double time = _t_muSCA_raw[_u_MMuSCAnalysisMQL_157].time;
      {
        
        double time_1 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_157].time;
        
        if(!_u_MMuSCAnalysisMQL_86)
        {
          if(!_t_muSCA_raw.checkSort(_u_MMuSCAnalysisMQL_44))
          {
            printf("Warning: table muSCA_raw is not sorted on time_2 as required for join with muSCA_raw (_u_MMuSCAnalysisMQL_44)\n");
          }
          _u_MMuSCAnalysisMQL_86 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_87)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_85))
          {
            printf("Warning: table muSCA_raw is not sorted on time_1 as required for join with muSCA_raw\n");
            _u_MMuSCAnalysisMQL_87 = true;
          }
        }
        _u_MMuSCAnalysisMQL_85 = time_1;
        for( ; _u_MMuSCAnalysisMQL_84 < _t_muSCA_raw.size(); _u_MMuSCAnalysisMQL_84++)
        {
          double time_2 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_84].time;
          
          double _u_MMuSCAnalysisMQL_158 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_158 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_160 = _u_MMuSCAnalysisMQL_84; _u_MMuSCAnalysisMQL_160 < _t_muSCA_raw.size(); _u_MMuSCAnalysisMQL_160++)
        {
          double time_2 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_160].time;
          
          double _u_MMuSCAnalysisMQL_158 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_158 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muSCA_raw_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  bool _u_MMuSCAnalysisMQL_161[_t_muSCA_raw.size()];
  memset(_u_MMuSCAnalysisMQL_161, 0, sizeof(_u_MMuSCAnalysisMQL_161));
  if(!_t_muSCA_raw.checkSort(_u_MMuSCAnalysisMQL_45))
  {
    printf("Warning: table muSCA_raw is not sorted on time_1 as required for cluster.\n");
  }
  for(int _u_MMuSCAnalysisMQL_162 = 0; _u_MMuSCAnalysisMQL_162 < _t_muSCA_raw.size(); _u_MMuSCAnalysisMQL_162++)
  {
    double time = _t_muSCA_raw[_u_MMuSCAnalysisMQL_162].time;
    if(_u_MMuSCAnalysisMQL_161[_u_MMuSCAnalysisMQL_162])
    {
      continue;
    }
    _u_MMuSCAnalysisMQL_161[_u_MMuSCAnalysisMQL_162] = true;
    int cluster_size = 1;
    int cluster_members[_t_muSCA_raw.size()];
    cluster_members[0] = _u_MMuSCAnalysisMQL_162;
    
    for(int _u_MMuSCAnalysisMQL_163 = _u_MMuSCAnalysisMQL_162 + 1; _u_MMuSCAnalysisMQL_163 < _t_muSCA_raw.size(); _u_MMuSCAnalysisMQL_163++)
    {
      if(_u_MMuSCAnalysisMQL_161[_u_MMuSCAnalysisMQL_163])
      {
        continue;
      }
      bool coincidence_seen = false;
      for(int _u_MMuSCAnalysisMQL_164 = 0; _u_MMuSCAnalysisMQL_164 < cluster_size; _u_MMuSCAnalysisMQL_164++)
      {
        if(_u_MMuSCAnalysisMQL_164 > 0) break;
        int _u_MMuSCAnalysisMQL_165 = cluster_members[_u_MMuSCAnalysisMQL_164];
        double time_1 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_165].time;
        double time_2 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_163].time;
        
        double _u_MMuSCAnalysisMQL_166 = time_1 - time_2;
        if(_u_MMuSCAnalysisMQL_166 < -kMuSCAADInterval)
        {
          continue;
        }
        coincidence_seen = true;
        cluster_members[cluster_size++] = _u_MMuSCAnalysisMQL_163;
        _u_MMuSCAnalysisMQL_161[_u_MMuSCAnalysisMQL_163] = true;
        break;
      }
      if(!coincidence_seen)
      {
        break;
      }
    }
    double time_min = _t_muSCA_raw[_u_MMuSCAnalysisMQL_162].time;
    double time_max = time_min;
    double time_sum = 0;
    for(int _u_MMuSCAnalysisMQL_164 = 0; _u_MMuSCAnalysisMQL_164 < cluster_size; _u_MMuSCAnalysisMQL_164++)
    {
      int _u_MMuSCAnalysisMQL_165 = cluster_members[_u_MMuSCAnalysisMQL_164];
      time = _t_muSCA_raw[_u_MMuSCAnalysisMQL_165].time;
      time_min = MIN(time_min, time);
      time_max = MAX(time_max, time);
      time_sum = time_sum + time;
    }
    double time_1 = _t_muSCA_raw[_u_MMuSCAnalysisMQL_162].time;
    double time_avg = time_sum/((double)cluster_size);
    double time_width = time_max - time_min + 1;
    {
      double time = time_min;
      int _u_MMuSCAnalysisMQL_167 = _t_muSCA_AD.next();
      _t_muSCA_AD[_u_MMuSCAnalysisMQL_167].time = time;
    }
  }
  if(Tier3)
  {
    for(int _u_MMuSCAnalysisMQL_168 = 0; _u_MMuSCAnalysisMQL_168 < _t_muSCA_AD.size(); _u_MMuSCAnalysisMQL_168++)
    {
      double time = _t_muSCA_AD[_u_MMuSCAnalysisMQL_168].time;
      {
        
        double time_1 = _t_muSCA_AD[_u_MMuSCAnalysisMQL_168].time;
        
        if(!_u_MMuSCAnalysisMQL_91)
        {
          if(!_t_muSCA_AD.checkSort(_u_MMuSCAnalysisMQL_47))
          {
            printf("Warning: table muSCA_AD is not sorted on time_2 as required for join with muSCA_AD (_u_MMuSCAnalysisMQL_47)\n");
          }
          _u_MMuSCAnalysisMQL_91 = true;
        }
        else if(!_u_MMuSCAnalysisMQL_92)
        {
          if(!(time_1 >= _u_MMuSCAnalysisMQL_90))
          {
            printf("Warning: table muSCA_AD is not sorted on time_1 as required for join with muSCA_AD\n");
            _u_MMuSCAnalysisMQL_92 = true;
          }
        }
        _u_MMuSCAnalysisMQL_90 = time_1;
        for( ; _u_MMuSCAnalysisMQL_89 < _t_muSCA_AD.size(); _u_MMuSCAnalysisMQL_89++)
        {
          double time_2 = _t_muSCA_AD[_u_MMuSCAnalysisMQL_89].time;
          
          double _u_MMuSCAnalysisMQL_169 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_169 < 1)
          {
            break;
          }
        }
        for(int _u_MMuSCAnalysisMQL_171 = _u_MMuSCAnalysisMQL_89; _u_MMuSCAnalysisMQL_171 < _t_muSCA_AD.size(); _u_MMuSCAnalysisMQL_171++)
        {
          double time_2 = _t_muSCA_AD[_u_MMuSCAnalysisMQL_171].time;
          
          double _u_MMuSCAnalysisMQL_169 = time_1 - time_2;
          if(_u_MMuSCAnalysisMQL_169 < -50500)
          {
            break;
          }
          {
            double time_1_0 = time_1;
            double time_2_0 = time_2;
            double time_1 = time_1_0;
            double time_2 = time_2_0;
            if(Tier3)
            {
              if((time_2 - time_1) >= 0)
              {
                _h_muSCA_AD_autocorr->Fill(time_2 - time_1);
              }
            }
          }
        }
      }
    }
  }
  _t_muSCA_AD_auto.finish();
  _t_muSC_gate_B.finish();
  _t_muSC_copy1_AD2.finish();
  _t_muSClo_kick_tdiff_check.finish();
  _t_muSCA_raw_auto.finish();
  _t_muSC_gate_B_BBar.finish();
  _t_kick_AD.finish();
  _t_muSC_muSClo_tdiff_check.finish();
  _t_kick_raw_auto.finish();
  _t_muSC_gate_BBar.finish();
  _t_muSC_copy1_AD.finish();
  _t_muSC_copy1_raw.finish();
  _t_hits.finish();
  _t_muSC_lo_raw_auto.finish();
  _t_muSCA_AD.finish();
  _t_muSC_copy1_raw_auto.finish();
  _t_muSC_kick_tdiff_check.finish();
  _t_muSCA_raw.finish();
  _t_muSC_lo_raw.finish();
  _t_kick_raw.finish();
  _t_muSC_lo_AD.finish();
  _t_muSC_copy1_AD_auto.finish();
  return SUCCESS;
}
