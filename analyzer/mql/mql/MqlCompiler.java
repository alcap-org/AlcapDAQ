import java.io.*;

public class MqlCompiler
{
  void findModuleName()
  {
    MqlModuleDeclaration m = (MqlModuleDeclaration) parseTree.jjtGetChild(0);
    moduleName = m.get();
  }

  void writePrologue()
  {
    o.o("/*");
    o.o(" * This file is automatically generated by MqlCompiler - DO NOT EDIT");
    o.o(" * Your changes will be lost when the original source is recompiled");
    o.o(" */");
    o.o();
    o.o("#include <midas.h>");
    o.o("#include " + o.QUOTE + "MqlArray.h" + o.QUOTE);
    o.o("#include " + o.QUOTE + "MqlNtupleColumn.h" + o.QUOTE);
    o.o("#include " + o.QUOTE + "Mql.h" + o.QUOTE);
    o.o();
    o.o("#include <stdio.h>");
    o.o("#include <stdlib.h>");
    o.o("#include <TH1.h>");
    o.o("#include <TH2.h>");
    o.o("#include <TH3.h>");
    o.o("#include <TNtuple.h>");
    o.o();
    o.o("INT " + moduleName + "_init();");
    o.o("INT " + moduleName + "(EVENT_HEADER *, void *);");
    o.o();
    o.o();
    o.o("ANA_MODULE " + moduleName + "_module = ");
    o.openBrace();
    o.o(o.QUOTE + moduleName + o.QUOTE + ", /* module name */");
    o.o(o.QUOTE + "MqlCompiler" + o.QUOTE + ", /* author */");
    o.o(moduleName + ", /* event routine */");
    o.o("NULL, /* BOR routine */");
    o.o("NULL, /* EOR routine */");
    o.o(moduleName + "_init, /* init routine */");
    o.o("NULL, /* exit routine */");
    o.o("NULL, /* parameter structure */");
    o.o("0, /* structure size */");
    o.o("NULL, /* initial parameters */");
    o.closeBrace(";");
    o.o();
  }

  void writePart(MqlStatement s, int part)
    throws IOException, MqlException
  {
    switch(part) {
      case 0: s.declareTables(); break;
      case 1: s.writeDeclaration(o); break;
      case 2: s.writeInitialization(o); break;
      case 3: s.writePreMain(o); break;
      case 4: s.writePostMain(o); break;
    }
  }

  void writeParts(int part)
    throws IOException, MqlException
  {
    int numChildren = parseTree.jjtGetNumChildren();

    for(int i = 0; i < numChildren; i++) {
      SimpleNode node = (SimpleNode) parseTree.jjtGetChild(i);
      if(node instanceof MqlStatement) {
        MqlStatement s = (MqlStatement) node;
        writePart(s, part);
      }
    }
  }

  void declareTables()
    throws IOException, MqlException
  {
    writeParts(0); 
  }

  void writeDeclarations()
    throws IOException, MqlException
  {
    // Write out the initialization function that defines histograms and 
    // ntuples used by this module.

    writeParts(1);
  }

  void writeInitializations()
    throws IOException, MqlException
  {
    // Write out the initialization function that defines histograms and 
    // ntuples used by this module.
  
    o.o();
    o.o("INT " + moduleName + "_init()"); 
    o.openBrace();

    writeParts(2);

    o.o("return SUCCESS;");
    o.closeBrace();
  }
  
  void writeMain()
    throws IOException, MqlException
  {
    // Write out the main function of this module

    o.o();
    o.o("INT " + moduleName + "(EVENT_HEADER *pheader, void *pevent)"); 
    o.openBrace();

    // Open all tables that will be used
    MqlTable.openTables(o);

    // Do all other initialization within the main function that
    // might be necessary 
    writeParts(3);

    boolean anotherPass;
    do {
      anotherPass = false;

      int numChildren = parseTree.jjtGetNumChildren();

      // first look for high-priority statements
      for(int i = 0; i < numChildren; i++) {
        SimpleNode node = (SimpleNode) parseTree.jjtGetChild(i);
        if(node instanceof MqlStatement) {
          MqlStatement s = (MqlStatement) node;
          if(s.readyToGenerate() && s.hasPriority()) {
            s.writeMain(o);
            anotherPass = true;
          }
        }
      }
 
      // otherwise, settle for a low-priority statement
      if(!anotherPass) {
        for(int i = 0; i < numChildren; i++) {
          SimpleNode node = (SimpleNode) parseTree.jjtGetChild(i);
          if(node instanceof MqlStatement) {
            MqlStatement s = (MqlStatement) node;
            if(s.readyToGenerate()) {
              s.writeMain(o);
              anotherPass = true;
            }
          }
        }
      }
    } while(anotherPass);

    // Check that there are no statements left
    int numChildren = parseTree.jjtGetNumChildren();
    for(int i = 0; i < numChildren; i++) {
      SimpleNode node = (SimpleNode) parseTree.jjtGetChild(i);
      if(node instanceof MqlStatement) {
        MqlStatement s = (MqlStatement) node;
        if(s.getStatus() != MqlStatement.FINISHED) {
          throw new MqlException("Statement not finished:" + s.toString());
        }
      }
    }

    // finally, close out all tables
    MqlTable.closeTables(o);

    // finish any additional clean-up work
    writeParts(4);

    o.o("return SUCCESS;");
    o.closeBrace();
  }

  void compile(String inputFilename, String outputFilename)
    throws ParseException, IOException, MqlException
  {
      // open input file
      FileReader inputFile = new FileReader(inputFilename);

      // open output file
      o = new MqlOutput(outputFilename);

      // Parse the input
      MqlParser parser = new MqlParser(inputFile);
      parseTree = parser.Root();

      // Pick out the module name
      findModuleName();

      // Find all tables
      declareTables();

      // Write the output
      writePrologue();
      writeDeclarations();
      writeInitializations();
      writeMain();
  }

  public static void main(String args[]) {

    if(args.length != 2) {
      System.out.println("Usage: mqlcompiler input.mql output.cpp");
      System.exit(1);
    }

    MqlCompiler compiler = new MqlCompiler();
 
    try {
      compiler.compile(args[0], args[1]);
      System.exit(0);
    } catch (Exception e) {
      System.out.println(e.getMessage());

      System.out.println();
      System.out.println("Exception backtrace follows:");

      e.printStackTrace();
      System.exit(1);
    }
  }

  public static String getUniqueID()
  {
    uniqueIDCounter++;
    return "_u_" + moduleName + "_" + uniqueIDCounter;
  }
  public static int uniqueIDCounter = 0;

  private MqlRoot parseTree;
  private MqlOutput o;
  private static String moduleName;

}
