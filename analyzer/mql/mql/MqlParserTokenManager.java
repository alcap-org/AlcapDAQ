/* Generated By:JJTree&JavaCC: Do not edit this line. MqlParserTokenManager.java */
import java.io.*;

public class MqlParserTokenManager implements MqlParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffe00L) != 0L)
         {
            jjmatchedKind = 56;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ffdfbfffe00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x800204000000L) != 0L)
            return 28;
         return -1;
      case 2:
         if ((active0 & 0x810000000L) != 0L)
            return 28;
         if ((active0 & 0x7ff5effffe00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x28d06002000L) != 0L)
            return 28;
         if ((active0 & 0x7d70e9ffde00L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x441028010000L) != 0L)
            return 28;
         if ((active0 & 0x3960c1fede00L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x104000fe4000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 5;
            }
            return 28;
         }
         if ((active0 & 0x2920c1009e00L) != 0L)
            return 28;
         return -1;
      case 6:
         if ((active0 & 0x804000L) != 0L)
            return 28;
         if ((active0 & 0x1040007e0400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x1040007e0400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x1040007e0400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x1040007e0400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      case 10:
         if ((active0 & 0x40002a0000L) != 0L)
            return 28;
         if ((active0 & 0x100000540400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x100000000400L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 11;
            return 28;
         }
         if ((active0 & 0x540000L) != 0L)
            return 28;
         return -1;
      case 12:
         if ((active0 & 0x400L) != 0L)
            return 28;
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 59);
      case 61:
         return jjStopAtPos(0, 60);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800406000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000004000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x120000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x7e0000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200810000200L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10001010000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x120000008400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x88001000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40200000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x9000000000L);
      case 123:
         return jjStopAtPos(0, 62);
      case 125:
         return jjStopAtPos(0, 63);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1008000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x48400fe0000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20004000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x282810000000L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x114043002000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400100000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80008400L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x410001000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000002000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x12a000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x7e0000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x48804800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c400L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 28);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000801000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 28);
         break;
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 28);
         break;
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8400L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x7e0000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10081000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080001000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 28);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 28);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x12041008400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x7e0000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000800a00L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000004000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 28);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 28);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x4400L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x7e0000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 28);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 28);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 28);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 28);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 28);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 28);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x7e0000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x7e0000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x7e0400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 50:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 51:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x540000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 50:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 51:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 17, 28);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 19, 28);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 28);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 38, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 18, 28);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 20, 28);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 10, 28);
         break;
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 47)
                     jjAddStates(12, 14);
                  else if (curChar == 36)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 39)
                     jjAddStates(18, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddStates(20, 22);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(23, 25);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 54)
                     kind = 54;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 19:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 22:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(30, 32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(30, 32);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(35, 8);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(39, 8);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddStates(20, 22);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(12, 14);
                  break;
               case 49:
                  if (curChar == 47)
                     jjCheckNAddStates(36, 38);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 52:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(39, 41);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 60:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddStates(42, 44);
                  break;
               case 64:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 65:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 66:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(7, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(47, 49);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 50:
                  jjAddStates(36, 38);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  jjCheckNAddTwoStates(65, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(28);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 38);
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   30, 31, 36, 37, 40, 41, 8, 0, 30, 3, 36, 40, 49, 60, 61, 19, 
   20, 22, 10, 12, 45, 47, 2, 4, 5, 8, 19, 20, 24, 22, 32, 33, 
   8, 40, 41, 8, 50, 51, 53, 56, 57, 59, 63, 64, 66, 6, 7, 13, 
   14, 16, 21, 23, 25, 34, 35, 38, 39, 42, 43, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\151\155\160\157\162\164", "\156\164\165\160\154\145\137\151\155\160\157\162\164", 
"\145\170\160\157\162\164", "\163\145\154\145\143\164", "\152\157\151\156", 
"\143\154\165\163\164\145\162", "\156\164\165\160\154\145", "\155\145\162\147\145", 
"\150\151\163\164\157\147\162\141\155\61\144", "\150\151\163\164\157\147\162\141\155\163\61\144", 
"\150\151\163\164\157\147\162\141\155\62\144", "\150\151\163\164\157\147\162\141\155\163\62\144", 
"\150\151\163\164\157\147\162\141\155\63\144", "\150\151\163\164\157\147\162\141\155\163\63\144", 
"\154\151\164\145\162\141\154", "\155\157\144\165\154\145", "\142\157\157\154", "\142\171\164\145", 
"\163\150\157\162\164", "\151\156\164", "\146\154\157\141\164", "\144\157\165\142\154\145", 
"\163\164\162\165\143\164", "\146\162\157\155", "\164\157", "\142\151\156\163", "\151\156\164\157", 
"\167\150\145\162\145", "\145\156\141\142\154\145", "\143\157\151\156\143\151\144\145\156\143\145", 
"\167\151\164\150", "\155\157\144\165\154\157", "\156\141\155\145", "\164\151\164\154\145", 
"\165\156\151\161\165\145", "\156\157\156\137\164\162\141\156\163\151\164\151\166\145", 
"\151\156\166\145\162\164", "\157\162\144\145\162", "\142\171", null, null, null, null, null, null, null, 
null, null, null, null, "\73", "\75", "\54", "\173", "\175", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xf9d1fffffffffe01L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[68];
static private final int[] jjstateSet = new int[136];
static protected char curChar;
public MqlParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public MqlParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
