//
// File generated by /home/Damien/root/bin/rootcint at Wed Jun  4 10:55:59 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DataLibraryDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataLibraryDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, ::string > pairlEstringcOstringgR;
      #else
      class pairlEstringcOstringgR  {
         public:
         //friend XX;
         string first; //
         string second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, vector< ::TPulseIsland*, allocator< ::TPulseIsland* >  >  > pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR;
      #else
      class pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR  {
         public:
         //friend XX;
         string first; //
         vector< ::TPulseIsland*, allocator< ::TPulseIsland* >  > second; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSetupData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSetupData(void *p = 0);
   static void *newArray_TSetupData(Long_t size, void *p);
   static void delete_TSetupData(void *p);
   static void deleteArray_TSetupData(void *p);
   static void destruct_TSetupData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSetupData*)
   {
      ::TSetupData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSetupData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSetupData", ::TSetupData::Class_Version(), "./../../src/common/TSetupData.h", 13,
                  typeid(::TSetupData), DefineBehavior(ptr, ptr),
                  &::TSetupData::Dictionary, isa_proxy, 4,
                  sizeof(::TSetupData) );
      instance.SetNew(&new_TSetupData);
      instance.SetNewArray(&newArray_TSetupData);
      instance.SetDelete(&delete_TSetupData);
      instance.SetDeleteArray(&deleteArray_TSetupData);
      instance.SetDestructor(&destruct_TSetupData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSetupData*)
   {
      return GenerateInitInstanceLocal((::TSetupData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSetupData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEstringcOstringgR_Dictionary();
   static void *new_pairlEstringcOstringgR(void *p = 0);
   static void *newArray_pairlEstringcOstringgR(Long_t size, void *p);
   static void delete_pairlEstringcOstringgR(void *p);
   static void deleteArray_pairlEstringcOstringgR(void *p);
   static void destruct_pairlEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,string>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<string,string>) == sizeof(::ROOT::Shadow::pairlEstringcOstringgR));
      pair<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,string>", "/home/Damien/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<string,string>), DefineBehavior(ptr, ptr),
                  &pairlEstringcOstringgR_ShowMembers, &pairlEstringcOstringgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,string>) );
      instance.SetNew(&new_pairlEstringcOstringgR);
      instance.SetNewArray(&newArray_pairlEstringcOstringgR);
      instance.SetDelete(&delete_pairlEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOstringgR);
      instance.SetDestructor(&destruct_pairlEstringcOstringgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,string>*)
   {
      return GenerateInitInstanceLocal((pair<string,string>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)
   {
      ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,string,less<string>,allocator<pair<const string,string> > >::iterator", "/home/Damien/root/cint/cint/lib/prec_stl/map", 103,
                  typeid(::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator) );
      instance.SetNew(&new_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TPulseIsland_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TPulseIsland(void *p = 0);
   static void *newArray_TPulseIsland(Long_t size, void *p);
   static void delete_TPulseIsland(void *p);
   static void deleteArray_TPulseIsland(void *p);
   static void destruct_TPulseIsland(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPulseIsland*)
   {
      ::TPulseIsland *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPulseIsland >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPulseIsland", ::TPulseIsland::Class_Version(), "./../../src/common/TPulseIsland.h", 11,
                  typeid(::TPulseIsland), DefineBehavior(ptr, ptr),
                  &::TPulseIsland::Dictionary, isa_proxy, 4,
                  sizeof(::TPulseIsland) );
      instance.SetNew(&new_TPulseIsland);
      instance.SetNewArray(&newArray_TPulseIsland);
      instance.SetDelete(&delete_TPulseIsland);
      instance.SetDeleteArray(&deleteArray_TPulseIsland);
      instance.SetDestructor(&destruct_TPulseIsland);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPulseIsland*)
   {
      return GenerateInitInstanceLocal((::TPulseIsland*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPulseIsland*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGlobalData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGlobalData(void *p = 0);
   static void *newArray_TGlobalData(Long_t size, void *p);
   static void delete_TGlobalData(void *p);
   static void deleteArray_TGlobalData(void *p);
   static void destruct_TGlobalData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGlobalData*)
   {
      ::TGlobalData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGlobalData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGlobalData", ::TGlobalData::Class_Version(), "./../../src/common/TGlobalData.h", 13,
                  typeid(::TGlobalData), DefineBehavior(ptr, ptr),
                  &::TGlobalData::Dictionary, isa_proxy, 4,
                  sizeof(::TGlobalData) );
      instance.SetNew(&new_TGlobalData);
      instance.SetNewArray(&newArray_TGlobalData);
      instance.SetDelete(&delete_TGlobalData);
      instance.SetDeleteArray(&deleteArray_TGlobalData);
      instance.SetDestructor(&destruct_TGlobalData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGlobalData*)
   {
      return GenerateInitInstanceLocal((::TGlobalData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGlobalData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)
   {
      ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator", "/home/Damien/root/cint/cint/lib/prec_stl/vector", 218,
                  typeid(::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator) );
      instance.SetNew(&new_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_Dictionary();
   static void *new_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p = 0);
   static void *newArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(Long_t size, void *p);
   static void delete_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p);
   static void deleteArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p);
   static void destruct_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >) == sizeof(::ROOT::Shadow::pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
      pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >", "/home/Damien/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >), DefineBehavior(ptr, ptr),
                  &pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_ShowMembers, &pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >) );
      instance.SetNew(&new_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
      instance.SetNewArray(&newArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
      instance.SetDelete(&delete_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
      instance.SetDestructor(&destruct_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)
   {
      return GenerateInitInstanceLocal((pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)
   {
      ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator", "/home/Damien/root/cint/cint/lib/prec_stl/map", 103,
                  typeid(::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator) );
      instance.SetNew(&new_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TAnalysedPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TAnalysedPulse(void *p = 0);
   static void *newArray_TAnalysedPulse(Long_t size, void *p);
   static void delete_TAnalysedPulse(void *p);
   static void deleteArray_TAnalysedPulse(void *p);
   static void destruct_TAnalysedPulse(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAnalysedPulse*)
   {
      ::TAnalysedPulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAnalysedPulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAnalysedPulse", ::TAnalysedPulse::Class_Version(), "./../../src/common/TAnalysedPulse.h", 13,
                  typeid(::TAnalysedPulse), DefineBehavior(ptr, ptr),
                  &::TAnalysedPulse::Dictionary, isa_proxy, 4,
                  sizeof(::TAnalysedPulse) );
      instance.SetNew(&new_TAnalysedPulse);
      instance.SetNewArray(&newArray_TAnalysedPulse);
      instance.SetDelete(&delete_TAnalysedPulse);
      instance.SetDeleteArray(&deleteArray_TAnalysedPulse);
      instance.SetDestructor(&destruct_TAnalysedPulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAnalysedPulse*)
   {
      return GenerateInitInstanceLocal((::TAnalysedPulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAnalysedPulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TDetectorPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TDetectorPulse(void *p = 0);
   static void *newArray_TDetectorPulse(Long_t size, void *p);
   static void delete_TDetectorPulse(void *p);
   static void deleteArray_TDetectorPulse(void *p);
   static void destruct_TDetectorPulse(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TDetectorPulse*)
   {
      ::TDetectorPulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TDetectorPulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TDetectorPulse", ::TDetectorPulse::Class_Version(), "./../../src/common/TDetectorPulse.h", 15,
                  typeid(::TDetectorPulse), DefineBehavior(ptr, ptr),
                  &::TDetectorPulse::Dictionary, isa_proxy, 4,
                  sizeof(::TDetectorPulse) );
      instance.SetNew(&new_TDetectorPulse);
      instance.SetNewArray(&newArray_TDetectorPulse);
      instance.SetDelete(&delete_TDetectorPulse);
      instance.SetDeleteArray(&deleteArray_TDetectorPulse);
      instance.SetDestructor(&destruct_TDetectorPulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TDetectorPulse*)
   {
      return GenerateInitInstanceLocal((::TDetectorPulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TDetectorPulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TVacuumData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TVacuumData(void *p = 0);
   static void *newArray_TVacuumData(Long_t size, void *p);
   static void delete_TVacuumData(void *p);
   static void deleteArray_TVacuumData(void *p);
   static void destruct_TVacuumData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TVacuumData*)
   {
      ::TVacuumData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TVacuumData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TVacuumData", ::TVacuumData::Class_Version(), "./../../src/common/TVacuumData.h", 10,
                  typeid(::TVacuumData), DefineBehavior(ptr, ptr),
                  &::TVacuumData::Dictionary, isa_proxy, 4,
                  sizeof(::TVacuumData) );
      instance.SetNew(&new_TVacuumData);
      instance.SetNewArray(&newArray_TVacuumData);
      instance.SetDelete(&delete_TVacuumData);
      instance.SetDeleteArray(&deleteArray_TVacuumData);
      instance.SetDestructor(&destruct_TVacuumData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TVacuumData*)
   {
      return GenerateInitInstanceLocal((::TVacuumData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TVacuumData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSetupData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSetupData::Class_Name()
{
   return "TSetupData";
}

//______________________________________________________________________________
const char *TSetupData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSetupData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSetupData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSetupData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSetupData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSetupData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSetupData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSetupData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPulseIsland::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPulseIsland::Class_Name()
{
   return "TPulseIsland";
}

//______________________________________________________________________________
const char *TPulseIsland::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPulseIsland*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPulseIsland::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPulseIsland*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPulseIsland::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPulseIsland*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPulseIsland::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPulseIsland*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGlobalData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGlobalData::Class_Name()
{
   return "TGlobalData";
}

//______________________________________________________________________________
const char *TGlobalData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGlobalData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGlobalData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGlobalData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGlobalData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGlobalData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGlobalData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGlobalData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TAnalysedPulse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAnalysedPulse::Class_Name()
{
   return "TAnalysedPulse";
}

//______________________________________________________________________________
const char *TAnalysedPulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAnalysedPulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAnalysedPulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAnalysedPulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAnalysedPulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAnalysedPulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAnalysedPulse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAnalysedPulse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TDetectorPulse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TDetectorPulse::Class_Name()
{
   return "TDetectorPulse";
}

//______________________________________________________________________________
const char *TDetectorPulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TDetectorPulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TDetectorPulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TDetectorPulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TDetectorPulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TDetectorPulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TDetectorPulse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TDetectorPulse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TVacuumData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVacuumData::Class_Name()
{
   return "TVacuumData";
}

//______________________________________________________________________________
const char *TVacuumData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVacuumData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVacuumData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVacuumData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVacuumData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVacuumData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVacuumData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVacuumData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGlobalData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGlobalData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGlobalData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGlobalData::Class(),this);
   }
}

//______________________________________________________________________________
void TGlobalData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGlobalData.
      TClass *R__cl = ::TGlobalData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulseIslandToChannelMap", (void*)&fPulseIslandToChannelMap);
      R__insp.InspectMember("map<std::string,std::vector<TPulseIsland*> >", (void*)&fPulseIslandToChannelMap, "fPulseIslandToChannelMap.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGlobalData(void *p) {
      return  p ? new(p) ::TGlobalData : new ::TGlobalData;
   }
   static void *newArray_TGlobalData(Long_t nElements, void *p) {
      return p ? new(p) ::TGlobalData[nElements] : new ::TGlobalData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGlobalData(void *p) {
      delete ((::TGlobalData*)p);
   }
   static void deleteArray_TGlobalData(void *p) {
      delete [] ((::TGlobalData*)p);
   }
   static void destruct_TGlobalData(void *p) {
      typedef ::TGlobalData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGlobalData

//______________________________________________________________________________
void TPulseIsland::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPulseIsland.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TPulseIsland::Class(),this);
   } else {
      R__b.WriteClassBuffer(TPulseIsland::Class(),this);
   }
}

//______________________________________________________________________________
void TPulseIsland::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TPulseIsland.
      TClass *R__cl = ::TPulseIsland::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSamples", (void*)&fSamples);
      R__insp.InspectMember("vector<int>", (void*)&fSamples, "fSamples.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankName", (void*)&fBankName);
      R__insp.InspectMember("string", (void*)&fBankName, "fBankName.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPulseIsland(void *p) {
      return  p ? new(p) ::TPulseIsland : new ::TPulseIsland;
   }
   static void *newArray_TPulseIsland(Long_t nElements, void *p) {
      return p ? new(p) ::TPulseIsland[nElements] : new ::TPulseIsland[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPulseIsland(void *p) {
      delete ((::TPulseIsland*)p);
   }
   static void deleteArray_TPulseIsland(void *p) {
      delete [] ((::TPulseIsland*)p);
   }
   static void destruct_TPulseIsland(void *p) {
      typedef ::TPulseIsland current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPulseIsland

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator : new ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator;
   }
   static void *newArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator[nElements] : new ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p) {
      delete ((::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)p);
   }
   static void deleteArray_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)p);
   }
   static void destruct_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void *p) {
      typedef ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator : new ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator;
   }
   static void *newArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator[nElements] : new ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)p);
   }
   static void deleteArray_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)p);
   }
   static void destruct_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >.
      typedef ::ROOT::Shadow::pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", (void*)&sobj->first);
      R__insp.InspectMember("string", (void*)&sobj->first, "first.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", (void*)&sobj->second);
      R__insp.InspectMember("vector<TPulseIsland*,allocator<TPulseIsland*> >", (void*)&sobj->second, "second.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > : new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >;
   }
   static void *newArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >[nElements] : new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p) {
      delete ((pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)p);
   }
   static void deleteArray_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p) {
      delete [] ((pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)p);
   }
   static void destruct_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void *p) {
      typedef pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >

//______________________________________________________________________________
void TSetupData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSetupData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSetupData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSetupData::Class(),this);
   }
}

//______________________________________________________________________________
void TSetupData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSetupData.
      TClass *R__cl = ::TSetupData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToDetectorMap", (void*)&fBankToDetectorMap);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&fBankToDetectorMap, "fBankToDetectorMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToClockTickMap", (void*)&fBankToClockTickMap);
      R__insp.InspectMember("map<std::string,double>", (void*)&fBankToClockTickMap, "fBankToClockTickMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToBitMap", (void*)&fBankToBitMap);
      R__insp.InspectMember("map<std::string,int>", (void*)&fBankToBitMap, "fBankToBitMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToADCSlopeCalibMap", (void*)&fBankToADCSlopeCalibMap);
      R__insp.InspectMember("map<std::string,double>", (void*)&fBankToADCSlopeCalibMap, "fBankToADCSlopeCalibMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToADCOffsetCalibMap", (void*)&fBankToADCOffsetCalibMap);
      R__insp.InspectMember("map<std::string,double>", (void*)&fBankToADCOffsetCalibMap, "fBankToADCOffsetCalibMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToTimeShift", (void*)&fBankToTimeShift);
      R__insp.InspectMember("map<std::string,double>", (void*)&fBankToTimeShift, "fBankToTimeShift.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToPolarityMap", (void*)&fBankToPolarityMap);
      R__insp.InspectMember("map<std::string,int>", (void*)&fBankToPolarityMap, "fBankToPolarityMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBankToPedestalMap", (void*)&fBankToPedestalMap);
      R__insp.InspectMember("map<std::string,int>", (void*)&fBankToPedestalMap, "fBankToPedestalMap.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSetupData(void *p) {
      return  p ? new(p) ::TSetupData : new ::TSetupData;
   }
   static void *newArray_TSetupData(Long_t nElements, void *p) {
      return p ? new(p) ::TSetupData[nElements] : new ::TSetupData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSetupData(void *p) {
      delete ((::TSetupData*)p);
   }
   static void deleteArray_TSetupData(void *p) {
      delete [] ((::TSetupData*)p);
   }
   static void destruct_TSetupData(void *p) {
      typedef ::TSetupData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSetupData

//______________________________________________________________________________
void TAnalysedPulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAnalysedPulse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAnalysedPulse::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAnalysedPulse::Class(),this);
   }
}

//______________________________________________________________________________
void TAnalysedPulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TAnalysedPulse.
      TClass *R__cl = ::TAnalysedPulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitude", &fAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntegral", &fIntegral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetName", (void*)&fDetName);
      R__insp.InspectMember("string", (void*)&fDetName, "fDetName.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAnalysedPulse(void *p) {
      return  p ? new(p) ::TAnalysedPulse : new ::TAnalysedPulse;
   }
   static void *newArray_TAnalysedPulse(Long_t nElements, void *p) {
      return p ? new(p) ::TAnalysedPulse[nElements] : new ::TAnalysedPulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAnalysedPulse(void *p) {
      delete ((::TAnalysedPulse*)p);
   }
   static void deleteArray_TAnalysedPulse(void *p) {
      delete [] ((::TAnalysedPulse*)p);
   }
   static void destruct_TAnalysedPulse(void *p) {
      typedef ::TAnalysedPulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAnalysedPulse

//______________________________________________________________________________
void TDetectorPulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class TDetectorPulse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TDetectorPulse::Class(),this);
   } else {
      R__b.WriteClassBuffer(TDetectorPulse::Class(),this);
   }
}

//______________________________________________________________________________
void TDetectorPulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TDetectorPulse.
      TClass *R__cl = ::TDetectorPulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFastPulse", &fFastPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSlowPulse", &fSlowPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetName", (void*)&fDetName);
      R__insp.InspectMember("string", (void*)&fDetName, "fDetName.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TDetectorPulse(void *p) {
      return  p ? new(p) ::TDetectorPulse : new ::TDetectorPulse;
   }
   static void *newArray_TDetectorPulse(Long_t nElements, void *p) {
      return p ? new(p) ::TDetectorPulse[nElements] : new ::TDetectorPulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_TDetectorPulse(void *p) {
      delete ((::TDetectorPulse*)p);
   }
   static void deleteArray_TDetectorPulse(void *p) {
      delete [] ((::TDetectorPulse*)p);
   }
   static void destruct_TDetectorPulse(void *p) {
      typedef ::TDetectorPulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TDetectorPulse

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator : new ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator;
   }
   static void *newArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator[nElements] : new ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)p);
   }
   static void deleteArray_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)p);
   }
   static void destruct_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::map<string,string,less<string>,allocator<pair<const string,string> > >::iterator

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<string,string>.
      typedef ::ROOT::Shadow::pairlEstringcOstringgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,string>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", (void*)&sobj->first);
      R__insp.InspectMember("string", (void*)&sobj->first, "first.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", (void*)&sobj->second);
      R__insp.InspectMember("string", (void*)&sobj->second, "second.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,string> : new pair<string,string>;
   }
   static void *newArray_pairlEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,string>[nElements] : new pair<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOstringgR(void *p) {
      delete ((pair<string,string>*)p);
   }
   static void deleteArray_pairlEstringcOstringgR(void *p) {
      delete [] ((pair<string,string>*)p);
   }
   static void destruct_pairlEstringcOstringgR(void *p) {
      typedef pair<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,string>

//______________________________________________________________________________
void TVacuumData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TVacuumData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TVacuumData::Class(),this);
   } else {
      R__b.WriteClassBuffer(TVacuumData::Class(),this);
   }
}

//______________________________________________________________________________
void TVacuumData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TVacuumData.
      TClass *R__cl = ::TVacuumData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", (void*)&fStatus);
      R__insp.InspectMember("vector<int>", (void*)&fStatus, "fStatus.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPressure", (void*)&fPressure);
      R__insp.InspectMember("vector<float>", (void*)&fPressure, "fPressure.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", (void*)&fTime);
      R__insp.InspectMember("vector<int>", (void*)&fTime, "fTime.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TVacuumData(void *p) {
      return  p ? new(p) ::TVacuumData : new ::TVacuumData;
   }
   static void *newArray_TVacuumData(Long_t nElements, void *p) {
      return p ? new(p) ::TVacuumData[nElements] : new ::TVacuumData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TVacuumData(void *p) {
      delete ((::TVacuumData*)p);
   }
   static void deleteArray_TVacuumData(void *p) {
      delete [] ((::TVacuumData*)p);
   }
   static void destruct_TVacuumData(void *p) {
      typedef ::TVacuumData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TVacuumData

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "map.dll", 0,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void maplEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOstringgR_Dictionary();
   static void *new_maplEstringcOstringgR(void *p = 0);
   static void *newArray_maplEstringcOstringgR(Long_t size, void *p);
   static void delete_maplEstringcOstringgR(void *p);
   static void deleteArray_maplEstringcOstringgR(void *p);
   static void destruct_maplEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,string>*)
   {
      map<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,string>", -2, "/home/Damien/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,string>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOstringgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,string>) );
      instance.SetNew(&new_maplEstringcOstringgR);
      instance.SetNewArray(&newArray_maplEstringcOstringgR);
      instance.SetDelete(&delete_maplEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOstringgR);
      instance.SetDestructor(&destruct_maplEstringcOstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string> : new map<string,string>;
   }
   static void *newArray_maplEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string>[nElements] : new map<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOstringgR(void *p) {
      delete ((map<string,string>*)p);
   }
   static void deleteArray_maplEstringcOstringgR(void *p) {
      delete [] ((map<string,string>*)p);
   }
   static void destruct_maplEstringcOstringgR(void *p) {
      typedef map<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,string>

namespace ROOT {
   void maplEstringcOvectorlETPulseIslandmUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlETPulseIslandmUgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlETPulseIslandmUgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<TPulseIsland*> >*)
   {
      map<string,vector<TPulseIsland*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<TPulseIsland*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<TPulseIsland*> >", -2, "/home/Damien/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,vector<TPulseIsland*> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlETPulseIslandmUgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<TPulseIsland*> >) );
      instance.SetNew(&new_maplEstringcOvectorlETPulseIslandmUgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlETPulseIslandmUgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlETPulseIslandmUgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlETPulseIslandmUgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlETPulseIslandmUgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<TPulseIsland*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<TPulseIsland*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlETPulseIslandmUgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<TPulseIsland*> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<TPulseIsland*> > : new map<string,vector<TPulseIsland*> >;
   }
   static void *newArray_maplEstringcOvectorlETPulseIslandmUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<TPulseIsland*> >[nElements] : new map<string,vector<TPulseIsland*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p) {
      delete ((map<string,vector<TPulseIsland*> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p) {
      delete [] ((map<string,vector<TPulseIsland*> >*)p);
   }
   static void destruct_maplEstringcOvectorlETPulseIslandmUgRsPgR(void *p) {
      typedef map<string,vector<TPulseIsland*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<TPulseIsland*> >

namespace ROOT {
   void vectorlETPulseIslandmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETPulseIslandmUgR_Dictionary();
   static void *new_vectorlETPulseIslandmUgR(void *p = 0);
   static void *newArray_vectorlETPulseIslandmUgR(Long_t size, void *p);
   static void delete_vectorlETPulseIslandmUgR(void *p);
   static void deleteArray_vectorlETPulseIslandmUgR(void *p);
   static void destruct_vectorlETPulseIslandmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TPulseIsland*>*)
   {
      vector<TPulseIsland*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TPulseIsland*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TPulseIsland*>", -2, "/home/Damien/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TPulseIsland*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETPulseIslandmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TPulseIsland*>) );
      instance.SetNew(&new_vectorlETPulseIslandmUgR);
      instance.SetNewArray(&newArray_vectorlETPulseIslandmUgR);
      instance.SetDelete(&delete_vectorlETPulseIslandmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETPulseIslandmUgR);
      instance.SetDestructor(&destruct_vectorlETPulseIslandmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TPulseIsland*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TPulseIsland*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETPulseIslandmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TPulseIsland*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETPulseIslandmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TPulseIsland*> : new vector<TPulseIsland*>;
   }
   static void *newArray_vectorlETPulseIslandmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TPulseIsland*>[nElements] : new vector<TPulseIsland*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETPulseIslandmUgR(void *p) {
      delete ((vector<TPulseIsland*>*)p);
   }
   static void deleteArray_vectorlETPulseIslandmUgR(void *p) {
      delete [] ((vector<TPulseIsland*>*)p);
   }
   static void destruct_vectorlETPulseIslandmUgR(void *p) {
      typedef vector<TPulseIsland*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TPulseIsland*>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/home/Damien/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* DataLibraryDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataLibraryDict();

extern "C" void G__set_cpp_environmentDataLibraryDict() {
  G__cpp_reset_tagtableDataLibraryDict();
}
#include <new>
extern "C" int G__cpp_dllrevDataLibraryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSetupData */
static int G__DataLibraryDict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSetupData::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((TSetupData*) G__getstructoffset())->GetBankName(*((string*) G__int(libp->para[0])));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((TSetupData*) G__getstructoffset())->GetDetectorName(*((string*) G__int(libp->para[0])));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSetupData*) G__getstructoffset())->GetAllDetectors(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSetupData*) G__getstructoffset())->GetClockTick(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSetupData*) G__getstructoffset())->GetNBits(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSetupData*) G__getstructoffset())->GetADCSlopeCalib(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSetupData*) G__getstructoffset())->GetADCOffsetCalib(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSetupData*) G__getstructoffset())->GetTimeShift(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSetupData*) G__getstructoffset())->GetTriggerPolarity(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSetupData*) G__getstructoffset())->GetPedestal(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSetupData*) G__getstructoffset())->SetDetectorName(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetClockTick(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetNBits(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetTimeShift(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetTriggerPolarity(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetPedestal(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetADCSlopeCalib(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->SetADCOffsetCalib(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSetupData::IsFADC(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSetupData::IsHoustonCAEN(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSetupData::IsBostonCAEN(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSetupData::IsSlow(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSetupData::IsFast(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSetupData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSetupData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSetupData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSetupData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSetupData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSetupData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSetupData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSetupData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_504_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSetupData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__DataLibraryDict_504_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSetupData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSetupData[n];
     } else {
       p = new((void*) gvp) TSetupData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSetupData;
     } else {
       p = new((void*) gvp) TSetupData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_504_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSetupData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSetupData(*(TSetupData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSetupData G__TTSetupData;
static int G__DataLibraryDict_504_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSetupData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSetupData*) (soff+(sizeof(TSetupData)*i)))->~G__TTSetupData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSetupData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSetupData*) (soff))->~G__TTSetupData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_504_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSetupData* dest = (TSetupData*) G__getstructoffset();
   *dest = *(TSetupData*) libp->para[0].ref;
   const TSetupData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,string,less<string>,allocator<pair<const string,string> > > */
static int G__DataLibraryDict_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,string,less<string>,allocator<pair<const string,string> > >[n];
     } else {
       p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,string,less<string>,allocator<pair<const string,string> > >;
     } else {
       p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,string,less<string>,allocator<pair<const string,string> > >(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,string,less<string>,allocator<pair<const string,string> > >(*((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >(*((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,string,less<string>,allocator<pair<const string,string> > >(*(map<string,string,less<string>,allocator<pair<const string,string> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >(*(map<string,string,less<string>,allocator<pair<const string,string> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,string,less<string>,allocator<pair<const string,string> > >& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->operator=(*(map<string,string,less<string>,allocator<pair<const string,string> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->begin();
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->end();
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->rend();
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,string,less<string>,allocator<pair<const string,string> > >::iterator,bool>* pobj;
         pair<map<string,string,less<string>,allocator<pair<const string,string> > >::iterator,bool> xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->insert(*(map<string,string,less<string>,allocator<pair<const string,string> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,string,less<string>,allocator<pair<const string,string> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->insert(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])), *(map<string,string,less<string>,allocator<pair<const string,string> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->insert(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->insert(*((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->erase(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->erase(*((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[0])), *((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->swap(*(map<string,string,less<string>,allocator<pair<const string,string> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_507_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,string,less<string>,allocator<pair<const string,string> > > G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR;
static int G__DataLibraryDict_507_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,string,less<string>,allocator<pair<const string,string> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,string,less<string>,allocator<pair<const string,string> > >*) (soff+(sizeof(map<string,string,less<string>,allocator<pair<const string,string> > >)*i)))->~G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,string,less<string>,allocator<pair<const string,string> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,string,less<string>,allocator<pair<const string,string> > >*) (soff))->~G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,string> */
static int G__DataLibraryDict_508_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,string>[n];
     } else {
       p = new((void*) gvp) pair<string,string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,string>;
     } else {
       p = new((void*) gvp) pair<string,string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_508_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,string>(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<string,string>(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_508_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,string>(*(pair<string,string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,string> G__TpairlEstringcOstringgR;
static int G__DataLibraryDict_508_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,string>*) (soff+(sizeof(pair<string,string>)*i)))->~G__TpairlEstringcOstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,string>*) (soff))->~G__TpairlEstringcOstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,string,less<string>,allocator<pair<const string,string> > >::iterator */
static int G__DataLibraryDict_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(*(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(*(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,string,less<string>,allocator<pair<const string,string> > >::iterator& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator=(*(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,string,less<string>,allocator<pair<const string,string> > >::value_type& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,string,less<string>,allocator<pair<const string,string> > >::iterator& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,string,less<string>,allocator<pair<const string,string> > >::iterator& obj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator* pobj;
         map<string,string,less<string>,allocator<pair<const string,string> > >::iterator xobj = ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,string,less<string>,allocator<pair<const string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator==(*(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_509_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,string,less<string>,allocator<pair<const string,string> > >::iterator G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator;
static int G__DataLibraryDict_509_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) (soff+(sizeof(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator)*i)))->~G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*) (soff))->~G__TmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPulseIsland */
static int G__DataLibraryDict_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPulseIsland* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPulseIsland[n];
     } else {
       p = new((void*) gvp) TPulseIsland[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPulseIsland;
     } else {
       p = new((void*) gvp) TPulseIsland;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPulseIsland* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPulseIsland(
(int) G__int(libp->para[0]), *(vector<int>*) libp->para[1].ref
, *((string*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) TPulseIsland(
(int) G__int(libp->para[0]), *(vector<int>*) libp->para[1].ref
, *((string*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TPulseIsland*) G__getstructoffset())->Reset((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TPulseIsland*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const TPulseIsland*) G__getstructoffset())->GetSamples();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPulseIsland*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TPulseIsland*) G__getstructoffset())->GetBankName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetClockTickInNs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPulseIsland*) G__getstructoffset())->GetTriggerPolarity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetFastPulseAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetSlowPulseAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetPulseHeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetPulseTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TPulseIsland*) G__getstructoffset())->GetPulseWaveform(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPulseIsland*) G__getstructoffset())->GetPulseLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPulseIsland*) G__getstructoffset())->GetPeakSample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TPulseIsland*) G__getstructoffset())->GetPedestal((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPulseIsland::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPulseIsland::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPulseIsland::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPulseIsland::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPulseIsland*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPulseIsland::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPulseIsland::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPulseIsland::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_512_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPulseIsland::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_512_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPulseIsland* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPulseIsland(*(TPulseIsland*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPulseIsland G__TTPulseIsland;
static int G__DataLibraryDict_512_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPulseIsland*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPulseIsland*) (soff+(sizeof(TPulseIsland)*i)))->~G__TTPulseIsland();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPulseIsland*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPulseIsland*) (soff))->~G__TTPulseIsland();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_512_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPulseIsland* dest = (TPulseIsland*) G__getstructoffset();
   *dest = *(TPulseIsland*) libp->para[0].ref;
   const TPulseIsland& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGlobalData */
static int G__DataLibraryDict_516_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGlobalData::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGlobalData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGlobalData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGlobalData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGlobalData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGlobalData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGlobalData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGlobalData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGlobalData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_516_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGlobalData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__DataLibraryDict_516_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGlobalData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGlobalData[n];
     } else {
       p = new((void*) gvp) TGlobalData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGlobalData;
     } else {
       p = new((void*) gvp) TGlobalData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_516_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGlobalData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGlobalData(*(TGlobalData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGlobalData G__TTGlobalData;
static int G__DataLibraryDict_516_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGlobalData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGlobalData*) (soff+(sizeof(TGlobalData)*i)))->~G__TTGlobalData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGlobalData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGlobalData*) (soff))->~G__TTGlobalData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_516_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGlobalData* dest = (TGlobalData*) G__getstructoffset();
   *dest = *(TGlobalData*) libp->para[0].ref;
   const TGlobalData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TPulseIsland*,allocator<TPulseIsland*> > */
static int G__DataLibraryDict_518_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reference obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->at((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::const_reference obj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->at((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->begin();
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->end();
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->rend();
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->resize((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->resize((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]), (TPulseIsland*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::reference obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->operator[]((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::const_reference obj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->operator[]((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >[n];
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >;
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TPulseIsland**) libp->para[1].ref : *(TPulseIsland**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TPulseIsland**) libp->para[1].ref : *(TPulseIsland**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TPulseIsland*,allocator<TPulseIsland*> >(*(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >(*(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TPulseIsland*,allocator<TPulseIsland*> >(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[0])), *((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[0])), *((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->operator=(*(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->reserve((vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TPulseIsland*& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TPulseIsland*& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TPulseIsland**) libp->para[0].ref : *(TPulseIsland**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->swap(*(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->insert(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TPulseIsland**) libp->para[1].ref : *(TPulseIsland**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->insert(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[0])), *((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->insert(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[0])), (vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TPulseIsland**) libp->para[2].ref : *(TPulseIsland**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->erase(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->erase(*((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[0])), *((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_518_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TPulseIsland*,allocator<TPulseIsland*> > G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR;
static int G__DataLibraryDict_518_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TPulseIsland*,allocator<TPulseIsland*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) (soff+(sizeof(vector<TPulseIsland*,allocator<TPulseIsland*> >)*i)))->~G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TPulseIsland*,allocator<TPulseIsland*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TPulseIsland*,allocator<TPulseIsland*> >*) (soff))->~G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator */
static int G__DataLibraryDict_519_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator;
     } else {
       p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(libp->para[0].ref ? *(const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer*) libp->para[0].ref : *(const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(libp->para[0].ref ? *(const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer*) libp->para[0].ref : *(const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::reference obj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::reference obj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator[](*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator+=(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator+(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator& obj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator-=(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator-(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer& obj = ((const vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_519_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* pobj;
         vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator xobj = ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) G__getstructoffset())->operator=(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) libp->para[0].ref);
         pobj = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_519_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator;
static int G__DataLibraryDict_519_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) (soff+(sizeof(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator)*i)))->~G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) (soff))->~G__TvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > */
static int G__DataLibraryDict_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TPulseIsland*,allocator<TPulseIsland*> >& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator,bool> xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->insert(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->erase(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->erase(*((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->swap(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_523_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR;
static int G__DataLibraryDict_523_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) (soff+(sizeof(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >)*i)))->~G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*) (soff))->~G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > */
static int G__DataLibraryDict_524_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >[n];
     } else {
       p = new((void*) gvp) pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >;
     } else {
       p = new((void*) gvp) pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_524_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >(*(string*) libp->para[0].ref, *(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >(*(string*) libp->para[0].ref, *(vector<TPulseIsland*,allocator<TPulseIsland*> >*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_524_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >(*(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > G__TpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR;
static int G__DataLibraryDict_524_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*) (soff+(sizeof(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >)*i)))->~G__TpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*) (soff))->~G__TpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator */
static int G__DataLibraryDict_525_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator;
     } else {
       p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator=(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator& obj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator* pobj;
         map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator xobj = ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator==(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_525_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) G__getstructoffset())->operator!=(*(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator;
static int G__DataLibraryDict_525_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) (soff+(sizeof(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator)*i)))->~G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*) (soff))->~G__TmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAnalysedPulse */
static int G__DataLibraryDict_528_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAnalysedPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAnalysedPulse[n];
     } else {
       p = new((void*) gvp) TAnalysedPulse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAnalysedPulse;
     } else {
       p = new((void*) gvp) TAnalysedPulse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAnalysedPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAnalysedPulse(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, *((string*) G__int(libp->para[4])));
   } else {
     p = new((void*) gvp) TAnalysedPulse(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, *((string*) G__int(libp->para[4])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TAnalysedPulse*) G__getstructoffset())->Reset((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAnalysedPulse*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TAnalysedPulse*) G__getstructoffset())->GetAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TAnalysedPulse*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TAnalysedPulse*) G__getstructoffset())->GetIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TAnalysedPulse*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TAnalysedPulse*) G__getstructoffset())->GetDetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAnalysedPulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAnalysedPulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAnalysedPulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAnalysedPulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAnalysedPulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAnalysedPulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAnalysedPulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAnalysedPulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_528_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAnalysedPulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_528_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TAnalysedPulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TAnalysedPulse(*(TAnalysedPulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAnalysedPulse G__TTAnalysedPulse;
static int G__DataLibraryDict_528_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAnalysedPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAnalysedPulse*) (soff+(sizeof(TAnalysedPulse)*i)))->~G__TTAnalysedPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAnalysedPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAnalysedPulse*) (soff))->~G__TTAnalysedPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_528_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAnalysedPulse* dest = (TAnalysedPulse*) G__getstructoffset();
   *dest = *(TAnalysedPulse*) libp->para[0].ref;
   const TAnalysedPulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TDetectorPulse */
static int G__DataLibraryDict_529_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDetectorPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TDetectorPulse[n];
     } else {
       p = new((void*) gvp) TDetectorPulse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TDetectorPulse;
     } else {
       p = new((void*) gvp) TDetectorPulse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDetectorPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TDetectorPulse(
(TAnalysedPulse*) G__int(libp->para[0]), (TAnalysedPulse*) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) TDetectorPulse(
(TAnalysedPulse*) G__int(libp->para[0]), (TAnalysedPulse*) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TDetectorPulse*) G__getstructoffset())->Reset((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TDetectorPulse*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetFastPulseAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetSlowPulseAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetFastPulseTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetSlowPulseTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetFastPulseIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TDetectorPulse*) G__getstructoffset())->GetSlowPulseIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TDetectorPulse*) G__getstructoffset())->GetDetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TDetectorPulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDetectorPulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TDetectorPulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TDetectorPulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TDetectorPulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDetectorPulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TDetectorPulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TDetectorPulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_529_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TDetectorPulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_529_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TDetectorPulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TDetectorPulse(*(TDetectorPulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TDetectorPulse G__TTDetectorPulse;
static int G__DataLibraryDict_529_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TDetectorPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TDetectorPulse*) (soff+(sizeof(TDetectorPulse)*i)))->~G__TTDetectorPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TDetectorPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TDetectorPulse*) (soff))->~G__TTDetectorPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_529_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TDetectorPulse* dest = (TDetectorPulse*) G__getstructoffset();
   *dest = *(TDetectorPulse*) libp->para[0].ref;
   const TDetectorPulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TVacuumData */
static int G__DataLibraryDict_530_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVacuumData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TVacuumData[n];
     } else {
       p = new((void*) gvp) TVacuumData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TVacuumData;
     } else {
       p = new((void*) gvp) TVacuumData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVacuumData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TVacuumData(
*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1]))
, *((vector<float>*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) TVacuumData(
*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1]))
, *((vector<float>*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TVacuumData*) G__getstructoffset())->Reset((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TVacuumData*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVacuumData*) G__getstructoffset())->AddPoint((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TVacuumData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVacuumData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TVacuumData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TVacuumData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVacuumData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVacuumData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVacuumData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVacuumData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataLibraryDict_530_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVacuumData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataLibraryDict_530_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TVacuumData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TVacuumData(*(TVacuumData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TVacuumData G__TTVacuumData;
static int G__DataLibraryDict_530_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TVacuumData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TVacuumData*) (soff+(sizeof(TVacuumData)*i)))->~G__TTVacuumData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TVacuumData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TVacuumData*) (soff))->~G__TTVacuumData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataLibraryDict_530_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVacuumData* dest = (TVacuumData*) G__getstructoffset();
   *dest = *(TVacuumData*) libp->para[0].ref;
   const TVacuumData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__DataLibraryDict__0_2003(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) libp->para[0].ref, *(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* TSetupData */

/* map<string,string,less<string>,allocator<pair<const string,string> > > */

/* pair<string,string> */

/* map<string,string,less<string>,allocator<pair<const string,string> > >::iterator */

/* TPulseIsland */

/* TGlobalData */

/* vector<TPulseIsland*,allocator<TPulseIsland*> > */

/* vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator */

/* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > */

/* pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > */

/* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator */

/* TAnalysedPulse */

/* TDetectorPulse */

/* TVacuumData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataLibraryDict {
 public:
  G__Sizep2memfuncDataLibraryDict(): p(&G__Sizep2memfuncDataLibraryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataLibraryDict::*p)();
};

size_t G__get_sizep2memfuncDataLibraryDict()
{
  G__Sizep2memfuncDataLibraryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataLibraryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData))) {
     TSetupData *G__Lderived;
     G__Lderived=(TSetupData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland))) {
     TPulseIsland *G__Lderived;
     G__Lderived=(TPulseIsland*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData))) {
     TGlobalData *G__Lderived;
     G__Lderived=(TGlobalData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse))) {
     TAnalysedPulse *G__Lderived;
     G__Lderived=(TAnalysedPulse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse))) {
     TDetectorPulse *G__Lderived;
     G__Lderived=(TDetectorPulse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData))) {
     TVacuumData *G__Lderived;
     G__Lderived=(TVacuumData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData),G__get_linked_tagnum(&G__DataLibraryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataLibraryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_string),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_string),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DataLibraryDictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOstringgRsPgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TPulseIsland*>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),256,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),1,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),257,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),1,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland),1,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<TPulseIsland*> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<TPulseIsland*> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_string),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DataLibraryDictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<TPulseIsland*> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,vector<TPulseIsland*> >",117,G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSetupData */
static void G__setup_memvarTSetupData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData));
   { TSetupData *p; p=(TSetupData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fBankToDetectorMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,1,"fBankToDetectorMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToClockTickMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"fBankToClockTickMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToBitMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,1,"fBankToBitMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToADCSlopeCalibMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"fBankToADCSlopeCalibMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToADCOffsetCalibMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"fBankToADCOffsetCalibMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToTimeShift)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,1,"fBankToTimeShift=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToPolarityMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,1,"fBankToPolarityMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fBankToPedestalMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,1,"fBankToPedestalMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,string,less<string>,allocator<pair<const string,string> > > */
static void G__setup_memvarmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   { map<string,string,less<string>,allocator<pair<const string,string> > > *p; p=(map<string,string,less<string>,allocator<pair<const string,string> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<string,string> */
static void G__setup_memvarpairlEstringcOstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR));
   { pair<string,string> *p; p=(pair<string,string>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,string,less<string>,allocator<pair<const string,string> > >::iterator */
static void G__setup_memvarmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator));
   { map<string,string,less<string>,allocator<pair<const string,string> > >::iterator *p; p=(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TPulseIsland */
static void G__setup_memvarTPulseIsland(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland));
   { TPulseIsland *p; p=(TPulseIsland*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"fSamples=",0,"adc samples");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fTimeStamp=",0,"time stamp in clock ticks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,4,"fBankName=",0,"FADC Bank name of this island's channel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGlobalData */
static void G__setup_memvarTGlobalData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData));
   { TGlobalData *p; p=(TGlobalData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fPulseIslandToChannelMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<TPulseIsland*> >"),-1,1,"fPulseIslandToChannelMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<TPulseIsland*,allocator<TPulseIsland*> > */
static void G__setup_memvarvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   { vector<TPulseIsland*,allocator<TPulseIsland*> > *p; p=(vector<TPulseIsland*,allocator<TPulseIsland*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator */
static void G__setup_memvarvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   { vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator *p; p=(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > */
static void G__setup_memvarmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   { map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > *p; p=(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > */
static void G__setup_memvarpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
   { pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > *p; p=(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator */
static void G__setup_memvarmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator));
   { map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator *p; p=(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TAnalysedPulse */
static void G__setup_memvarTAnalysedPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse));
   { TAnalysedPulse *p; p=(TAnalysedPulse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fAmplitude=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fIntegral=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,4,"fDetName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TDetectorPulse */
static void G__setup_memvarTDetectorPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse));
   { TDetectorPulse *p; p=(TDetectorPulse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse),-1,-1,4,"fFastPulse=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse),-1,-1,4,"fSlowPulse=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_string),-1,-1,4,"fDetName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TVacuumData */
static void G__setup_memvarTVacuumData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData));
   { TVacuumData *p; p=(TVacuumData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"fStatus=",0,"Status");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"fPressure=",0,"Pressure");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"fTime=",0,"Time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataLibraryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataLibraryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSetupData(void) {
   /* TSetupData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData));
   G__memfunc_setup("Instance",821,G__DataLibraryDict_504_0_1, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TSetupData* (*)())(&TSetupData::Instance) ), 0);
   G__memfunc_setup("GetBankName",1053,G__DataLibraryDict_504_0_2, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - DetectorName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorName",1499,G__DataLibraryDict_504_0_3, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllDetectors",1510,G__DataLibraryDict_504_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 1 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClockTick",1175,G__DataLibraryDict_504_0_5, 100, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBits",768,G__DataLibraryDict_504_0_6, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCSlopeCalib",1478,G__DataLibraryDict_504_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCOffsetCalib",1578,G__DataLibraryDict_504_0_8, 100, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeShift",1197,G__DataLibraryDict_504_0_9, 100, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerPolarity",1864,G__DataLibraryDict_504_0_10, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__DataLibraryDict_504_0_11, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorName",1511,G__DataLibraryDict_504_0_12, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName u 'string' - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClockTick",1187,G__DataLibraryDict_504_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNBits",780,G__DataLibraryDict_504_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeShift",1209,G__DataLibraryDict_504_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerPolarity",1876,G__DataLibraryDict_504_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__DataLibraryDict_504_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCSlopeCalib",1490,G__DataLibraryDict_504_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCOffsetCalib",1590,G__DataLibraryDict_504_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - BankName d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFADC",458,G__DataLibraryDict_504_0_20, 103, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 11 - BankName", "if the first letter is N then the bank name is for a FADC", (void*) G__func2void( (bool (*)(const string&))(&TSetupData::IsFADC) ), 0);
   G__memfunc_setup("IsHoustonCAEN",1219,G__DataLibraryDict_504_0_21, 103, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 11 - BankName", "if the first letter is C then the bank name is for a CAEN", (void*) G__func2void( (bool (*)(const string&))(&TSetupData::IsHoustonCAEN) ), 0);
   G__memfunc_setup("IsBostonCAEN",1096,G__DataLibraryDict_504_0_22, 103, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 11 - BankName", "if the first letter is C then the bank name is for a CAEN", (void*) G__func2void( (bool (*)(const string&))(&TSetupData::IsBostonCAEN) ), 0);
   G__memfunc_setup("IsSlow",609,G__DataLibraryDict_504_0_23, 103, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 11 - BankName", "if the last letter is S then the bank name is for a Slow pulse", (void*) G__func2void( (bool (*)(const string&))(&TSetupData::IsSlow) ), 0);
   G__memfunc_setup("IsFast",586,G__DataLibraryDict_504_0_24, 103, -1, -1, 0, 1, 3, 1, 0, "u 'string' - 11 - BankName", "if the last letter is F then the bank name is for a Fast pulse", (void*) G__func2void( (bool (*)(const string&))(&TSetupData::IsFast) ), 0);
   G__memfunc_setup("GetValue",797,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 4, 8, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' 'map<std::string,double>' 11 - map u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 4, 8, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' 'map<std::string,int>' 11 - map u 'string' - 11 - BankName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_504_0_27, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSetupData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_504_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSetupData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_504_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSetupData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_504_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSetupData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_504_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_504_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSetupData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_504_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSetupData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_504_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSetupData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_504_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSetupData::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TSetupData", 991, G__DataLibraryDict_504_0_39, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TSetupData", 991, G__DataLibraryDict_504_0_40, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData), -1, 0, 1, 1, 1, 0, "u 'TSetupData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSetupData", 1117, G__DataLibraryDict_504_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_504_0_42, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TSetupData), -1, 1, 1, 1, 1, 0, "u 'TSetupData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR(void) {
   /* map<string,string,less<string>,allocator<pair<const string,string> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR));
   G__memfunc_setup("map<string,string,less<string>,allocator<pair<const string,string> > >",6772,G__DataLibraryDict_507_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,string,less<string>,allocator<pair<const string,string> > >",6772,G__DataLibraryDict_507_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - first u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,string,less<string>,allocator<pair<const string,string> > >",6772,G__DataLibraryDict_507_0_3, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator' - 0 - first u 'map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,string,less<string>,allocator<pair<const string,string> > >",6772,G__DataLibraryDict_507_0_4, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_507_0_5, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataLibraryDict_507_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataLibraryDict_507_0_7, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataLibraryDict_507_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataLibraryDict_507_0_9, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataLibraryDict_507_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataLibraryDict_507_0_11, 107, -1, G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataLibraryDict_507_0_12, 107, -1, G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataLibraryDict_507_0_13, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_507_0_14, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,string>' 'map<string,string,less<string>,allocator<pair<const string,string> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_507_0_15, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - position u 'pair<string,string>' 'map<string,string,less<string>,allocator<pair<const string,string> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_507_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - first u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_507_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator' - 0 - first u 'map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_507_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_507_0_19, 107, -1, G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_507_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - first u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataLibraryDict_507_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataLibraryDict_507_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__DataLibraryDict_507_0_23, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__DataLibraryDict_507_0_24, 107, -1, G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__DataLibraryDict_507_0_25, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__DataLibraryDict_507_0_26, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,string,less<string>,allocator<pair<const string,string> > >", 6898, G__DataLibraryDict_507_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOstringgR(void) {
   /* pair<string,string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR));
   G__memfunc_setup("pair<string,string>",1920,G__DataLibraryDict_508_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,string>",1920,G__DataLibraryDict_508_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a u 'string' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,string>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,string>", 1920, G__DataLibraryDict_508_0_4, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,string>", 2046, G__DataLibraryDict_508_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator(void) {
   /* map<string,string,less<string>,allocator<pair<const string,string> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__DataLibraryDict_509_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__DataLibraryDict_509_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_509_0_3, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__DataLibraryDict_509_0_4, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__DataLibraryDict_509_0_5, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOstringgR), G__defined_typename("map<string,string,less<string>,allocator<pair<const string,string> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_509_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_509_0_7, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_509_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_509_0_9, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__DataLibraryDict_509_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__DataLibraryDict_509_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__DataLibraryDict_509_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPulseIsland(void) {
   /* TPulseIsland */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland));
   G__memfunc_setup("TPulseIsland",1208,G__DataLibraryDict_512_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPulseIsland",1208,G__DataLibraryDict_512_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 0, 3, 1, 1, 0, 
"i - - 0 - timestamp u 'vector<int,allocator<int> >' 'vector<int>' 11 - samples_vector "
"u 'string' - 0 - bank_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__DataLibraryDict_512_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSamples",1013,G__DataLibraryDict_512_0_4, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__DataLibraryDict_512_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBankName",1053,G__DataLibraryDict_512_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClockTickInNs",1551,G__DataLibraryDict_512_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerPolarity",1864,G__DataLibraryDict_512_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitude",1221,G__DataLibraryDict_512_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFastPulseAmplitude",2140,G__DataLibraryDict_512_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlowPulseAmplitude",2163,G__DataLibraryDict_512_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseHeight",1410,G__DataLibraryDict_512_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseTime",1208,G__DataLibraryDict_512_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseWaveform",1648,G__DataLibraryDict_512_0_14, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TH1I), -1, 0, 2, 1, 1, 8, 
"u 'string' - 0 - histname u 'string' - 0 - histtitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseLength",1419,G__DataLibraryDict_512_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeakSample",1283,G__DataLibraryDict_512_0_16, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__DataLibraryDict_512_0_17, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - nPedSamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_512_0_18, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPulseIsland::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_512_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPulseIsland::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_512_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPulseIsland::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_512_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPulseIsland::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_512_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_512_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPulseIsland::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_512_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPulseIsland::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_512_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPulseIsland::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_512_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPulseIsland::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPulseIsland", 1208, G__DataLibraryDict_512_0_30, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 0, 1, 1, 1, 0, "u 'TPulseIsland' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPulseIsland", 1334, G__DataLibraryDict_512_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_512_0_32, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 1, 1, 1, 1, 0, "u 'TPulseIsland' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGlobalData(void) {
   /* TGlobalData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData));
   G__memfunc_setup("Instance",821,G__DataLibraryDict_516_0_1, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TGlobalData* (*)())(&TGlobalData::Instance) ), 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_516_0_2, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGlobalData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_516_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGlobalData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_516_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGlobalData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_516_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGlobalData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_516_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_516_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGlobalData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_516_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGlobalData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_516_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGlobalData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_516_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGlobalData::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TGlobalData", 1055, G__DataLibraryDict_516_0_14, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TGlobalData", 1055, G__DataLibraryDict_516_0_15, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData), -1, 0, 1, 1, 1, 0, "u 'TGlobalData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGlobalData", 1181, G__DataLibraryDict_516_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_516_0_17, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TGlobalData), -1, 1, 1, 1, 1, 0, "u 'TGlobalData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR(void) {
   /* vector<TPulseIsland*,allocator<TPulseIsland*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR));
   G__memfunc_setup("at",213,G__DataLibraryDict_518_0_1, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataLibraryDict_518_0_2, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataLibraryDict_518_0_3, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataLibraryDict_518_0_4, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataLibraryDict_518_0_5, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataLibraryDict_518_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataLibraryDict_518_0_7, 107, -1, G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataLibraryDict_518_0_8, 107, -1, G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataLibraryDict_518_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataLibraryDict_518_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - sz U 'TPulseIsland' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataLibraryDict_518_0_11, 107, -1, G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataLibraryDict_518_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataLibraryDict_518_0_13, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataLibraryDict_518_0_14, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TPulseIsland*,allocator<TPulseIsland*> >",4440,G__DataLibraryDict_518_0_15, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TPulseIsland*,allocator<TPulseIsland*> >",4440,G__DataLibraryDict_518_0_16, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n U 'TPulseIsland' - 41 '(TPulseIsland*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TPulseIsland*,allocator<TPulseIsland*> >",4440,G__DataLibraryDict_518_0_17, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TPulseIsland*,allocator<TPulseIsland*> >",4440,G__DataLibraryDict_518_0_18, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' 'vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator' 10 - first u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' 'vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_518_0_19, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataLibraryDict_518_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataLibraryDict_518_0_21, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataLibraryDict_518_0_22, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataLibraryDict_518_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TPulseIsland' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataLibraryDict_518_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_518_0_25, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - position U 'TPulseIsland' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_518_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - position u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' 'vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator' 10 - first "
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' 'vector<TPulseIsland*,allocator<TPulseIsland*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_518_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - position k - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::size_type' 0 - n "
"U 'TPulseIsland' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataLibraryDict_518_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_518_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_518_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - first u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataLibraryDict_518_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TPulseIsland*,allocator<TPulseIsland*> >", 4566, G__DataLibraryDict_518_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator(void) {
   /* vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__DataLibraryDict_519_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__DataLibraryDict_519_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'TPulseIsland' 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__DataLibraryDict_519_0_3, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__DataLibraryDict_519_0_4, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_519_0_5, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_519_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_519_0_7, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_519_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataLibraryDict_519_0_9, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__DataLibraryDict_519_0_10, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__DataLibraryDict_519_0_11, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__DataLibraryDict_519_0_12, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__DataLibraryDict_519_0_13, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__DataLibraryDict_519_0_14, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TPulseIsland), G__defined_typename("vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_519_0_15, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__DataLibraryDict_519_0_16, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__DataLibraryDict_519_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >",14358,G__DataLibraryDict_523_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >",14358,G__DataLibraryDict_523_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - first u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >",14358,G__DataLibraryDict_523_0_3, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >",14358,G__DataLibraryDict_523_0_4, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_523_0_5, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataLibraryDict_523_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataLibraryDict_523_0_7, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataLibraryDict_523_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataLibraryDict_523_0_9, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataLibraryDict_523_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataLibraryDict_523_0_11, 107, -1, G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataLibraryDict_523_0_12, 107, -1, G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataLibraryDict_523_0_13, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_523_0_14, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >' 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_523_0_15, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - position u 'pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >' 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_523_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - first u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataLibraryDict_523_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_523_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_523_0_19, 107, -1, G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataLibraryDict_523_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - first u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataLibraryDict_523_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataLibraryDict_523_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__DataLibraryDict_523_0_23, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__DataLibraryDict_523_0_24, 107, -1, G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__DataLibraryDict_523_0_25, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__DataLibraryDict_523_0_26, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >", 14484, G__DataLibraryDict_523_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR(void) {
   /* pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR));
   G__memfunc_setup("pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >",5729,G__DataLibraryDict_524_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >",5729,G__DataLibraryDict_524_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a u 'vector<TPulseIsland*,allocator<TPulseIsland*> >' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >", 5729, G__DataLibraryDict_524_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >", 5855, G__DataLibraryDict_524_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator(void) {
   /* map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__DataLibraryDict_525_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__DataLibraryDict_525_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataLibraryDict_525_0_3, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__DataLibraryDict_525_0_4, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__DataLibraryDict_525_0_5, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR), G__defined_typename("map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_525_0_6, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataLibraryDict_525_0_7, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_525_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataLibraryDict_525_0_9, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__DataLibraryDict_525_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__DataLibraryDict_525_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__DataLibraryDict_525_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAnalysedPulse(void) {
   /* TAnalysedPulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse));
   G__memfunc_setup("TAnalysedPulse",1422,G__DataLibraryDict_528_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAnalysedPulse",1422,G__DataLibraryDict_528_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse), -1, 0, 5, 1, 1, 0, 
"d - - 0 - amplitude d - - 0 - time "
"d - - 0 - integral d - - 0 - energy "
"u 'string' - 0 - det_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__DataLibraryDict_528_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitude",1221,G__DataLibraryDict_528_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__DataLibraryDict_528_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegral",1110,G__DataLibraryDict_528_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__DataLibraryDict_528_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetName",958,G__DataLibraryDict_528_0_8, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_528_0_9, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAnalysedPulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_528_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAnalysedPulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_528_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAnalysedPulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_528_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAnalysedPulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_528_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_528_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAnalysedPulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_528_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAnalysedPulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_528_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAnalysedPulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_528_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAnalysedPulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAnalysedPulse", 1422, G__DataLibraryDict_528_0_21, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse), -1, 0, 1, 1, 1, 0, "u 'TAnalysedPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAnalysedPulse", 1548, G__DataLibraryDict_528_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_528_0_23, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TAnalysedPulse), -1, 1, 1, 1, 1, 0, "u 'TAnalysedPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTDetectorPulse(void) {
   /* TDetectorPulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse));
   G__memfunc_setup("TDetectorPulse",1431,G__DataLibraryDict_529_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TDetectorPulse",1431,G__DataLibraryDict_529_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse), -1, 0, 3, 1, 1, 0, 
"U 'TAnalysedPulse' - 0 - fast_pulse U 'TAnalysedPulse' - 0 - slow_pulse "
"u 'string' - 0 - det_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__DataLibraryDict_529_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFastPulseAmplitude",2140,G__DataLibraryDict_529_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlowPulseAmplitude",2163,G__DataLibraryDict_529_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFastPulseTime",1606,G__DataLibraryDict_529_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlowPulseTime",1629,G__DataLibraryDict_529_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFastPulseIntegral",2029,G__DataLibraryDict_529_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlowPulseIntegral",2052,G__DataLibraryDict_529_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetName",958,G__DataLibraryDict_529_0_10, 117, G__get_linked_tagnum(&G__DataLibraryDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_529_0_11, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TDetectorPulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_529_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDetectorPulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_529_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TDetectorPulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_529_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TDetectorPulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_529_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_529_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDetectorPulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_529_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TDetectorPulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_529_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TDetectorPulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_529_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TDetectorPulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TDetectorPulse", 1431, G__DataLibraryDict_529_0_23, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse), -1, 0, 1, 1, 1, 0, "u 'TDetectorPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TDetectorPulse", 1557, G__DataLibraryDict_529_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_529_0_25, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TDetectorPulse), -1, 1, 1, 1, 1, 0, "u 'TDetectorPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTVacuumData(void) {
   /* TVacuumData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData));
   G__memfunc_setup("TVacuumData",1087,G__DataLibraryDict_530_0_1, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TVacuumData",1087,G__DataLibraryDict_530_0_2, 105, G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData), -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - time u 'vector<int,allocator<int> >' 'vector<int>' 0 - status "
"u 'vector<float,allocator<float> >' 'vector<float>' 0 - pressure", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__DataLibraryDict_530_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__DataLibraryDict_530_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - time i - - 0 - status "
"f - - 0 - pressure", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataLibraryDict_530_0_5, 85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TVacuumData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataLibraryDict_530_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVacuumData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataLibraryDict_530_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TVacuumData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataLibraryDict_530_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TVacuumData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataLibraryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataLibraryDict_530_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataLibraryDict_530_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVacuumData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataLibraryDict_530_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVacuumData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataLibraryDict_530_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVacuumData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataLibraryDict_530_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVacuumData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TVacuumData", 1087, G__DataLibraryDict_530_0_17, (int) ('i'), G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData), -1, 0, 1, 1, 1, 0, "u 'TVacuumData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TVacuumData", 1213, G__DataLibraryDict_530_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataLibraryDict_530_0_19, (int) ('u'), G__get_linked_tagnum(&G__DataLibraryDictLN_TVacuumData), -1, 1, 1, 1, 1, 0, "u 'TVacuumData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataLibraryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataLibraryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
   G__memfunc_setup("operator!=", 970, G__DataLibraryDict__0_2003, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 11 - x u 'vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func20() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataLibraryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataLibraryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TSetupData = { "TSetupData" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOstringgRsPgR = { "allocator<pair<const string,string> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_pairlEstringcOstringgR = { "pair<string,string>" , 115 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator = { "map<string,string,less<string>,allocator<pair<const string,string> > >::iterator" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator = { "map<string,string,less<string>,allocator<pair<const string,string> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_pairlEmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,string,less<string>,allocator<pair<const string,string> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TPulseIsland = { "TPulseIsland" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TGlobalData = { "TGlobalData" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR = { "vector<TPulseIsland*,allocator<TPulseIsland*> >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator = { "vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgR = { "allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR = { "map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR = { "pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >" , 115 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_pairlEmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TAnalysedPulse = { "TAnalysedPulse" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TDetectorPulse = { "TDetectorPulse" , 99 , -1 };
G__linked_taginfo G__DataLibraryDictLN_TVacuumData = { "TVacuumData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataLibraryDict() {
  G__DataLibraryDictLN_TClass.tagnum = -1 ;
  G__DataLibraryDictLN_TBuffer.tagnum = -1 ;
  G__DataLibraryDictLN_TMemberInspector.tagnum = -1 ;
  G__DataLibraryDictLN_TObject.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_string.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataLibraryDictLN_lesslEstringgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DataLibraryDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DataLibraryDictLN_TH1I.tagnum = -1 ;
  G__DataLibraryDictLN_TSetupData.tagnum = -1 ;
  G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOstringgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_pairlEstringcOstringgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DataLibraryDictLN_pairlEmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DataLibraryDictLN_TPulseIsland.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataLibraryDictLN_TGlobalData.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DataLibraryDictLN_pairlEmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DataLibraryDictLN_TAnalysedPulse.tagnum = -1 ;
  G__DataLibraryDictLN_TDetectorPulse.tagnum = -1 ;
  G__DataLibraryDictLN_TVacuumData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataLibraryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_string);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_lesslEstringgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TH1I);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TSetupData),sizeof(TSetupData),-1,290816,(char*)NULL,G__setup_memvarTSetupData,G__setup_memfuncTSetupData);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOstringgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),sizeof(map<string,string,less<string>,allocator<pair<const string,string> > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR,G__setup_memfuncmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_pairlEstringcOstringgR),sizeof(pair<string,string>),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOstringgR,G__setup_memfuncpairlEstringcOstringgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator),sizeof(map<string,string,less<string>,allocator<pair<const string,string> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_pairlEmaplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TPulseIsland),sizeof(TPulseIsland),-1,323840,(char*)NULL,G__setup_memvarTPulseIsland,G__setup_memfuncTPulseIsland);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TGlobalData),sizeof(TGlobalData),-1,290816,(char*)NULL,G__setup_memvarTGlobalData,G__setup_memfuncTGlobalData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR),sizeof(vector<TPulseIsland*,allocator<TPulseIsland*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR,G__setup_memfuncvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_vectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator),sizeof(vector<TPulseIsland*,allocator<TPulseIsland*> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator,G__setup_memfuncvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_reverse_iteratorlEvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_allocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_pairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR),sizeof(pair<string,vector<TPulseIsland*,allocator<TPulseIsland*> > >),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR,G__setup_memfuncpairlEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator),sizeof(map<string,vector<TPulseIsland*,allocator<TPulseIsland*> >,less<string>,allocator<pair<const string,vector<TPulseIsland*,allocator<TPulseIsland*> > > > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_maplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_pairlEmaplEstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlETPulseIslandmUcOallocatorlETPulseIslandmUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TAnalysedPulse),sizeof(TAnalysedPulse),-1,324864,(char*)NULL,G__setup_memvarTAnalysedPulse,G__setup_memfuncTAnalysedPulse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TDetectorPulse),sizeof(TDetectorPulse),-1,324864,(char*)NULL,G__setup_memvarTDetectorPulse,G__setup_memfuncTDetectorPulse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataLibraryDictLN_TVacuumData),sizeof(TVacuumData),-1,323840,(char*)NULL,G__setup_memvarTVacuumData,G__setup_memfuncTVacuumData);
}
extern "C" void G__cpp_setupDataLibraryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataLibraryDict()");
  G__set_cpp_environmentDataLibraryDict();
  G__cpp_setup_tagtableDataLibraryDict();

  G__cpp_setup_inheritanceDataLibraryDict();

  G__cpp_setup_typetableDataLibraryDict();

  G__cpp_setup_memvarDataLibraryDict();

  G__cpp_setup_memfuncDataLibraryDict();
  G__cpp_setup_globalDataLibraryDict();
  G__cpp_setup_funcDataLibraryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataLibraryDict();
  return;
}
class G__cpp_setup_initDataLibraryDict {
  public:
    G__cpp_setup_initDataLibraryDict() { G__add_setup_func("DataLibraryDict",(G__incsetup)(&G__cpp_setupDataLibraryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataLibraryDict() { G__remove_setup_func("DataLibraryDict"); }
};
G__cpp_setup_initDataLibraryDict G__cpp_setup_initializerDataLibraryDict;

