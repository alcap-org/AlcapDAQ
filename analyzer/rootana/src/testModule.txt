## AN EXAMPLE CONFIG MODULES FILE ##
# comments start with a hash (#) and blank lines are ignored
# comments that occur after an option and on the same line give undefined behaviour (may or may not work)

#### start of global options ######
# Options given before a section header are considered 'global' and are
# treated directly by the modules manager

# the 'debug' option makes the modules parser output extra info. 
# if 'debug=all' is given then every module is passed the 'debug' option 
#debug=all

# The list_modules option dumps all available modules
list_modules
#### end of global options ######

#### start of modules list ######
# The MODULES section must exist and should contain a list of all the modules we want to run with
# This section is handled slightly differently to the others as the option key
# gives an alias for the module that can then be used later on in this file.
# The value (the word after the equals sign) is then the module to actually
# use (ie. the class name for the implementation of that module).
# You can give arguments directy after the class name (if the module supports
# it) or else give options in a section that starts with that modules alias
# Using aliases means we can have multiple instance of a module
[ MODULES ]
# Format is alias = ModuleClass
analyse_pulses = MakeAnalysedPulses 
detector_pulses = MakeDetectorPulses
muon_events = MakeMuonEvents
PulseViewer(SiR2-S , amplitude> 100)
draw_pulses = ExportPulse
#### end of modules list ######

####### begin of module specific options ######
# each subsequent section lists the options for each module named above

[ analyse_pulses ]
# specify the channels to analyse as a whitespace separated list.  If the word
# 'all' appears in the list, the list is left blank or the option not given
# at all then all channels are analysed.
#analyse_channels=SiR2-S SiR2-F all
analyse_channels=SiR2-S SiR2-F
# You can provide a default generator to use for fast and slow channels
default_fast_generator=MaxBin
default_slow_generator=MaxBin
# If you want to request a specific type of generator for a channel then give
# the channel name as the key and the generator as the value
SiR2-S=MaxBin
# You can also have multiple generators for a single channel by building a
# list for that channel with the += operator.  If a generator needs options
# then put them in brackets and comma separated like a c-style constructor
SiR2-F=MaxBin
#SiR2-F+=PeakFitter(0.5,0.3)

[ detector_pulses] 

[ muon_events ] 
algorithm=MaxTimeDiff

# if a section is given but the name doesnt correspond to a module, then its
# contents is ignored.  This means long modules lists can have modules
# commented out easily and the rest of the file can be left alone
[ignored_section]
# options are formed by key-value pairs, separated by an equals sign.
option3=8

[draw_pulses]
# The ExportPulse module can be told to draw a pulse by specifying a channel
# and a list of pulses.  Each entry in the list should be separated by a
# colon.  To specify Pulse 2 for Event 1 on the SiR2-S detector, do:
SiR2-S=  1(2)

####### end of module specific options ######
# vim: set syn=cfg:
