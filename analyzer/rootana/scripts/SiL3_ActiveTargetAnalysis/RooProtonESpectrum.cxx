/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

#include "Riostream.h" 

#include "RooProtonESpectrum.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "Math/ProbFuncMathCore.h"

ClassImp(RooProtonESpectrum) 


//_____________________________________________________________________________
RooProtonESpectrum::RooProtonESpectrum(const char *name, const char *title, 
                       RooAbsReal& _e,
                       RooAbsReal& _t0,
                       RooAbsReal& _k,
                       RooAbsReal& _Q) :
  RooAbsPdf(name,title), 
  e("e","e",this,_e),
  t0("t0","t0",this,_t0),
  k("k","k",this,_k),
  Q("Q","Q",this,_Q)
{ 
} 


//_____________________________________________________________________________
RooProtonESpectrum::RooProtonESpectrum(const RooProtonESpectrum& other, const char* name) :  
  RooAbsPdf(other,name), 
  e("e",this,other.e),
  t0("t0",this,other.t0),
  k("k",this,other.k),
  Q("Q",this,other.Q)
{ 
} 


//_____________________________________________________________________________
Double_t RooProtonESpectrum::evaluate() const 
{
  Double_t result;
  result = std::pow((1 - t0/e), k) * std::exp(-e/Q);
  //  std::cout << "E = " << e << ": T0/E = " << t0/e << ", (1 - T0/E) = " << 1 - t0/e << ", (1 - T0/E)^k = " << std::pow((1-e/t0), k) << ", ((1 - T0/e)^k)*e^(-E/Q) = " << result << std::endl;
  return result;
} 
