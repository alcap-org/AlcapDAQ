{

  gStyle->SetOptStat("ne");
  TCanvas *MuCapCanvas =  (TCanvas *) gROOT->GetListOfCanvases()->At(0);
  MuCapCanvas->Divide(2,2);
  
  TH2F *quadFitAmp = (TH2F*) getHist("hTPCPulsedFTQuadAmplitude");
   TH2F *miniFitAmp = (TH2F*) getHist("hTPCPulsedMiniAmplitude");


TH1F *quadProjY[48];
TH1F *miniProjY[48];

   // Get Y projection of histograms
    TString hName;
    TString hName2;
    for (int i=0;i<48;i++) {
        hName = "quadproj";  hName += i+1;
        hName2 = "miniproj";  hName2 += i+1;

		quadProjY[i] = quadFitAmp?(TH1F *) quadFitAmp->ProjectionY(hName.Data(),i+1,i+1):NULL;
		miniProjY[i] = (TH1F *) miniFitAmp->ProjectionY(hName2.Data(),i+1,i+1);

    }
  
TF1 *quadFits[48];
TF1 *miniFits[48];

	//initialize the gaussian fits
   TString fName;
   TString fName2;
    for (int i=0;i<48;i++) {
        fName = "quadFits";  fName += i;
        fName2 = "miniFits";  fName2 += i;
       quadFits[i] = new TF1(fName.Data(),"gaus",100,200);
       miniFits[i] = new TF1(fName2.Data(),"gaus",100,200);
		}// end of initializing fits

	 //Do the fits for all pads
	 TString fName3;
    TString fName4;
    for (int i=0;i<48;i++) {

       

		  fName3 = "quadFits";  fName3 += i;
        fName4 = "miniFits";  fName4 += i;

			//quadProjY[i]->Fit(fName3.Data(),"RNQ");
			miniProjY[i]->Fit(fName4.Data(),"RNQ");

				
		}// end fitting all pads

	// define parameters
	double quadMean[48];
	double quadSigma[48];
	double quadRes[48];
	double pad[48];
	double miniMean[48];
	double miniSigma[48];
	double miniRes[48];
	double quadCali[48];
	double miniCali[48];

	// get the parameters from the fit
	 for (int i=0;i<48;i++) {

        pad[i]=i+1;

        //quadMean[i] = quadFits[i]->GetParameter(1);
        miniMean[i] = miniFits[i]->GetParameter(1);

        //quadSigma[i] = quadFits[i]->GetParameter(2);
        miniSigma[i] = miniFits[i]->GetParameter(2);
		//sigmaye[i]=fitsy[i]->GetParError(2);
			if(quadMean[i]!= NULL){
        //quadRes[i] = (500/quadMean[i])*quadSigma[i];
	//	  quadCali[i]=(500/quadMean[i]);}
	//		else{
	//		quadRes[i]=0;
	//		quadCali[i]=0;
			 }
		  if(miniMean[i]!= NULL){
        miniRes[i] = (500/miniMean[i])*miniSigma[i];
		  miniCali[i]=(500/miniMean[i]);}
		  
			else{
			miniRes[i]=0;
			miniCali[i]=0;
			 }
	}

	// Plot the quadratic/ mini means
	const Int_t n = 48;
/*
	 gr = new TGraph(n,pad,quadMean);
    gr->SetMarkerStyle(28);
    gr->SetMarkerSize(0.8);
    gr->SetTitle("Quadratic Fit");
	 gr->SetMarkerColor(kGreen);
    gr->SetFillColor(kGreen);
    gr->SetLineColor(kGreen);
  */ 
    gr2 = new TGraph(n,pad,miniMean);
    gr2->SetTitle("Mini Fit");
    gr2->SetMarkerStyle(28);
    gr2->SetMarkerSize(0.8);
    gr2->SetMarkerColor(kBlue);
    gr2->SetFillColor(kBlue);
    gr2->SetLineColor(kBlue);

TMultiGraph *mgr=new TMultiGraph();

   MuCapCanvas->cd(1);
   //mgr->Add(gr);
   mgr->Add(gr2);
   mgr->SetTitle("Fit Mean per Pad");
   mgr->Draw("AP");
   mgr->GetXaxis()->SetTitle("Pad Number");
   mgr->GetYaxis()->SetTitle("Fit Mean (ADC Channels)");
   // MuCapCanvas.cd(1)->BuildLegend(.5,0.67,.80,.80);

//Plot the quadratic/mini RMS

    gr3 = new TGraph(n,pad,quadSigma);
    gr3->SetMarkerStyle(28);
    gr3->SetMarkerSize(0.8);
    gr3->SetTitle("Quadratic Fit");
	 gr3->SetMarkerColor(kGreen);
    gr3->SetFillColor(kGreen);
    gr3->SetLineColor(kGreen);
   
    gr4 = new TGraph(n,pad,miniSigma);
    gr4->SetTitle("Mini Fit");
    gr4->SetMarkerStyle(28);
    gr4->SetMarkerSize(0.8);
    gr4->SetMarkerColor(kBlue);
    gr4->SetFillColor(kBlue);
    gr4->SetLineColor(kBlue);

TMultiGraph *mgr2=new TMultiGraph();

   MuCapCanvas->cd(2);
   mgr2->Add(gr3);
   mgr2->Add(gr4);
   mgr2->SetTitle("Fit Sigma per Pad");
	mgr2->Draw("AP");
   mgr2->GetXaxis()->SetTitle("Pad Number");
   mgr2->GetYaxis()->SetTitle("Fit Sigma (ADC Channels)");


//Plot the quadratic/mini resolution

	 gr5 = new TGraph(n,pad,quadRes);
    gr5->SetMarkerStyle(28);
    gr5->SetMarkerSize(0.8);
    gr5->SetTitle("Quadratic Fit");
	 gr5->SetMarkerColor(kGreen);
    gr5->SetFillColor(kGreen);
    gr5->SetLineColor(kGreen);
   
    gr6 = new TGraph(n,pad,miniRes);
    gr6->SetTitle("Mini Fit");
    gr6->SetMarkerStyle(28);
    gr6->SetMarkerSize(0.8);
    gr6->SetMarkerColor(kBlue);
    gr6->SetFillColor(kBlue);
    gr6->SetLineColor(kBlue);

	TMultiGraph *mgr3=new TMultiGraph();
      
	MuCapCanvas->cd(3);
   mgr3->Add(gr5);
   mgr3->Add(gr6);
   mgr3->SetTitle("Energy Resolution per Pad");
   mgr3->Draw("AP");
   mgr3->GetXaxis()->SetTitle("Pad Number");
   mgr3->GetYaxis()->SetTitle("Energy Resolution (keV)");


	//Calulate tolerance values of the gaussian fits

double qtolFrac[48];
double mtolFrac[48];
for (int i=0; i<48; i++){//loop throught pads

int qnOutsideTS=0;
int qnInsideTS=0;
int qmean=(int)quadMean[i];
int qthreeSigma=(int)3*quadSigma[i];
int qleftLim= qmean-qthreeSigma;
int qrightLim=qmean+qthreeSigma;
int qtenSigma=(int)10*quadSigma[i];
int qstartVal=qmean-qtenSigma;
int qendVal=(qmean+qtenSigma)+1;
double qcontentOut, qcontentIn;

int mnOutsideTS=0;
int mnInsideTS=0;
int mmean=(int)miniMean[i];
int mthreeSigma=(int)3*miniSigma[i];
int mleftLim= mmean-mthreeSigma;
int mrightLim=mmean+mthreeSigma;
int mtenSigma=(int)10*miniSigma[i];
int mstartVal=mmean-mtenSigma;
int mendVal=(mmean+mtenSigma)+1;
double mcontentOut, mcontentIn;

 for(int j = qstartVal; j < qendVal; j++){//loop through quad fit bins within 10 sigma of the mean

	if(j < qleftLim || j > qrightLim){

	qcontentOut=quadProjY[i]->GetBinContent(j);
    qnOutsideTS=qnOutsideTS+qcontentOut;
		//cout<< "Outside Three sigma = " << nOutsideTS << endl;
	} //closing if statement
	
	else {

		qcontentIn=quadProjY[i]->GetBinContent(j);
		qnInsideTS=qnInsideTS+ qcontentIn;
		//cout<< "Inside Theee Sigma = " << nInsideTS << endl;
	}//closing else


 }//closing for loop quad

for(int j = mstartVal; j < mendVal; j++){//loop through mini fit bins within 10 sigma of the mean

	if(j < mleftLim || j > mrightLim){

	mcontentOut=miniProjY[i]->GetBinContent(j);
    mnOutsideTS=mnOutsideTS+mcontentOut;
		//cout<< "Outside Three sigma = " << nOutsideTS << endl;
	} //closing if statement
	
	else {

		mcontentIn=miniProjY[i]->GetBinContent(j);
		mnInsideTS=mnInsideTS+ mcontentIn;
		//cout<< "Inside Theee Sigma = " << nInsideTS << endl;
	}//closing else


 }//closing for loop mini

double qtotal= qnInsideTS+qnOutsideTS;
double qfrac = qnOutsideTS*100/qtotal;

double mtotal= mnInsideTS+mnOutsideTS;
double mfrac = mnOutsideTS*100/mtotal;

qtolFrac[i]=qfrac;
mtolFrac[i]=mfrac;

}// closing pad for loop


   MuCapCanvas->cd(4);

   tolGr = new TGraph(48,pad,qtolFrac);
   tolGr->SetMarkerStyle(28);
   tolGr->SetMarkerSize(0.8);
   tolGr->SetTitle("Gaussian Fit Tolerance perPad");
   tolGr->GetXaxis()->SetTitle("Pad Number");
   tolGr->GetYaxis()->SetTitle("Percent of Pulses Outside 3 Sigma");
	tolGr->SetMarkerColor(kGreen);
    tolGr->SetFillColor(kGreen);
    tolGr->SetLineColor(kGreen);

	tolGr2 = new TGraph(48,pad,mtolFrac);
   tolGr2->SetMarkerStyle(28);
   tolGr2->SetMarkerSize(0.8);
   tolGr2->SetTitle("Gaussian Fit Tolerance perPad");
   tolGr2->GetXaxis()->SetTitle("Pad Number");
   tolGr2->GetYaxis()->SetTitle("Percent of Pulses Outside 3 Sigma");
	tolGr2->SetMarkerColor(kBlue);
    tolGr2->SetFillColor(kBlue);
    tolGr2->SetLineColor(kBlue);

	TMultiGraph *mgr4=new TMultiGraph();
 	mgr4->Add(tolGr);
   mgr4->Add(tolGr2);
   mgr4->SetTitle("Gaussian Fit Tolerance perPad");
   mgr4->Draw("AP");
   mgr4->GetXaxis()->SetTitle("Pad Number");
   mgr4->GetYaxis()->SetTitle("Percent of Pulses Outside 3 Sigma");

}

