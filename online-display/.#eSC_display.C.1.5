#include "ReadoutConversion.h"
const Int_t MUSCDISP=0;
const Int_t APD=0;
const Int_t thresh =100;
void eSC_display()
{
  /*****************************************************************/
  // Prepare the canvas
  
  gROOT->LoadMacro("palette.cxx");
  SetRainbowPalette();
  gStyle->SetOptStat("ne");
  
  pad1 = new TPad("pad1","This is pad1",0.01,0.15,0.66,0.99,0);
  pad1->Divide(4,4);
  pad2 = new TPad("pad2","This is pa    h_Area[4*gond]->GetXaxis()->SetRangeUser(-100,600);
    h_Area[4*gond]->GetYaxis()->SetRangeUser(0,1.1*max_val);d2",0.66,0.500,0.99,0.99,0);
  pad3 = new TPad("pad3", "This is pad3", 0.66, 0.05, 0.99, 0.495);
  pad4 = new TPad("pad4","This is pad4",0.01,0.02,0.65,0.14,0);
  pad1->Draw();
  pad2->Draw();
  pad3->Draw();
  pad4->Draw();

  /*********************** Pad 1 ***********************************/

  TH2F* h2_Area = (TH2F*)(getHist("hArea")); 
  if(h2_Area)
  {
	//printf("\nSTART ->");
	TH1D* h_Projection_Collection[64];
	for(Int_t index = 0; index < 16; index++)
	{
		//printf("\n Index: %d ", (index+1));
		Double_t projection_Max_Value = 0.0;
		pad1->cd(index+1);
		//printf("projection_ID: ");		
		for (Int_t tube = 0; tube < 4; tube++) 
		{
      			Int_t projection_ID = tube + (4*index);			
      			Char_t name[200]; 
      			sprintf(name, "h_Area_gond_%02d_tube_%d",index,tube);
            		h_Projection_Collection[projection_ID] = h2_Area->ProjectionX(name,projection_ID+1,projection_ID+1);
			h_Projection_Collection[projection_ID]->SetLineColor(tube+1);			
			if (tube==0) 
				h_Projection_Collection[projection_ID]->Draw();		
     			else 
				h_Projection_Collection[projection_ID]->Draw("same");			
			Double_t max_Value = h_Projection_Collection[projection_ID]->GetBinContent(h_Projection_Collection[projection_ID]->GetMaximumBin());
      			if ( max_Value > projection_Max_Value )
				 projection_Max_Value = max_Value;					
			//printf(" %d, ", projection_ID);
		}
		h_Projection_Collection[4*index]->GetXaxis()->SetRangeUser(-100,600);
    		h_Projection_Collection[4*index]->GetYaxis()->SetRangeUser(0,1.1*projection_Max_Value);
		//printf(" MAX: %f", projection_Max_Value);
	}
	//printf("\n END <-");
  }

  /*********************** Pad 2 ***********************************/

  // Raw and coincident eSC hits by parameter number. 
  // Raw eSC hits by parameter 
  pad2->cd();
  //TH2* hIslands = getHist("hIslands");
  //hIslands->ProjectionX("_px",0,0);
  //hIslands_px->Draw();
  
  TH1 *hGond = getHist("hGondSingle");
  hGond->SetFillColor(0);
  hGond->Draw();

  // 4-fold eSC hits, with a copy drawn over each of the 4
  // coincident gondolas' parameter  
  TH1 *hGond4ByGond = getHist("hGond4");
  TH1 *hGond4ByParameter = (TH1*)hGond->Clone();
  for (int gond=1; gond<=16; gond++) 
  {
  	int num4fold = hGond4ByGond->GetBinContent(gond);
  	int bin = hGond4ByParameter->FindBin(gond);
  	hGond4ByParameter->SetBinContent(bin, num4fold);
  	hGond4ByParameter->SetBinContent(bin+20, num4fold);
  	hGond4ByParameter->SetBinContent(bin+40, num4fold);
  	hGond4ByParameter->SetBinContent(bin+60, num4fold);
  }
  hGond4ByParameter->SetLineColor(kRed);
  hGond4ByParameter->Draw("SAME");

  // Print out the number of 4-fold eSC hits 
  char *cGond4 = new char[100];
  sprintf(cGond4, "N_{4-Fold eSC Hits} = %10.0f", hGond4ByGond->Integral(1,16));
  TLatex *tgond4 = new TLatex;
  tgond4->SetNDC();
  tgond4->SetTextColor(kRed);
  tgond4->DrawLatex(.4, .83, cGond4);
    
  /*********************** Pad 3 ***********************************/

  TH2D* autoCorr = (TH2D*)(getHist("hGond_SinglesTdiffVsDetector"));  
  pad3->cd();
  pad3->SetLogz(1); 
  autoCorr->GetYaxis()->SetRange(0,1000);
  autoCorr->Draw("colz");

  /*********************** Pad 4 ***********************************/
  // black = OD, red = OU, green = ID, blue = IU
  pad4->cd();
  TLatex *tex = new TLatex(0.1,0.3,"OD");
  tex->SetTextSize(0.5);
  tex->SetTextColor(kBlack);
  tex->Draw();
  tex = new TLatex(0.3,0.3,"OU");
  tex->SetTextSize(0.5);
  tex->SetTextColor(kRed);
  tex->Draw();
  tex = new TLatex(0.5,0.3,"ID");
  tex->SetTextSize(0.5);
  tex->SetTextColor(kGreen);
  tex->Draw();
  tex = new TLatex(0.7,0.3,"IU");
  tex->SetTextSize(0.5);
  tex->SetTextColor(kBlue);
  tex->Draw();
}

TH1 *extractParameters(TH1 *parametersAll, char *title, int first, int last)
{
  char name[80];
  sprintf(name, "hPar%d_%d", first, last);
  TH1D *h = new TH1D(name, title, last-first+1, first-0.5, last+0.5);

  for(int i = first; i <= last; i++)
  {
    h->SetBinContent(i-first+1, parametersAll->GetBinContent(i));
  }

  return h;
}

